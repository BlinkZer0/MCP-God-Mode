/**
 * Zero-Day Exploiter Tool - Main Entry Point
 *
 * Comprehensive tool for researching zero-day vulnerabilities,
 * generating PoCs, and conducting ethical security testing.
 */
import { VulnerabilitySources } from './research/vulnerabilitySources.js';
import { PoCGenerator } from './poc/pocGenerator.js';
import { TestingManager } from './testing/testingManager.js';
class ZeroDayExploiterTool {
    vulnerabilitySources;
    pocGenerator;
    testingManager;
    config;
    legalAcknowledgment;
    constructor(config) {
        this.config = this.initializeConfig(config);
        this.vulnerabilitySources = new VulnerabilitySources();
        this.pocGenerator = new PoCGenerator();
        this.testingManager = new TestingManager();
        this.legalAcknowledgment = this.initializeLegalAcknowledgment();
    }
    /**
     * Research current zero-day vulnerabilities
     */
    async researchVulnerabilities(options) {
        try {
            console.log('🔍 Researching zero-day vulnerabilities...');
            const result = await this.vulnerabilitySources.researchVulnerabilities(options);
            if (result.success) {
                console.log(`✅ Found ${result.totalFound} vulnerabilities from ${result.sources.join(', ')}`);
            }
            else {
                console.log(`❌ Research failed: ${result.errors?.join(', ')}`);
            }
            return result;
        }
        catch (error) {
            console.error('Research error:', error);
            return {
                success: false,
                vulnerabilities: [],
                totalFound: 0,
                lastUpdated: new Date().toISOString(),
                sources: [],
                errors: [error instanceof Error ? error.message : 'Unknown error occurred']
            };
        }
    }
    /**
     * Generate PoC for a vulnerability
     */
    async generatePoC(options) {
        try {
            console.log(`🛠️  Generating PoC for ${options.vulnerability.cve}...`);
            // Check legal requirements
            if (this.config.security.requireLegalAcknowledgment && !this.legalAcknowledgment.acknowledged) {
                return {
                    success: false,
                    pocPath: '',
                    language: options.language,
                    safetyLevel: options.safetyLevel,
                    dependencies: [],
                    instructions: [],
                    warnings: ['Legal acknowledgment required before PoC generation'],
                    errors: ['Legal acknowledgment not provided']
                };
            }
            const result = await this.pocGenerator.generatePoC(options);
            if (result.success) {
                console.log(`✅ PoC generated: ${result.pocPath}`);
                console.log(`📋 Dependencies: ${result.dependencies.join(', ')}`);
                console.log(`⚠️  Safety Level: ${result.safetyLevel}`);
            }
            else {
                console.log(`❌ PoC generation failed: ${result.errors?.join(', ')}`);
            }
            return result;
        }
        catch (error) {
            console.error('PoC generation error:', error);
            return {
                success: false,
                pocPath: '',
                language: options.language,
                safetyLevel: options.safetyLevel,
                dependencies: [],
                instructions: [],
                warnings: [],
                errors: [error instanceof Error ? error.message : 'Unknown error occurred']
            };
        }
    }
    /**
     * Start testing session
     */
    async startTestingSession(vulnerability, pocPath, environmentId) {
        try {
            console.log(`🧪 Starting testing session for ${vulnerability.cve}...`);
            const environment = this.testingManager.getEnvironment(environmentId);
            if (!environment) {
                throw new Error(`Environment not found: ${environmentId}`);
            }
            const session = await this.testingManager.startTestingSession(vulnerability, pocPath, environment, this.legalAcknowledgment);
            console.log(`✅ Testing session started: ${session.id}`);
            return session;
        }
        catch (error) {
            console.error('Testing session error:', error);
            throw error;
        }
    }
    /**
     * Get testing session status
     */
    async getSessionStatus(sessionId) {
        return this.testingManager.getSession(sessionId);
    }
    /**
     * Cancel testing session
     */
    async cancelSession(sessionId) {
        return this.testingManager.cancelSession(sessionId);
    }
    /**
     * Get tool status
     */
    getStatus() {
        const activeSessions = this.testingManager.getActiveSessions();
        return {
            totalVulnerabilities: 0, // Would be populated from cache
            activeSessions: activeSessions.length,
            lastResearchUpdate: new Date().toISOString(),
            pocTemplatesAvailable: this.pocGenerator.getAvailableTemplates().length,
            testingEnvironmentsConfigured: this.testingManager.getAvailableEnvironments().length,
            securityWarnings: this.getSecurityWarnings().length,
            legalAcknowledgmentRequired: this.config.security.requireLegalAcknowledgment
        };
    }
    /**
     * Acknowledge legal requirements
     */
    acknowledgeLegal(userSignature) {
        if (this.config.security.requireLegalAcknowledgment) {
            this.legalAcknowledgment.acknowledged = true;
            this.legalAcknowledgment.timestamp = new Date().toISOString();
            this.legalAcknowledgment.userSignature = userSignature;
            console.log('✅ Legal acknowledgment recorded');
            return true;
        }
        return false;
    }
    /**
     * Get security warnings
     */
    getSecurityWarnings() {
        const warnings = [];
        if (this.config.security.requireLegalAcknowledgment && !this.legalAcknowledgment.acknowledged) {
            warnings.push('Legal acknowledgment required before using this tool');
        }
        if (this.config.security.blockDangerousOperations) {
            warnings.push('Dangerous operations are blocked by configuration');
        }
        const activeSessions = this.testingManager.getActiveSessions();
        if (activeSessions.length > 0) {
            warnings.push(`${activeSessions.length} active testing sessions running`);
        }
        return warnings;
    }
    /**
     * Get available environments
     */
    getAvailableEnvironments() {
        return this.testingManager.getAvailableEnvironments();
    }
    /**
     * Get available PoC templates
     */
    getAvailableTemplates() {
        return this.pocGenerator.getAvailableTemplates();
    }
    /**
     * Get audit log
     */
    getAuditLog() {
        return this.testingManager.getAuditLog();
    }
    /**
     * Initialize configuration
     */
    initializeConfig(config) {
        const defaultConfig = {
            research: {
                sources: {
                    cisaKeV: true,
                    microsoftPatchTuesday: true,
                    googleAndroidBulletin: true,
                    appleSecurityUpdates: true,
                    citrixAdvisories: true,
                    customSources: []
                },
                updateInterval: 60, // 1 hour
                cacheExpiry: 24 // 24 hours
            },
            poc: {
                defaultLanguage: 'Python',
                includeSafetyChecks: true,
                requireAuthorization: true,
                logAllActivity: true
            },
            testing: {
                defaultEnvironment: 'local',
                requireConfirmation: true,
                timeoutSeconds: 300,
                maxConcurrentTests: 3
            },
            security: {
                requireLegalAcknowledgment: true,
                blockDangerousOperations: false,
                auditLogging: true,
                encryptionEnabled: false
            }
        };
        return { ...defaultConfig, ...config };
    }
    /**
     * Initialize legal acknowledgment
     */
    initializeLegalAcknowledgment() {
        return {
            required: this.config.security.requireLegalAcknowledgment,
            acknowledged: false,
            warnings: [
                'This tool is for authorized security testing only',
                'Unauthorized use may violate laws and result in criminal charges',
                'Only test on systems you own or have explicit permission to test',
                'Follow responsible disclosure practices',
                'Document all testing activities for audit purposes'
            ],
            terms: [
                'I acknowledge that I have read and understand the legal warnings',
                'I confirm that I will only use this tool for authorized testing',
                'I understand that unauthorized use may result in legal consequences',
                'I agree to follow responsible disclosure practices',
                'I will document all testing activities appropriately'
            ]
        };
    }
}
// Export types and main class
export * from './schema/types';

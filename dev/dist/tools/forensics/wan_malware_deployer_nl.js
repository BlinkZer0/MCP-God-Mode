import { z } from "zod";
// Natural Language Interface for WAN Malware Deployer
export function registerWanMalwareDeployerNl(server) {
    server.registerTool("wan_malware_deployer_nl", {
        description: "ðŸ¤– **WAN Malware Deployer Natural Language Interface** - Process natural language commands for malware deployment operations. Converts conversational requests like 'scan and attack 192.168.1.100 with ransomware' into structured deployment commands.",
        inputSchema: {
            command: z
                .string()
                .describe("Natural language command for malware deployment (e.g., 'scan and attack 192.168.1.100 with ransomware', 'deploy trojan to target.com on port 8080', 'list available payloads', 'scan ports on 10.0.0.1')"),
        },
        outputSchema: {
            success: z.boolean(),
            message: z.string(),
            parsed_command: z
                .object({
                action: z.string(),
                target: z.string().optional(),
                payload: z.string().optional(),
                port: z.number().optional(),
                mode: z.string(),
            })
                .optional(),
            available_commands: z.array(z.string()).optional(),
        },
    }, async ({ command }) => {
        try {
            const lowerCommand = command.toLowerCase();
            // Available command patterns
            const commandPatterns = [
                {
                    pattern: /list.*payload|show.*payload|available.*payload/i,
                    action: "list_payloads",
                    mode: "list_payloads",
                },
                {
                    pattern: /scan.*port|port.*scan|check.*port/i,
                    action: "scan_ports",
                    mode: "scan_target",
                },
                {
                    pattern: /analyze.*target|suggest.*attack|recommend.*attack|target.*analysis/i,
                    action: "analyze_target",
                    mode: "analyze_target",
                },
                {
                    pattern: /search.*repo|find.*repo|look.*for.*repo|search.*payload|find.*payload/i,
                    action: "search_repositories",
                    mode: "search_repositories",
                },
                {
                    pattern: /clone.*repo|add.*repo|download.*repo/i,
                    action: "clone_repository",
                    mode: "clone_repository",
                },
                {
                    pattern: /attack|deploy|launch|execute|run.*malware/i,
                    action: "deploy",
                    mode: "natural_language",
                },
                {
                    pattern: /help|commands|usage/i,
                    action: "help",
                    mode: "help",
                },
            ];
            // Find matching pattern
            let matchedPattern = null;
            for (const pattern of commandPatterns) {
                if (pattern.pattern.test(command)) {
                    matchedPattern = pattern;
                    break;
                }
            }
            if (!matchedPattern) {
                return {
                    content: [],
                    structuredContent: {
                        success: false,
                        message: "Could not understand the command. Try: 'list payloads', 'scan ports on [target]', or 'attack [target] with [payload]'",
                        available_commands: [
                            "list payloads",
                            "scan ports on [target]",
                            "attack [target] with [payload]",
                            "deploy [payload] to [target]",
                            "help",
                        ],
                    },
                };
            }
            // Parse command based on action
            let parsedCommand = {
                action: matchedPattern.action,
                mode: matchedPattern.mode,
            };
            switch (matchedPattern.action) {
                case "list_payloads":
                    return {
                        content: [],
                        structuredContent: {
                            success: true,
                            message: "Listing available payloads from malware repository",
                            parsed_command: parsedCommand,
                        },
                    };
                case "scan_ports":
                    // Extract target from command
                    const targetMatch = command.match(/(?:on|to|target)\s+([a-zA-Z0-9.-]+|\d+\.\d+\.\d+\.\d+)/i);
                    const target = targetMatch ? targetMatch[1] : null;
                    if (!target) {
                        return {
                            content: [],
                            structuredContent: {
                                success: false,
                                message: "Please specify a target for port scanning (e.g., 'scan ports on 192.168.1.100')",
                                parsed_command: parsedCommand,
                            },
                        };
                    }
                    parsedCommand.target = target;
                    return {
                        content: [],
                        structuredContent: {
                            success: true,
                            message: `Scanning ports on target: ${target}`,
                            parsed_command: parsedCommand,
                        },
                    };
                case "analyze_target":
                    // Extract target from command
                    const analyzeTargetMatch = command.match(/(?:target|analyze|suggest|recommend)\s+([a-zA-Z0-9.-]+|\d+\.\d+\.\d+\.\d+)/i);
                    const analyzeTarget = analyzeTargetMatch
                        ? analyzeTargetMatch[1]
                        : null;
                    if (!analyzeTarget) {
                        return {
                            content: [],
                            structuredContent: {
                                success: false,
                                message: "Please specify a target for analysis (e.g., 'analyze target 192.168.1.100')",
                                parsed_command: parsedCommand,
                            },
                        };
                    }
                    parsedCommand.target = analyzeTarget;
                    return {
                        content: [],
                        structuredContent: {
                            success: true,
                            message: `Analyzing target and suggesting attacks: ${analyzeTarget}`,
                            parsed_command: parsedCommand,
                        },
                    };
                case "search_repositories":
                    // Extract search terms from command
                    const searchTerms = command
                        .replace(/search|find|look for|repositories?|payloads?/gi, "")
                        .trim();
                    if (!searchTerms) {
                        return {
                            content: [],
                            structuredContent: {
                                success: false,
                                message: "Please specify search terms (e.g., 'search for windows exploits')",
                                parsed_command: parsedCommand,
                            },
                        };
                    }
                    parsedCommand.search_query = searchTerms;
                    return {
                        content: [],
                        structuredContent: {
                            success: true,
                            message: `Searching GitHub for repositories: ${searchTerms}`,
                            parsed_command: parsedCommand,
                        },
                    };
                case "clone_repository":
                    // Extract repository URL from command
                    const urlMatch = command.match(/https?:\/\/github\.com\/[^\s]+/i);
                    const repoUrl = urlMatch ? urlMatch[0] : null;
                    if (!repoUrl) {
                        return {
                            content: [],
                            structuredContent: {
                                success: false,
                                message: "Please specify a GitHub repository URL (e.g., 'clone repository https://github.com/user/repo')",
                                parsed_command: parsedCommand,
                            },
                        };
                    }
                    // Extract repository name from URL
                    const nameMatch = repoUrl.match(/github\.com\/([^\/]+\/[^\/]+)/);
                    const repoName = nameMatch
                        ? nameMatch[1].replace("/", "-")
                        : "unknown-repo";
                    parsedCommand.repository_url = repoUrl;
                    parsedCommand.repository_name = repoName;
                    return {
                        content: [],
                        structuredContent: {
                            success: true,
                            message: `Cloning repository: ${repoName}`,
                            parsed_command: parsedCommand,
                        },
                    };
                case "deploy":
                    // Extract target, payload, and port
                    const deployTargetMatch = command.match(/(?:to|on|target)\s+([a-zA-Z0-9.-]+|\d+\.\d+\.\d+\.\d+)/i);
                    const deployTarget = deployTargetMatch
                        ? deployTargetMatch[1]
                        : null;
                    const payloadMatch = command.match(/(?:with|using|deploy)\s+([a-zA-Z0-9_-]+)/i);
                    const payload = payloadMatch ? payloadMatch[1] : null;
                    const portMatch = command.match(/port\s+(\d+)|:(\d+)/i);
                    const port = portMatch
                        ? parseInt(portMatch[1] || portMatch[2])
                        : null;
                    if (!deployTarget || !payload) {
                        return {
                            content: [],
                            structuredContent: {
                                success: false,
                                message: "Please specify both target and payload (e.g., 'attack 192.168.1.100 with ransomware')",
                                parsed_command: parsedCommand,
                            },
                        };
                    }
                    parsedCommand.target = deployTarget;
                    parsedCommand.payload = payload;
                    if (port)
                        parsedCommand.port = port;
                    return {
                        content: [],
                        structuredContent: {
                            success: true,
                            message: `Deploying ${payload} to ${deployTarget}${port ? ` on port ${port}` : ""}`,
                            parsed_command: parsedCommand,
                        },
                    };
                case "help":
                    return {
                        content: [],
                        structuredContent: {
                            success: true,
                            message: "WAN Malware Deployer - Natural Language Commands",
                            available_commands: [
                                "list payloads - Show available malware payloads",
                                "scan ports on [target] - Scan target for open ports",
                                "analyze target [target] - Analyze target and suggest best attacks",
                                "suggest attacks for [target] - Get attack recommendations",
                                "search for [query] - Find additional payload repositories",
                                "clone repository [url] - Add new repository to library",
                                "attack [target] with [payload] - Deploy payload to target",
                                "deploy [payload] to [target] - Deploy payload to target",
                                "attack [target] with [payload] on port [number] - Deploy to specific port",
                                "help - Show this help message",
                            ],
                        },
                    };
                default:
                    return {
                        content: [],
                        structuredContent: {
                            success: false,
                            message: "Unknown command action",
                            parsed_command: parsedCommand,
                        },
                    };
            }
        }
        catch (error) {
            return {
                content: [],
                structuredContent: {
                    success: false,
                    message: `Natural language processing failed: ${error.message}`,
                },
            };
        }
    });
}

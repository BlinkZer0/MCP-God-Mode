#!/usr/bin/env node

import { readFileSync, writeFileSync } from 'fs';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

console.log('ðŸ”§ Fixing exploit framework return statements...\n');

// Read the exploit framework file
const filePath = join(__dirname, 'src', 'tools', 'security', 'exploit_framework.ts');
let content = readFileSync(filePath, 'utf8');

// Fix the helper function return statements
// These functions are declared to return { vulnerable: boolean; details: string }
// but they're trying to return content/structuredContent objects

// Fix the return statements in helper functions
content = content.replace(
  /return\s*\{\s*content:\s*\[\{([^}]+)\}\],\s*structuredContent:\s*\{([^}]+)\}\s*\};/g,
  'return {\n        $2\n      };'
);

// Fix the return statements that have malformed structuredContent
content = content.replace(
  /return\s*\{\s*content:\s*\[\{([^}]+)\}\],\s*structuredContent:\s*\{\s*([^}]+)\s*\}\s*\};/g,
  'return {\n        $2\n      };'
);

// Fix the return statements that have content property in wrong place
content = content.replace(
  /return\s*\{\s*content:\s*\[\{([^}]+)\}\],\s*structuredContent:\s*\{\s*([^}]+)\s*\}\s*\};/g,
  'return {\n        $2\n      };'
);

// Write the fixed file
writeFileSync(filePath, content, 'utf8');

console.log('âœ… Fixed exploit framework return statements!');
console.log('ðŸ”„ Please rebuild the modular server with: npm run build:modular');

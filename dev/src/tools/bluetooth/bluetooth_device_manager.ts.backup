import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import { PLATFORM } from "../../config/environment.js";

const BluetoothDeviceManagerSchema = z.object({
  action: z.enum(["list_devices", "connect", "disconnect", "pair", "unpair", "get_info", "scan", "monitor", "configure"]),
  device_address: z.string().optional(),
  device_name: z.string().optional(),
  timeout: z.number().default(30),
  scan_duration: z.number().default(10),
  output_format: z.enum(["json", "table", "summary"]).default("json"),
});

export function registerBluetoothDeviceManager(server: McpServer) {
  server.registerTool("bluetooth_device_manager", {
    description: "Advanced Bluetooth device management and configuration toolkit",
    inputSchema: BluetoothDeviceManagerSchema.shape,
  }, async ({ action, device_address, device_name, timeout, scan_duration, output_format }) => {
      try {
        switch (action) {
          case "list_devices":
            if (PLATFORM === "win32") {
              // Windows Bluetooth device listing
              const child = spawn("powershell", [
                "-Command",
                "Get-PnpDevice -Class Bluetooth | Select-Object FriendlyName, InstanceId, Status | ConvertTo-Json"
              ], {
                stdio: 'pipe',
              });
              
              let output = '';
              let error = '';
              
              child.stdout.on('data', (data) => {
                output += data.toString();
              });
              
              child.stderr.on('data', (data) => {
                error += data.toString();
              });
              
              return new Promise((resolve) => {
                child.on('close', (code) => {
                  if (code === 0) {
                    try {
                      const devices = JSON.parse(output);
                      resolve({
                        content: [{
                          type: "text",
                          text: JSON.stringify({
                            success: true,
                            message: `Found ${Array.isArray(devices) ? devices.length : 1} Bluetooth devices`,
                            platform: "windows",
                            devices: Array.isArray(devices) ? devices : [devices],
                            count: Array.isArray(devices) ? devices.length : 1,
                          }, null, 2)
                        }]
                      });
                    } catch (parseError) {
                      resolve({
                        content: [{
                          type: "text",
                          text: JSON.stringify({
                            success: true,
                            message: "Bluetooth devices listed successfully",
                            platform: "windows",
                            devices: [],
                            count: 0,
                            raw_output: output,
                          }, null, 2)
                        }]
                      });
                    }
                  } else {
                    resolve({
                      content: [{
                        type: "text",
                        text: JSON.stringify({
                          success: false,
                          error: `Failed to list Bluetooth devices: ${error}`,
                          platform: "windows",
                        }, null, 2)
                      }]
                    });
                  }
                });
              });
            } else if (PLATFORM === "linux") {
              // Linux Bluetooth device listing
              const child = spawn("bluetoothctl", ["devices"], {
                stdio: 'pipe',
              });
              
              let output = '';
              let error = '';
              
              child.stdout.on('data', (data) => {
                output += data.toString();
              });
              
              child.stderr.on('data', (data) => {
                error += data.toString();
              });
              
              return new Promise((resolve) => {
                child.on('close', (code) => {
                  if (code === 0) {
                    const devices = output.split('\n')
                      .filter(line => line.trim())
                      .map(line => {
                        const match = line.match(/Device\s+([A-F0-9:]+)\s+(.+)/);
                        if (match) {
                          return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        address: match[1],
                            name: match[2].trim(),
                            status: "Available",
      };
                        }
                        return null;
                      })
                      .filter(device => device !== null);
                    
                    resolve({
                      content: [{
                        type: "text",
                        text: JSON.stringify({
                          success: true,
                          message: `Found ${devices.length} Bluetooth devices`,
                          platform: "linux",
                          devices,
                          count: devices.length,
                        }, null, 2)
                      }]
                    });
                  } else {
                    resolve({
                      content: [{
                        type: "text",
                        text: JSON.stringify({
                          success: false,
                          error: `Failed to list Bluetooth devices: ${error}`,
                          platform: "linux",
                        }, null, 2)
                      }]
                    });
                  }
                });
              });
            } else {
              return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        success: false,
                error: "Bluetooth device listing not supported on this platform",
                platform: PLATFORM,
      };
            }
            
          case "connect":
            if (!device_address) {
              throw new Error("Device address is required for connect action");
            }
            
            if (PLATFORM === "linux") {
              const child = spawn("bluetoothctl", ["connect", device_address], {
                stdio: 'pipe',
              });
              
              let output = '';
              let error = '';
              
              child.stdout.on('data', (data) => {
                output += data.toString();
              });
              
              child.stderr.on('data', (data) => {
                error += data.toString();
              });
              
              return new Promise((resolve) => {
                child.on('close', (code) => {
                  if (code === 0 && output.includes("successful")) {
                    resolve({
                      success: true,
                      message: `Successfully connected to Bluetooth device ${device_address}`,
                      platform: "linux",
                      device_address,
                      connection_status: "Connected",
                    });
                  } else {
                    resolve({
                      success: false,
                      error: `Failed to connect to device ${device_address}: ${error || output}`,
                      platform: "linux",
                      device_address,
                    });
                  }
                });
              });
            } else {
              return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        success: false,
                error: "Bluetooth connection not supported on this platform",
                platform: PLATFORM,
                device_address,
      };
            }
            
          case "disconnect":
            if (!device_address) {
              throw new Error("Device address is required for disconnect action");
            }
            
            if (PLATFORM === "linux") {
              const child = spawn("bluetoothctl", ["disconnect", device_address], {
                stdio: 'pipe',
              });
              
              let output = '';
              let error = '';
              
              child.stdout.on('data', (data) => {
                output += data.toString();
              });
              
              child.stderr.on('data', (data) => {
                error += data.toString();
              });
              
              return new Promise((resolve) => {
                child.on('close', (code) => {
                  if (code === 0) {
                    resolve({
                      success: true,
                      message: `Successfully disconnected from Bluetooth device ${device_address}`,
                      platform: "linux",
                      device_address,
                      connection_status: "Disconnected",
                    });
                  } else {
                    resolve({
                      success: false,
                      error: `Failed to disconnect from device ${device_address}: ${error || output}`,
                      platform: "linux",
                      device_address,
                    });
                  }
                });
              });
            } else {
              return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        success: false,
                error: "Bluetooth disconnection not supported on this platform",
                platform: PLATFORM,
                device_address,
      };
            }
            
          case "pair":
            if (!device_address) {
              throw new Error("Device address is required for pair action");
            }
            
            if (PLATFORM === "linux") {
              const child = spawn("bluetoothctl", ["pair", device_address], {
                stdio: 'pipe',
              });
              
              let output = '';
              let error = '';
              
              child.stdout.on('data', (data) => {
                output += data.toString();
              });
              
              child.stderr.on('data', (data) => {
                error += data.toString();
              });
              
              return new Promise((resolve) => {
                child.on('close', (code) => {
                  if (code === 0 && output.includes("successful")) {
                    resolve({
                      success: true,
                      message: `Successfully paired with Bluetooth device ${device_address}`,
                      platform: "linux",
                      device_address,
                      pairing_status: "Paired",
                    });
                  } else {
                    resolve({
                      success: false,
                      error: `Failed to pair with device ${device_address}: ${error || output}`,
                      platform: "linux",
                      device_address,
                    });
                  }
                });
              });
            } else {
              return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        success: false,
                error: "Bluetooth pairing not supported on this platform",
                platform: PLATFORM,
                device_address,
      };
            }
            
          case "unpair":
            if (!device_address) {
              throw new Error("Device address is required for unpair action");
            }
            
            if (PLATFORM === "linux") {
              const child = spawn("bluetoothctl", ["remove", device_address], {
                stdio: 'pipe',
              });
              
              let output = '';
              let error = '';
              
              child.stdout.on('data', (data) => {
                output += data.toString();
              });
              
              child.stderr.on('data', (data) => {
                error += data.toString();
              });
              
              return new Promise((resolve) => {
                child.on('close', (code) => {
                  if (code === 0) {
                    resolve({
                      success: true,
                      message: `Successfully unpaired from Bluetooth device ${device_address}`,
                      platform: "linux",
                      device_address,
                      pairing_status: "Unpaired",
                    });
                  } else {
                    resolve({
                      success: false,
                      error: `Failed to unpair from device ${device_address}: ${error || output}`,
                      platform: "linux",
                      device_address,
                    });
                  }
                });
              });
            } else {
              return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        success: false,
                error: "Bluetooth unpairing not supported on this platform",
                platform: PLATFORM,
                device_address,
      };
            }
            
          case "get_info":
            if (!device_address) {
              throw new Error("Device address is required for get_info action");
            }
            
            if (PLATFORM === "linux") {
              const child = spawn("bluetoothctl", ["info", device_address], {
                stdio: 'pipe',
              });
              
              let output = '';
              let error = '';
              
              child.stdout.on('data', (data) => {
                output += data.toString();
              });
              
              child.stderr.on('data', (data) => {
                error += data.toString();
              });
              
              return new Promise((resolve) => {
                child.on('close', (code) => {
                  if (code === 0) {
                    // Parse device info from bluetoothctl output
                    const info: any = {};
                    const lines = output.split('\n');
                    
                    lines.forEach(line => {
                      if (line.includes(':')) {
                        const [key, value] = line.split(':', 2);
                        info[key.trim()] = value.trim();
                      }
                    });
                    
                    resolve({
                      success: true,
                      message: `Retrieved information for Bluetooth device ${device_address}`,
                      platform: "linux",
                      device_address,
                      device_info: info,
                    });
                  } else {
                    resolve({
                      success: false,
                      error: `Failed to get device info: ${error || output}`,
                      platform: "linux",
                      device_address,
                    });
                  }
                });
              });
            } else {
              return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        success: false,
                error: "Bluetooth device info not supported on this platform",
                platform: PLATFORM,
                device_address,
      };
            }
            
          case "scan":
            if (PLATFORM === "linux") {
              const child = spawn("bluetoothctl", ["scan", "on"], {
                stdio: 'pipe',
              });
              
              // Stop scanning after specified duration
              setTimeout(() => {
                child.kill();
              }, scan_duration * 1000);
              
              let output = '';
              let error = '';
              
              child.stdout.on('data', (data) => {
                output += data.toString();
              });
              
              child.stderr.on('data', (data) => {
                error += data.toString();
              });
              
              return new Promise((resolve) => {
                child.on('close', (code) => {
                  const devices = output.split('\n')
                    .filter(line => line.includes('Device'))
                    .map(line => {
                      const match = line.match(/Device\s+([A-F0-9:]+)\s+(.+)/);
                      if (match) {
                        return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        address: match[1],
                          name: match[2].trim(),
                          discovered: new Date().toISOString(),
      };
                      }
                      return null;
                    })
                    .filter(device => device !== null);
                  
                  resolve({
                    success: true,
                    message: `Bluetooth scan completed, found ${devices.length} devices`,
                    platform: "linux",
                    scan_duration,
                    devices,
                    count: devices.length,
                  });
                });
              });
            } else {
              return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        success: false,
                error: "Bluetooth scanning not supported on this platform",
                platform: PLATFORM,
      };
            }
            
          case "monitor":
            return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        success: false,
              error: "Bluetooth monitoring requires continuous background process",
              platform: PLATFORM,
              recommendation: "Use scan action for device discovery",
      };
            
          case "configure":
            if (!device_address) {
              throw new Error("Device address is required for configure action");
            }
            
            return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        success: false,
              error: "Bluetooth device configuration requires platform-specific implementation",
              platform: PLATFORM,
              device_address,
              recommendation: "Use platform-specific Bluetooth tools for configuration",
      };
            
          default:
            throw new Error(`Unknown action: ${action}`);
        }
      } catch (error) {
        return {
        content: [{ type: "text", text: "Operation completed successfully" }],
        success: false,
          error: error instanceof Error ? (error as Error).message : "Unknown error",
      };
      }
    });
}

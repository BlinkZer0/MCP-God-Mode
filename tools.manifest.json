{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "MCP God Mode Tools Manifest",
  "type": "object",
  "tools": [
    {
      "name": "enhanced_legal_compliance",
      "category": "legal",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_legal_compliance",
      "args": [
        {
          "name": "action",
          "type": "enum[advanced_audit,chain_verification,regulatory_report,compliance_dashboard,evidence_analysis]",
          "required": true,
          "description": "Enhanced legal compliance action"
        },
        {
          "name": "scope",
          "type": "string",
          "required": false,
          "description": "Scope of the compliance check"
        },
        {
          "name": "timeframe",
          "type": "string",
          "required": false,
          "description": "Time period for the compliance check"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Logs compliance actions and may generate reports",
      "safe_mode": true,
      "tags": [
        "legal",
        "compliance",
        "audit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_legal_compliance')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "advanced_security_assessment",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "advanced_security_assessment",
      "args": [
        {
          "name": "assessment_type",
          "type": "enum[threat_modeling,risk_analysis,compliance_validation,security_posture,vulnerability_prioritization]",
          "required": true,
          "description": "Type of security assessment"
        },
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target system or component to assess"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "May perform security scans and generate reports",
      "safe_mode": false,
      "tags": [
        "security",
        "assessment",
        "analysis"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for advanced_security_assessment')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "cross_platform_system_manager",
      "category": "system",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cross_platform_system_manager",
      "args": [
        {
          "name": "operation",
          "type": "enum[system_sync,cross_platform_deploy,unified_monitoring,platform_optimization,integration_testing]",
          "required": true,
          "description": "Cross-platform operation"
        },
        {
          "name": "target_platforms",
          "type": "array[string]",
          "required": false,
          "description": "Target platforms for operation"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "May modify system configurations and deploy services",
      "safe_mode": false,
      "tags": [
        "system",
        "management",
        "deployment"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cross_platform_system_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "enterprise_integration_hub",
      "category": "integration",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enterprise_integration_hub",
      "args": [
        {
          "name": "integration_type",
          "type": "enum[api_management,workflow_automation,enterprise_security,data_integration,system_orchestration]",
          "required": true,
          "description": "Type of enterprise integration"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "May configure enterprise systems and integrations",
      "safe_mode": false,
      "tags": [
        "enterprise",
        "integration",
        "api"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enterprise_integration_hub')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "advanced_analytics_engine",
      "category": "analytics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "advanced_analytics_engine",
      "args": [
        {
          "name": "analysis_type",
          "type": "enum[predictive_analytics,real_time_insights,machine_learning,behavioral_analysis,trend_analysis]",
          "required": true,
          "description": "Type of advanced analysis"
        },
        {
          "name": "data_source",
          "type": "string",
          "required": true,
          "description": "Data source for analysis"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Processes and analyzes data",
      "safe_mode": true,
      "tags": [
        "analytics",
        "ai",
        "data"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for advanced_analytics_engine')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "web_ui_chat",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "web_ui_chat",
      "args": [
        {
          "name": "provider",
          "type": "string",
          "required": true,
          "description": "Provider ID (e.g., 'chatgpt', 'grok', 'claude', 'huggingface', or custom provider)"
        },
        {
          "name": "prompt",
          "type": "string",
          "required": true,
          "description": "The message to send to the AI service"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Sends requests to external AI services",
      "safe_mode": true,
      "tags": [
        "ai",
        "chat",
        "automation"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for web_ui_chat')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "providers_list",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "providers_list",
      "args": [
        {
          "name": "platform",
          "type": "enum[desktop,android,ios]",
          "required": false,
          "description": "Filter providers by platform"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "None",
      "safe_mode": true,
      "tags": [
        "ai",
        "providers",
        "list"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for providers_list')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "provider_wizard",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "provider_wizard",
      "args": [
        {
          "name": "startUrl",
          "type": "string",
          "required": true,
          "description": "URL of the AI service chat interface"
        },
        {
          "name": "providerName",
          "type": "string",
          "required": true,
          "description": "Name for the new provider"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "May create new provider configurations",
      "safe_mode": true,
      "tags": [
        "ai",
        "configuration",
        "wizard"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for provider_wizard')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "macro_record",
      "category": "automation",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "macro_record",
      "args": [
        {
          "name": "target",
          "type": "object",
          "required": true,
          "description": "Target specification for recording"
        },
        {
          "name": "outputFile",
          "type": "string",
          "required": false,
          "description": "Output file for the recorded macro"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Records user interactions",
      "safe_mode": true,
      "tags": [
        "automation",
        "recording",
        "macro"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for macro_record')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "macro_run",
      "category": "automation",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "macro_run",
      "args": [
        {
          "name": "macroId",
          "type": "string",
          "required": true,
          "description": "ID of the macro to execute"
        },
        {
          "name": "variables",
          "type": "object",
          "required": false,
          "description": "Variables to substitute in the macro"
        },
        {
          "name": "dryRun",
          "type": "boolean",
          "required": false,
          "description": "If true, simulate execution without making changes"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Executes recorded interactions",
      "safe_mode": true,
      "tags": [
        "automation",
        "playback",
        "macro"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for macro_run')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "session_management",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "session_management",
      "args": [
        {
          "name": "action",
          "type": "enum[list,clear,cleanup]",
          "required": true,
          "description": "Session management action"
        },
        {
          "name": "sessionId",
          "type": "string",
          "required": false,
          "description": "ID of the session to manage"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Manages user sessions, may terminate active sessions",
      "safe_mode": false,
      "tags": [
        "security",
        "session",
        "management"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for session_management')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "advanced_threat_hunting",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "advanced_threat_hunting",
      "args": [
        {
          "name": "action",
          "type": "enum[hunt_threats,analyze_behavior,track_iocs,correlate_events]",
          "required": true,
          "description": "Threat hunting action"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system or network to hunt in"
        },
        {
          "name": "timeframe",
          "type": "string",
          "required": false,
          "description": "Time period to analyze"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Performs security scans and analysis",
      "safe_mode": false,
      "tags": [
        "security",
        "threat",
        "hunting"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for advanced_threat_hunting')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "cyber_deception_platform",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cyber_deception_platform",
      "args": [
        {
          "name": "action",
          "type": "enum[deploy_honeypot,create_decoy,analyze_attacks,manage_deception]",
          "required": true,
          "description": "Deception action"
        },
        {
          "name": "deception_type",
          "type": "string",
          "required": false,
          "description": "Type of deception to deploy"
        },
        {
          "name": "monitoring_level",
          "type": "string",
          "required": false,
          "description": "Level of monitoring to enable"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Deploys deception mechanisms and monitors for interactions",
      "safe_mode": false,
      "tags": [
        "security",
        "deception",
        "honeypot"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cyber_deception_platform')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "zero_trust_architect",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "zero_trust_architect",
      "args": [
        {
          "name": "action",
          "type": "enum[assess_readiness,implement_policies,continuous_verification,micro_segment]",
          "required": true,
          "description": "Zero trust action"
        },
        {
          "name": "scope",
          "type": "string",
          "required": false,
          "description": "Scope of the zero trust implementation"
        },
        {
          "name": "trust_level",
          "type": "string",
          "required": false,
          "description": "Trust level to enforce"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Modifies security policies and configurations",
      "safe_mode": false,
      "tags": [
        "security",
        "zero-trust",
        "architecture"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for zero_trust_architect')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "quantum_cryptography_suite",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "quantum_cryptography_suite",
      "args": [
        {
          "name": "action",
          "type": "enum[generate_quantum_keys,post_quantum_encrypt,quantum_audit,future_proof]",
          "required": true,
          "description": "Quantum crypto action"
        },
        {
          "name": "algorithm",
          "type": "string",
          "required": false,
          "description": "Cryptographic algorithm to use"
        },
        {
          "name": "security_level",
          "type": "string",
          "required": false,
          "description": "Desired security level"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Performs cryptographic operations",
      "safe_mode": true,
      "tags": [
        "security",
        "cryptography",
        "quantum"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for quantum_cryptography_suite')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "ai_security_orchestrator",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ai_security_orchestrator",
      "args": [
        {
          "name": "action",
          "type": "enum[ml_threat_detection,automated_response,intelligent_analysis,ai_correlation]",
          "required": true,
          "description": "AI security action"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system or data to analyze"
        },
        {
          "name": "sensitivity",
          "type": "string",
          "required": false,
          "description": "Sensitivity level for detection"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "May take automated security actions based on analysis",
      "safe_mode": false,
      "tags": [
        "security",
        "ai",
        "orchestration"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ai_security_orchestrator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "blockchain_forensics",
      "category": "forensics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "blockchain_forensics",
      "args": [
        {
          "name": "action",
          "type": "enum[analyze_transaction,trace_wallet,investigate_token,cluster_addresses]",
          "required": true,
          "description": "Blockchain forensics action"
        },
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Transaction hash, wallet address, or token to analyze"
        },
        {
          "name": "depth",
          "type": "number",
          "required": false,
          "description": "Analysis depth (number of hops)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Queries blockchain data, no on-chain changes",
      "safe_mode": true,
      "tags": [
        "blockchain",
        "forensics",
        "crypto"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for blockchain_forensics')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "drone_unified",
      "category": "hardware",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "drone_unified",
      "args": [
        {
          "name": "action",
          "type": "enum[status,takeoff,land,move,hover,rotate,set_altitude,get_telemetry,start_mission,stop_mission,return_home,calibrate,arm,disarm]",
          "required": true,
          "description": "Drone operation to perform"
        },
        {
          "name": "direction",
          "type": "enum[forward,backward,left,right,up,down]",
          "required": false,
          "description": "Movement direction"
        },
        {
          "name": "distance",
          "type": "number",
          "required": false,
          "description": "Distance to move in meters"
        },
        {
          "name": "altitude",
          "type": "number",
          "required": false,
          "description": "Target altitude in meters"
        },
        {
          "name": "speed",
          "type": "number",
          "required": false,
          "description": "Movement speed (0-100%)"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Operation duration in seconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Unified Drone Management Tool",
      "safe_mode": true,
      "tags": [
        "hardware",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for drone_unified')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "rf_sense",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense",
      "args": [
        {
          "name": "action",
          "type": "enum[scan,detect,analyze,monitor,calibrate,configure]",
          "required": true,
          "description": "RF sensing action to perform"
        },
        {
          "name": "frequency_range",
          "type": "string",
          "required": false,
          "description": "Frequency range to scan (e.g., '2.4-2.5GHz')"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Scan duration in seconds"
        },
        {
          "name": "sensitivity",
          "type": "number",
          "required": false,
          "description": "Detection sensitivity (1-10)"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Unified RF Sense Tool (experimental)",
      "safe_mode": false,
      "tags": [
        "radio",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "rf_sense_guardrails",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_guardrails",
      "args": [
        {
          "name": "action",
          "type": "enum[check_compliance,set_limits,validate_operation,get_restrictions]",
          "required": true,
          "description": "Guardrail action to perform"
        },
        {
          "name": "frequency",
          "type": "number",
          "required": false,
          "description": "Frequency to check in Hz"
        },
        {
          "name": "power_level",
          "type": "number",
          "required": false,
          "description": "Power level to validate"
        },
        {
          "name": "region",
          "type": "string",
          "required": false,
          "description": "Regulatory region (e.g., 'US', 'EU', 'JP')"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "RF Sense guardrails",
      "safe_mode": true,
      "tags": [
        "radio",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_guardrails')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "rf_sense_localize",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_localize",
      "args": [
        {
          "name": "action",
          "type": "enum[triangulate,locate_source,map_signals,calibrate_position]",
          "required": true,
          "description": "Localization action to perform"
        },
        {
          "name": "target_frequency",
          "type": "number",
          "required": false,
          "description": "Target signal frequency"
        },
        {
          "name": "reference_points",
          "type": "array[object]",
          "required": false,
          "description": "Reference measurement points"
        },
        {
          "name": "accuracy_threshold",
          "type": "number",
          "required": false,
          "description": "Required accuracy in meters"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "RF Sense localization module",
      "safe_mode": true,
      "tags": [
        "radio",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_localize')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "rf_sense_mmwave",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_mmwave",
      "args": [
        {
          "name": "action",
          "type": "enum[scan_mmwave,detect_objects,measure_distance,analyze_doppler]",
          "required": true,
          "description": "mmWave radar action"
        },
        {
          "name": "frequency_band",
          "type": "enum[24GHz,60GHz,77GHz,79GHz]",
          "required": false,
          "description": "mmWave frequency band"
        },
        {
          "name": "range_max",
          "type": "number",
          "required": false,
          "description": "Maximum detection range in meters"
        },
        {
          "name": "resolution",
          "type": "enum[low,medium,high]",
          "required": false,
          "description": "Detection resolution"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "RF Sense mmWave module",
      "safe_mode": false,
      "tags": [
        "radio",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_mmwave')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "rf_sense_natural_language",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_natural_language",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for RF operations"
        },
        {
          "name": "context",
          "type": "string",
          "required": false,
          "description": "Additional context for the command"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Natural language interface for RF Sense",
      "safe_mode": true,
      "tags": [
        "radio",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_natural_language')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "rf_sense_sim",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_sim",
      "args": [
        {
          "name": "action",
          "type": "enum[create_scenario,run_simulation,analyze_results,export_data]",
          "required": true,
          "description": "Simulation action to perform"
        },
        {
          "name": "scenario_type",
          "type": "enum[indoor,outdoor,urban,rural]",
          "required": false,
          "description": "Environment scenario"
        },
        {
          "name": "num_objects",
          "type": "number",
          "required": false,
          "description": "Number of objects to simulate"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Simulation duration in seconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "RF Sense simulation module",
      "safe_mode": true,
      "tags": [
        "radio",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_sim')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "rf_sense_wifi_lab",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_wifi_lab",
      "args": [
        {
          "name": "action",
          "type": "enum[capture_csi,analyze_channel,measure_rssi,detect_motion]",
          "required": true,
          "description": "WiFi CSI lab action"
        },
        {
          "name": "channel",
          "type": "number",
          "required": false,
          "description": "WiFi channel to analyze"
        },
        {
          "name": "interface",
          "type": "string",
          "required": false,
          "description": "WiFi interface to use"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "RF Sense WiFi CSI lab module",
      "safe_mode": false,
      "tags": [
        "wireless",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_wifi_lab')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "legal_compliance_manager",
      "category": "legal",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "legal_compliance_manager",
      "args": [
        {
          "name": "caseName",
          "type": "string",
          "required": false,
          "description": "Legal case name"
        },
        {
          "name": "caseDescription",
          "type": "string",
          "required": false,
          "description": "Legal case description"
        },
        {
          "name": "createdBy",
          "type": "string",
          "required": false,
          "description": "User creating the legal hold"
        },
        {
          "name": "custodian",
          "type": "string",
          "required": false,
          "description": "Data custodian"
        },
        {
          "name": "legalBasis",
          "type": "string",
          "required": false,
          "description": "Legal basis for the hold"
        },
        {
          "name": "caseId",
          "type": "string",
          "required": false,
          "description": "External case ID"
        },
        {
          "name": "sourcePath",
          "type": "string",
          "required": false,
          "description": "Source path for evidence preservation"
        },
        {
          "name": "enableAuditLogging",
          "type": "boolean",
          "required": false,
          "description": "Enable audit logging"
        },
        {
          "name": "enableEvidencePreservation",
          "type": "boolean",
          "required": false,
          "description": "Enable evidence preservation"
        },
        {
          "name": "enableLegalHold",
          "type": "boolean",
          "required": false,
          "description": "Enable legal hold capabilities"
        },
        {
          "name": "enableChainOfCustody",
          "type": "boolean",
          "required": false,
          "description": "Enable chain of custody tracking"
        },
        {
          "name": "enableDataIntegrity",
          "type": "boolean",
          "required": false,
          "description": "Enable data integrity verification"
        },
        {
          "name": "affectedData",
          "type": "array[string]",
          "required": false,
          "description": "List of affected data paths"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'legal_compliance_manager' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "legal",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for legal_compliance_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "security_testing",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "security_testing",
      "args": [
        {
          "name": "domain",
          "type": "enum[web,network,application,mobile,cloud]",
          "required": false,
          "description": "Security domain to test"
        },
        {
          "name": "test_type",
          "type": "enum[automated,manual,hybrid]",
          "required": false,
          "description": "Type of security test"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system or application"
        },
        {
          "name": "scope",
          "type": "string",
          "required": false,
          "description": "Test scope and limitations"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'security_testing' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for security_testing')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "compliance_assessment",
      "category": "legal",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "compliance_assessment",
      "args": [
        {
          "name": "action",
          "type": "enum[assess,audit,report,remediate,monitor]",
          "required": false,
          "description": "Compliance action"
        },
        {
          "name": "framework",
          "type": "enum[iso27001,nist,pci_dss,sox,gdpr,hipaa]",
          "required": false,
          "description": "Compliance framework"
        },
        {
          "name": "scope",
          "type": "string",
          "required": false,
          "description": "Assessment scope"
        },
        {
          "name": "evidence_path",
          "type": "string",
          "required": false,
          "description": "Path to evidence files"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'compliance_assessment' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "legal",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for compliance_assessment')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "siem_toolkit",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "siem_toolkit",
      "args": [
        {
          "name": "time_range",
          "type": "string",
          "required": false,
          "description": "Time range for analysis (e.g., '24h', '7d', '30d"
        },
        {
          "name": "log_sources",
          "type": "array[string]",
          "required": false,
          "description": "Log sources to analyze (firewall, IDS, servers, etc.)"
        },
        {
          "name": "threat_indicators",
          "type": "array[string]",
          "required": false,
          "description": "Specific threat indicators to search for"
        },
        {
          "name": "correlation_rules",
          "type": "array[string]",
          "required": false,
          "description": "Custom correlation rules to apply"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'siem_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for siem_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "threat_intelligence",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "threat_intelligence",
      "args": [
        {
          "name": "action",
          "type": "enum[gather,analyze,correlate,alert,report]",
          "required": false,
          "description": "Threat intelligence action"
        },
        {
          "name": "threat_type",
          "type": "enum[malware,apt,ransomware,phishing,vulnerability]",
          "required": false,
          "description": "Type of threat to analyze"
        },
        {
          "name": "time_range",
          "type": "string",
          "required": false,
          "description": "Time range for analysis (e.g., '24h', '7d', '30d"
        },
        {
          "name": "indicators",
          "type": "array[string]",
          "required": false,
          "description": "Threat indicators (IPs, domains, hashes)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'threat_intelligence' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for threat_intelligence')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "supply_chain_security",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "supply_chain_security",
      "args": [
        {
          "name": "action",
          "type": "enum[scan_dependencies,analyze_vulnerabilities,check_licenses,audit_supply_chain]",
          "required": true,
          "description": "Supply chain security action"
        },
        {
          "name": "project_path",
          "type": "string",
          "required": false,
          "description": "Path to project to analyze"
        },
        {
          "name": "package_manager",
          "type": "enum[npm,pip,maven,gradle,composer]",
          "required": false,
          "description": "Package manager type"
        },
        {
          "name": "output_format",
          "type": "enum[json,csv,html,pdf]",
          "required": false,
          "description": "Output format"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'supply_chain_security' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for supply_chain_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "privacy_engineering",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "privacy_engineering",
      "args": [
        {
          "name": "action",
          "type": "enum[privacy_audit,data_mapping,consent_analysis,gdpr_compliance]",
          "required": true,
          "description": "Privacy engineering action"
        },
        {
          "name": "data_source",
          "type": "string",
          "required": false,
          "description": "Data source to analyze"
        },
        {
          "name": "regulation",
          "type": "enum[GDPR,CCPA,PIPEDA,LGPD]",
          "required": false,
          "description": "Privacy regulation to check against"
        },
        {
          "name": "scope",
          "type": "string",
          "required": false,
          "description": "Scope of privacy analysis"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'privacy_engineering' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for privacy_engineering')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "incident_commander",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "incident_commander",
      "args": [
        {
          "name": "action",
          "type": "enum[create_incident,update_status,assign_responder,escalate,close_incident,generate_report]",
          "required": true,
          "description": "Incident management action"
        },
        {
          "name": "incident_id",
          "type": "string",
          "required": false,
          "description": "Incident identifier"
        },
        {
          "name": "severity",
          "type": "enum[low,medium,high,critical]",
          "required": false,
          "description": "Incident severity"
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "Incident description"
        },
        {
          "name": "responder",
          "type": "string",
          "required": false,
          "description": "Assigned responder"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'incident_commander' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for incident_commander')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "security_metrics_dashboard",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "security_metrics_dashboard",
      "args": [
        {
          "name": "action",
          "type": "enum[get_metrics,generate_dashboard,export_data,configure_alerts]",
          "required": true,
          "description": "Security metrics action"
        },
        {
          "name": "metric_type",
          "type": "enum[vulnerabilities,incidents,compliance,risk_score]",
          "required": false,
          "description": "Type of metrics to retrieve"
        },
        {
          "name": "time_range",
          "type": "string",
          "required": false,
          "description": "Time range for metrics (e.g., '7d', '30d')"
        },
        {
          "name": "format",
          "type": "enum[json,csv,dashboard,chart]",
          "required": false,
          "description": "Output format"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'security_metrics_dashboard' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for security_metrics_dashboard')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "forensics_analysis",
      "category": "forensics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "forensics_analysis",
      "args": [
        {
          "name": "action",
          "type": "enum[acquire,analyze,recover,timeline,report]",
          "required": false,
          "description": "Forensics action to perform"
        },
        {
          "name": "evidence_type",
          "type": "enum[disk_image,memory_dump,network_capture,log_files,mobile_device]",
          "required": false,
          "description": "Type of evidence to analyze"
        },
        {
          "name": "source_path",
          "type": "string",
          "required": false,
          "description": "Path to evidence source"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'forensics_analysis' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "forensics",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for forensics_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "forensics_toolkit",
      "category": "forensics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "forensics_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum[image_analysis,memory_analysis,file_carving,timeline_analysis,artifact_extraction]",
          "required": false,
          "description": "Forensics action to perform"
        },
        {
          "name": "evidence_source",
          "type": "string",
          "required": false,
          "description": "Source of evidence to analyze"
        },
        {
          "name": "preserve_evidence",
          "type": "boolean",
          "required": false,
          "description": "Preserve original evidence integrity"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'forensics_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "forensics",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for forensics_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "malware_analysis_toolkit",
      "category": "forensics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "malware_analysis_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum[static_analysis,dynamic_analysis,behavior_analysis,network_analysis,reporting]",
          "required": false,
          "description": "Malware analysis action to perform"
        },
        {
          "name": "sample_path",
          "type": "string",
          "required": false,
          "description": "Path to malware sample for analysis"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'malware_analysis_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "forensics",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for malware_analysis_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "osint_reconnaissance",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "osint_reconnaissance",
      "args": [
        {
          "name": "recon_type",
          "type": "enum[whois,dns,shodan,censys,metadata,social_media,all]",
          "required": false,
          "description": "Type of reconnaissance to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target IP address, domain, or hostname"
        },
        {
          "name": "include_historical",
          "type": "boolean",
          "required": false,
          "description": "Include historical data"
        },
        {
          "name": "include_subdomains",
          "type": "boolean",
          "required": false,
          "description": "Include subdomain enumeration"
        },
        {
          "name": "include_ports",
          "type": "boolean",
          "required": false,
          "description": "Include port scanning"
        },
        {
          "name": "include_services",
          "type": "boolean",
          "required": false,
          "description": "Include service detection"
        },
        {
          "name": "search_engines",
          "type": "array[string]",
          "required": false,
          "description": "Additional search engines to query"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'osint_reconnaissance' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for osint_reconnaissance')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "crime_reporter_unified",
      "category": "legal",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "crime_reporter_unified",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Crime reporter command"
        },
        {
          "name": "mode",
          "type": "enum[command,natural_language,test]",
          "required": false,
          "description": "Operation mode"
        },
        {
          "name": "naturalLanguageCommand",
          "type": "string",
          "required": false,
          "description": "Natural language command for crime reporting"
        },
        {
          "name": "parameters",
          "type": "object",
          "required": false,
          "description": "Command parameters"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Unified crime reporting",
      "safe_mode": true,
      "tags": [
        "legal",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for crime_reporter_unified')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "zero_day_exploiter_unified",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "zero_day_exploiter_unified",
      "args": [
        {
          "name": "action",
          "type": "enum[scan,exploit,analyze,report]",
          "required": true,
          "description": "Zero-day exploitation action"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system or application"
        },
        {
          "name": "exploit_type",
          "type": "enum[buffer_overflow,sql_injection,xss,rce,privilege_escalation]",
          "required": false,
          "description": "Type of exploit to attempt"
        },
        {
          "name": "payload",
          "type": "string",
          "required": false,
          "description": "Custom payload"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Run in safe mode (simulation only)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Unified zero-day exploiter",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for zero_day_exploiter_unified')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "api_security_testing",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "api_security_testing",
      "args": [
        {
          "name": "target_url",
          "type": "string",
          "required": false,
          "description": "Target API endpoint URL to test"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'api_security_testing' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for api_security_testing')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "cloud_security_assessment",
      "category": "cloud",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cloud_security_assessment",
      "args": [
        {
          "name": "cloud_provider",
          "type": "enum[aws,azure,gcp,multicloud,custom]",
          "required": false,
          "description": "Cloud provider to assess"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'cloud_security_assessment' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "cloud",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cloud_security_assessment')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "cloud_security_toolkit",
      "category": "cloud",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cloud_security_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum[security_scan,compliance_check,misconfiguration_audit,access_review,threat_modeling]",
          "required": false,
          "description": "Cloud security action to perform"
        },
        {
          "name": "cloud_provider",
          "type": "enum[aws,azure,gcp,multicloud]",
          "required": false,
          "description": "Cloud provider to assess"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'cloud_security_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "cloud",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cloud_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "database_security_toolkit",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "database_security_toolkit",
      "args": [
        {
          "name": "database_type",
          "type": "enum[mysql,postgresql,mssql,oracle,mongodb,redis,elasticsearch,auto]",
          "required": false,
          "description": "Type of database to test"
        },
        {
          "name": "connection_string",
          "type": "string",
          "required": false,
          "description": "Database connection string (for authorized testing only)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'database_security_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for database_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "email_security_suite",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "email_security_suite",
      "args": [
        {
          "name": "target_domain",
          "type": "string",
          "required": false,
          "description": "Target domain for email security testing"
        },
        {
          "name": "email_address",
          "type": "string",
          "required": false,
          "description": "Email address to test"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'email_security_suite' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for email_security_suite')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "ai_adversarial_prompt",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ai_adversarial_prompt",
      "args": [
        {
          "name": "mode",
          "type": "enum[jailbreaking,poisoning,hallucinations]",
          "required": false,
          "description": "Adversarial prompting mode: jailbreaking (bypass restrictions), poisoning (inject biased data), hallucinations (induce creative outputs)"
        },
        {
          "name": "api_key",
          "type": "string",
          "required": false,
          "description": "OpenAI API key (if not set in environment)"
        },
        {
          "name": "mcp_ai_endpoint",
          "type": "string",
          "required": false,
          "description": "MCP AI endpoint for self-targeting (defaults to http://localhost:3000/api/mcp-ai)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'ai_adversarial_prompt' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ai_adversarial_prompt')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "ai_adversarial_nlp",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ai_adversarial_nlp",
      "args": [
        {
          "name": "action",
          "type": "enum[generate_adversarial,test_robustness,analyze_vulnerabilities,defend_model]",
          "required": true,
          "description": "Adversarial NLP action"
        },
        {
          "name": "model_type",
          "type": "string",
          "required": false,
          "description": "Target model type"
        },
        {
          "name": "input_text",
          "type": "string",
          "required": false,
          "description": "Input text for adversarial testing"
        },
        {
          "name": "attack_method",
          "type": "enum[textfooler,bert_attack,deepwordbug,hotflip]",
          "required": false,
          "description": "Adversarial attack method"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'ai_adversarial_nlp' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ai_adversarial_nlp')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "ai_adversarial_platform_info",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ai_adversarial_platform_info",
      "args": [
        {
          "name": "action",
          "type": "enum[get_info,list_methods,test_defenses,generate_report]",
          "required": true,
          "description": "Platform information action"
        },
        {
          "name": "platform",
          "type": "string",
          "required": false,
          "description": "Target AI platform"
        },
        {
          "name": "info_type",
          "type": "enum[capabilities,vulnerabilities,defenses,metrics]",
          "required": false,
          "description": "Type of information to retrieve"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'ai_adversarial_platform_info' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ai_adversarial_platform_info')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "win_processes",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "win_processes",
      "args": [
        {
          "name": "action",
          "type": "enum[list,kill,suspend,resume,info,tree]",
          "required": false,
          "description": "Process management action to perform"
        },
        {
          "name": "process_name",
          "type": "string",
          "required": false,
          "description": "Process name for operations"
        },
        {
          "name": "process_id",
          "type": "number",
          "required": false,
          "description": "Process ID for operations"
        },
        {
          "name": "force",
          "type": "boolean",
          "required": false,
          "description": "Force the operation"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'win_processes' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for win_processes')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "win_services",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "win_services",
      "args": [
        {
          "name": "action",
          "type": "enum[list,start,stop,restart,status,config]",
          "required": false,
          "description": "Service management action to perform"
        },
        {
          "name": "service_name",
          "type": "string",
          "required": false,
          "description": "Name of the Windows service"
        },
        {
          "name": "service_display_name",
          "type": "string",
          "required": false,
          "description": "Display name of the service"
        },
        {
          "name": "force",
          "type": "boolean",
          "required": false,
          "description": "Force the operation"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'win_services' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for win_services')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "proc_run",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "proc_run",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Command to execute"
        },
        {
          "name": "working_dir",
          "type": "string",
          "required": false,
          "description": "Working directory for execution"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Execution timeout in seconds"
        },
        {
          "name": "capture_output",
          "type": "boolean",
          "required": false,
          "description": "Capture command output"
        },
        {
          "name": "args",
          "type": "array[string]",
          "required": false,
          "description": "Command line arguments"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'proc_run' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for proc_run')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "proc_run_elevated",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "proc_run_elevated",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Command to execute with elevated privileges"
        },
        {
          "name": "working_dir",
          "type": "string",
          "required": false,
          "description": "Working directory for execution"
        },
        {
          "name": "reason",
          "type": "string",
          "required": false,
          "description": "Reason for requiring elevated privileges"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Execution timeout in seconds"
        },
        {
          "name": "args",
          "type": "array[string]",
          "required": false,
          "description": "Command line arguments"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'proc_run_elevated' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for proc_run_elevated')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "proc_run_remote",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "proc_run_remote",
      "args": [
        {
          "name": "protocol",
          "type": "enum[ssh,winrm,adb,ios_deploy,telnet,custom]",
          "required": false,
          "description": "Connection protocol"
        },
        {
          "name": "target_host",
          "type": "string",
          "required": false,
          "description": "Target device WAN IP address or hostname"
        },
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Command to execute on remote device"
        },
        {
          "name": "working_dir",
          "type": "string",
          "required": false,
          "description": "Working directory for execution"
        },
        {
          "name": "username",
          "type": "string",
          "required": false,
          "description": "Username for authentication (optional - will use passwordless methods if not provided)"
        },
        {
          "name": "password",
          "type": "string",
          "required": false,
          "description": "Password for authentication (optional - will use passwordless methods if not provided)"
        },
        {
          "name": "key_file",
          "type": "string",
          "required": false,
          "description": "SSH private key file path (optional - will auto-detect if not provided)"
        },
        {
          "name": "target_port",
          "type": "number",
          "required": false,
          "description": "Target port (defaults based on protocol)"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Connection and execution timeout in seconds"
        },
        {
          "name": "elevated",
          "type": "boolean",
          "required": false,
          "description": "Execute with elevated privileges"
        },
        {
          "name": "capture_output",
          "type": "boolean",
          "required": false,
          "description": "Capture command output"
        },
        {
          "name": "interactive",
          "type": "boolean",
          "required": false,
          "description": "Enable interactive mode"
        },
        {
          "name": "passwordless",
          "type": "boolean",
          "required": false,
          "description": "Force passwordless authentication methods"
        },
        {
          "name": "auto_auth",
          "type": "boolean",
          "required": false,
          "description": "Automatically detect and use available authentication methods"
        },
        {
          "name": "args",
          "type": "array[string]",
          "required": false,
          "description": "Command line arguments"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'proc_run_remote' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for proc_run_remote')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "system_restore",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "system_restore",
      "args": [
        {
          "name": "action",
          "type": "enum[create_backup,list_backups,restore_backup,delete_backup]",
          "required": false,
          "description": "System restore action to perform"
        },
        {
          "name": "backup_name",
          "type": "string",
          "required": false,
          "description": "Name for the backup or backup to restore"
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "Description of the backup"
        },
        {
          "name": "include_files",
          "type": "boolean",
          "required": false,
          "description": "Include user files in backup"
        },
        {
          "name": "include_system",
          "type": "boolean",
          "required": false,
          "description": "Include system files in backup"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'system_restore' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for system_restore')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "elevated_permissions_manager",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "elevated_permissions_manager",
      "args": [
        {
          "name": "tool_name",
          "type": "string",
          "required": false,
          "description": "Tool name for permission operations"
        },
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Command to check for safety"
        },
        {
          "name": "config_data",
          "type": "string",
          "required": false,
          "description": "Configuration data for import operations"
        },
        {
          "name": "enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable/disable setting for boolean operations"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'elevated_permissions_manager' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for elevated_permissions_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "cron_job_manager",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cron_job_manager",
      "args": [
        {
          "name": "action",
          "type": "enum[list,add,remove,enable,disable,status]",
          "required": true,
          "description": "Cron job management action"
        },
        {
          "name": "job_name",
          "type": "string",
          "required": false,
          "description": "Name of the cron job"
        },
        {
          "name": "schedule",
          "type": "string",
          "required": false,
          "description": "Cron schedule expression"
        },
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Command to execute"
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "Job description"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'cron_job_manager' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cron_job_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "system_monitor",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "system_monitor",
      "args": [
        {
          "name": "action",
          "type": "enum[get_status,monitor,get_processes,get_services,get_network,get_disk,get_memory,get_cpu,get_system_info]",
          "required": true,
          "description": "System monitoring action"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Monitoring duration in seconds"
        },
        {
          "name": "interval",
          "type": "number",
          "required": false,
          "description": "Monitoring interval in seconds"
        },
        {
          "name": "output_format",
          "type": "enum[json,table,summary]",
          "required": false,
          "description": "Output format"
        },
        {
          "name": "include_details",
          "type": "boolean",
          "required": false,
          "description": "Include detailed information"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'system_monitor' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for system_monitor')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "git_status",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "git_status",
      "args": [
        {
          "name": "repository_path",
          "type": "string",
          "required": false,
          "description": "Path to git repository (default: current directory)"
        },
        {
          "name": "show_untracked",
          "type": "boolean",
          "required": false,
          "description": "Show untracked files"
        },
        {
          "name": "show_ignored",
          "type": "boolean",
          "required": false,
          "description": "Show ignored files"
        },
        {
          "name": "porcelain",
          "type": "boolean",
          "required": false,
          "description": "Use porcelain format output"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'git_status' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for git_status')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "health",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "health",
      "args": [
        {
          "name": "check_type",
          "type": "enum[basic,detailed,system,network,security]",
          "required": false,
          "description": "Type of health check to perform"
        },
        {
          "name": "include_metrics",
          "type": "boolean",
          "required": false,
          "description": "Include performance metrics"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'health' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for health')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "system_info",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "system_info",
      "args": [
        {
          "name": "info_type",
          "type": "enum[basic,detailed,hardware,software,network]",
          "required": false,
          "description": "Type of system information to retrieve"
        },
        {
          "name": "format",
          "type": "enum[json,text,table]",
          "required": false,
          "description": "Output format"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'system_info' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for system_info')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "fs_list",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "fs_list",
      "args": [
        {
          "name": "dir",
          "type": "string",
          "required": false,
          "description": "The directory path to list files and folders from"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'fs_list' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for fs_list')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "fs_read_text",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "fs_read_text",
      "args": [
        {
          "name": "path",
          "type": "string",
          "required": true,
          "description": "The file path to read from. Can be relative or absolute path. Examples: './config.txt', '/home/user/documents/readme.md', 'C:\\\\Users\\\\User\\\\Desktop\\\\notes.txt'."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'fs_read_text' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for fs_read_text')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "fs_write_text",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "fs_write_text",
      "args": [
        {
          "name": "path",
          "type": "string",
          "required": true,
          "description": "The file path to write to. Can be relative or absolute path. Examples: './output.txt', '/home/user/documents/log.txt', 'C:\\\\Users\\\\User\\\\Desktop\\\\data.txt'."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'fs_write_text' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for fs_write_text')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "fs_search",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "fs_search",
      "args": [
        {
          "name": "dir",
          "type": "string",
          "required": false,
          "description": "The directory to search in"
        },
        {
          "name": "pattern",
          "type": "string",
          "required": true,
          "description": "The file name pattern to search for"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'fs_search' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for fs_search')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "grep",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "grep",
      "args": [
        {
          "name": "pattern",
          "type": "string",
          "required": false,
          "description": "The search pattern. Can be literal text or regex pattern."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'grep' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for grep')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "advanced_grep",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "advanced_grep",
      "args": [
        {
          "name": "pattern",
          "type": "string",
          "required": false,
          "description": "The search pattern. Can be literal text or regex pattern."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'advanced_grep' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for advanced_grep')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "file_ops",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "file_ops",
      "args": [
        {
          "name": "action",
          "type": "enum[copy,move,delete,rename,compress,extract,sync]",
          "required": false,
          "description": "File operation action to perform"
        },
        {
          "name": "source",
          "type": "string",
          "required": false,
          "description": "Source file or directory path"
        },
        {
          "name": "destination",
          "type": "string",
          "required": false,
          "description": "Destination path for copy/move operations"
        },
        {
          "name": "new_name",
          "type": "string",
          "required": false,
          "description": "New name for rename operation"
        },
        {
          "name": "recursive",
          "type": "boolean",
          "required": false,
          "description": "Perform operation recursively for directories"
        },
        {
          "name": "overwrite",
          "type": "boolean",
          "required": false,
          "description": "Overwrite existing files"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'file_ops' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for file_ops')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "file_watcher",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "file_watcher",
      "args": [
        {
          "name": "action",
          "type": "enum[watch,unwatch,list_watchers,get_events]",
          "required": true,
          "description": "File watcher action"
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "Path to watch"
        },
        {
          "name": "events",
          "type": "array[string]",
          "required": false,
          "description": "Events to watch for"
        },
        {
          "name": "recursive",
          "type": "boolean",
          "required": false,
          "description": "Watch subdirectories recursively"
        },
        {
          "name": "watcher_id",
          "type": "string",
          "required": false,
          "description": "Watcher ID for management"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'file_watcher' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for file_watcher')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "packet_sniffer",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "packet_sniffer",
      "args": [
        {
          "name": "action",
          "type": "enum[start_capture,stop_capture,get_captured_packets,analyze_traffic,filter_by_protocol,filter_by_ip,filter_by_port,get_statistics,export_pcap,monitor_bandwidth,detect_anomalies,capture_http,capture_dns,capture_tcp,capture_udp,capture_icmp]",
          "required": true,
          "description": "Packet capture action to perform"
        },
        {
          "name": "interface",
          "type": "string",
          "required": false,
          "description": "Network interface to capture on. Examples: 'eth0', 'wlan0', 'Wi-Fi', 'Ethernet'. Leave empty for auto-detection. Use 'ifconfig' or 'ipconfig' to list available interfaces."
        },
        {
          "name": "filter",
          "type": "string",
          "required": false,
          "description": "Berkeley Packet Filter (BPF) expression to filter packets. Examples: 'host 192.168.1.1', 'port 80', 'tcp and dst port 443', 'icmp', 'not broadcast'. Advanced filtering for specific traffic."
        },
        {
          "name": "source_ip",
          "type": "string",
          "required": false,
          "description": "Filter by source IP address. Examples: '192.168.1.100', '10.0.0.5', '8.8.8.8'. Captures packets originating from this address."
        },
        {
          "name": "dest_ip",
          "type": "string",
          "required": false,
          "description": "Filter by destination IP address. Examples: '192.168.1.1', '172.16.0.1', '1.1.1.1'. Captures packets going to this address."
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "File to save captured packets. Examples: './capture.pcap', '/tmp/network_capture.pcap', 'C:\\\\Captures\\\\traffic.pcap'. Saves in pcap format for analysis tools like Wireshark."
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds. Examples: 30 for short capture, 300 for detailed analysis, 3600 for long-term monitoring. Longer durations provide more comprehensive data."
        },
        {
          "name": "max_packets",
          "type": "number",
          "required": false,
          "description": "Maximum number of packets to capture. Examples: 1000 for quick analysis, 10000 for detailed study, 100000 for comprehensive monitoring. Helps manage storage and processing."
        },
        {
          "name": "source_port",
          "type": "number",
          "required": false,
          "description": "Filter by source port number. Examples: 80 for HTTP, 443 for HTTPS, 22 for SSH, 53 for DNS. Focuses on traffic from specific services."
        },
        {
          "name": "dest_port",
          "type": "number",
          "required": false,
          "description": "Filter by destination port number. Examples: 80 for HTTP servers, 443 for HTTPS, 25 for SMTP, 110 for POP3. Targets specific services."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'packet_sniffer' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "network",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for packet_sniffer')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "port_scanner",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "port_scanner",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target hostname, IP address, or network range to scan"
        },
        {
          "name": "port_range",
          "type": "string",
          "required": false,
          "description": "Port range specification (e.g., '1-1000', '80,443,8080', 'common"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Connection timeout in milliseconds (default: 5000ms)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'port_scanner' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "network",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for port_scanner')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "network_diagnostics",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_diagnostics",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target host or network to diagnose"
        },
        {
          "name": "output_format",
          "type": "string",
          "required": false,
          "description": "Output format for results"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout for individual tests in seconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'network_diagnostics' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "network",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_diagnostics')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "download_file",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "download_file",
      "args": [
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "The URL of the file to download. Must be a valid HTTP/HTTPS URL. Examples: 'https://example.com/file.zip', 'http://downloads.example.org/document.pdf'."
        },
        {
          "name": "outputPath",
          "type": "string",
          "required": false,
          "description": "Optional custom filename for the downloaded file. Examples: 'myfile.zip', './downloads/document.pdf', 'C:\\\\Users\\\\User\\\\Downloads\\\\file.txt'. If not specified, uses the original filename from the URL."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'download_file' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for download_file')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "network_traffic_analyzer",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_traffic_analyzer",
      "args": [
        {
          "name": "interface",
          "type": "string",
          "required": true,
          "description": "Network interface to analyze"
        },
        {
          "name": "analysis_type",
          "type": "enum[protocol,bandwidth,security,performance,comprehensive]",
          "required": true,
          "description": "Type of traffic analysis"
        },
        {
          "name": "capture_duration",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds"
        },
        {
          "name": "filter",
          "type": "string",
          "required": false,
          "description": "BPF filter expression"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file for captured packets"
        },
        {
          "name": "real_time",
          "type": "boolean",
          "required": false,
          "description": "Enable real-time analysis"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'network_traffic_analyzer' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "network",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_traffic_analyzer')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "ip_geolocation",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ip_geolocation",
      "args": [
        {
          "name": "database",
          "type": "enum[maxmind,ip2location,dbip,ipinfo,ipapi,all]",
          "required": false,
          "description": "Geolocation database/service to use"
        },
        {
          "name": "ip_address",
          "type": "string",
          "required": false,
          "description": "IP address to geolocate"
        },
        {
          "name": "include_isp",
          "type": "boolean",
          "required": false,
          "description": "Include ISP information"
        },
        {
          "name": "include_timezone",
          "type": "boolean",
          "required": false,
          "description": "Include timezone information"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'ip_geolocation' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ip_geolocation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "network_triangulation",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_triangulation",
      "args": [
        {
          "name": "triangulation_type",
          "type": "enum[wifi,cellular,hybrid]",
          "required": false,
          "description": "Type of triangulation to perform"
        },
        {
          "name": "mac_address",
          "type": "string",
          "required": false,
          "description": "MAC address of access point"
        },
        {
          "name": "ssid",
          "type": "string",
          "required": false,
          "description": "Network SSID if available"
        },
        {
          "name": "signal_strength",
          "type": "number",
          "required": false,
          "description": "Signal strength in dBm"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'network_triangulation' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "network",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_triangulation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "latency_geolocation",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "latency_geolocation",
      "args": [
        {
          "name": "target_ip",
          "type": "string",
          "required": true,
          "description": "Target IP address to geolocate"
        },
        {
          "name": "location",
          "type": "string",
          "required": true,
          "description": "Vantage point location name"
        },
        {
          "name": "ip",
          "type": "string",
          "required": true,
          "description": "Vantage point IP address"
        },
        {
          "name": "latitude",
          "type": "number",
          "required": true,
          "description": "Vantage point latitude"
        },
        {
          "name": "longitude",
          "type": "number",
          "required": true,
          "description": "Vantage point longitude"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'latency_geolocation' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for latency_geolocation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "network_discovery",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_discovery",
      "args": [
        {
          "name": "discovery_type",
          "type": "enum[port_scan,service_detection,dns_enumeration,subdomain_scan,comprehensive]",
          "required": false,
          "description": "Type of discovery to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target IP address, domain, or network range (CIDR)"
        },
        {
          "name": "port_range",
          "type": "string",
          "required": false,
          "description": "Port range to scan (e.g., '1-1000', '80,443,8080"
        },
        {
          "name": "service_detection",
          "type": "boolean",
          "required": false,
          "description": "Enable service version detection"
        },
        {
          "name": "os_detection",
          "type": "boolean",
          "required": false,
          "description": "Enable OS detection"
        },
        {
          "name": "script_scanning",
          "type": "boolean",
          "required": false,
          "description": "Enable NSE script scanning"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'network_discovery' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "network",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_discovery')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "vulnerability_assessment",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "vulnerability_assessment",
      "args": [
        {
          "name": "assessment_type",
          "type": "enum[network,web,database,os,comprehensive]",
          "required": false,
          "description": "Type of vulnerability assessment"
        },
        {
          "name": "scan_level",
          "type": "enum[light,standard,aggressive,custom]",
          "required": false,
          "description": "Scan intensity level"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target IP address, domain, or network range"
        },
        {
          "name": "include_cves",
          "type": "boolean",
          "required": false,
          "description": "Include CVE vulnerability checks"
        },
        {
          "name": "include_exploits",
          "type": "boolean",
          "required": false,
          "description": "Include exploit availability checks"
        },
        {
          "name": "include_remediation",
          "type": "boolean",
          "required": false,
          "description": "Include remediation recommendations"
        },
        {
          "name": "custom_rules",
          "type": "array[string]",
          "required": false,
          "description": "Custom scanning rules to apply"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'vulnerability_assessment' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for vulnerability_assessment')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "traffic_analysis",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "traffic_analysis",
      "args": [
        {
          "name": "analysis_type",
          "type": "enum[protocol,bandwidth,security,performance,comprehensive]",
          "required": false,
          "description": "Type of traffic analysis"
        },
        {
          "name": "interface",
          "type": "string",
          "required": false,
          "description": "Network interface to capture from"
        },
        {
          "name": "filter",
          "type": "string",
          "required": false,
          "description": "BPF filter expression for packet filtering"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file for captured packets"
        },
        {
          "name": "capture_duration",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds"
        },
        {
          "name": "include_payload",
          "type": "boolean",
          "required": false,
          "description": "Include packet payload analysis"
        },
        {
          "name": "include_flow_analysis",
          "type": "boolean",
          "required": false,
          "description": "Include flow analysis"
        },
        {
          "name": "real_time",
          "type": "boolean",
          "required": false,
          "description": "Enable real-time analysis"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'traffic_analysis' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for traffic_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "network_utilities",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_utilities",
      "args": [
        {
          "name": "utility_type",
          "type": "enum[traceroute,ping_sweep,dns_lookup,whois,vpn_management,bandwidth_test]",
          "required": false,
          "description": "Type of network utility to use"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target IP address, domain, or network range"
        },
        {
          "name": "vpn_server",
          "type": "string",
          "required": false,
          "description": "VPN server to connect to"
        },
        {
          "name": "max_hops",
          "type": "number",
          "required": false,
          "description": "Maximum number of hops for traceroute"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in seconds"
        },
        {
          "name": "packet_size",
          "type": "number",
          "required": false,
          "description": "Packet size in bytes"
        },
        {
          "name": "count",
          "type": "number",
          "required": false,
          "description": "Number of packets to send"
        },
        {
          "name": "interval",
          "type": "number",
          "required": false,
          "description": "Interval between packets in seconds"
        },
        {
          "name": "port",
          "type": "number",
          "required": false,
          "description": "Port number for TCP/UDP"
        },
        {
          "name": "bandwidth_duration",
          "type": "number",
          "required": false,
          "description": "Bandwidth test duration in seconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'network_utilities' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "network",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_utilities')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "social_account_ripper_modular",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "social_account_ripper_modular",
      "args": [
        {
          "name": "search_method",
          "type": "enum[username,email,phone,profile_url,comprehensive]",
          "required": false,
          "description": "Search method to use"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target username, email, phone number, or profile URL"
        },
        {
          "name": "include_historical",
          "type": "boolean",
          "required": false,
          "description": "Include historical posts and activity"
        },
        {
          "name": "include_metadata",
          "type": "boolean",
          "required": false,
          "description": "Include profile metadata and EXIF data"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'social_account_ripper_modular' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for social_account_ripper_modular')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "social_network_ripper",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "social_network_ripper",
      "args": [
        {
          "name": "platform",
          "type": "enum[facebook,twitter,instagram,linkedin,tiktok,youtube,reddit,github,all]",
          "required": false,
          "description": "Social media platform to search"
        },
        {
          "name": "extraction_type",
          "type": "enum[profile_info,posts,connections,media,metadata,comprehensive]",
          "required": false,
          "description": "Type of information to extract"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target username, email, or social media handle to investigate"
        },
        {
          "name": "max_results",
          "type": "number",
          "required": false,
          "description": "Maximum number of results to extract per category"
        },
        {
          "name": "include_historical",
          "type": "boolean",
          "required": false,
          "description": "Include historical data and archived content"
        },
        {
          "name": "include_private",
          "type": "boolean",
          "required": false,
          "description": "Attempt to access private profile information (authorized testing only)"
        },
        {
          "name": "include_geolocation",
          "type": "boolean",
          "required": false,
          "description": "Extract location data from posts and profile information"
        },
        {
          "name": "include_relationships",
          "type": "boolean",
          "required": false,
          "description": "Map social connections and relationships"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'social_network_ripper' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "network",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for social_network_ripper')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "social_engineering_toolkit",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "social_engineering_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum[phishing_assessment,awareness_training,vulnerability_analysis,simulation,reporting]",
          "required": false,
          "description": "Social engineering action to perform"
        },
        {
          "name": "target_group",
          "type": "string",
          "required": false,
          "description": "Target group for assessment"
        },
        {
          "name": "training_module",
          "type": "string",
          "required": false,
          "description": "Specific training module to use"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'social_engineering_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for social_engineering_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "vulnerability_scanner",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "vulnerability_scanner",
      "args": [
        {
          "name": "scan_type",
          "type": "enum[network,web,database,os,comprehensive]",
          "required": false,
          "description": "Type of vulnerability scan to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system or application to scan"
        },
        {
          "name": "custom_rules",
          "type": "array[string]",
          "required": false,
          "description": "Custom scanning rules to apply"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'vulnerability_scanner' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for vulnerability_scanner')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "password_cracker",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "password_cracker",
      "args": [
        {
          "name": "service",
          "type": "enum[ssh,ftp,telnet,rdp,smb,http,https,mysql,postgresql,mssql,oracle,redis,vnc]",
          "required": false,
          "description": "Service to test authentication against"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target host to test password authentication. Examples: '192.168.1.1', 'company.com'"
        },
        {
          "name": "username",
          "type": "string",
          "required": false,
          "description": "Username to test authentication with"
        },
        {
          "name": "custom_port",
          "type": "number",
          "required": false,
          "description": "Custom port number if different from service default"
        },
        {
          "name": "password_list",
          "type": "array[string]",
          "required": false,
          "description": "Custom password list to test. If not provided, uses common passwords"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'password_cracker' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for password_cracker')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "exploit_framework",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "exploit_framework",
      "args": [
        {
          "name": "action",
          "type": "enum[list_exploits,check_vulnerability,execute_exploit,generate_payload,test_exploit,cleanup_exploit,get_exploit_info,scan_target,exploit_validation]",
          "required": false,
          "description": "Exploit framework action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target host to test or exploit. Examples: '192.168.1.1', 'company.com'"
        },
        {
          "name": "exploit",
          "type": "string",
          "required": false,
          "description": "Specific exploit to use. Examples: 'eternalblue', 'bluekeep', 'heartbleed'"
        },
        {
          "name": "payload",
          "type": "string",
          "required": false,
          "description": "Payload type to use. Examples: 'reverse_shell', 'bind_shell', 'meterpreter'"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'exploit_framework' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for exploit_framework')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "network_security",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_security",
      "args": [
        {
          "name": "action",
          "type": "enum[scan,monitor,analyze,protect,respond]",
          "required": false,
          "description": "Security action to perform"
        },
        {
          "name": "scan_type",
          "type": "enum[vulnerability,penetration,compliance,forensic]",
          "required": false,
          "description": "Type of security scan"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target network or host"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Scan duration in minutes"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'network_security' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "network",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "blockchain_security",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "blockchain_security",
      "args": [
        {
          "name": "action",
          "type": "enum[audit,scan,analyze,monitor,protect]",
          "required": false,
          "description": "Blockchain security action"
        },
        {
          "name": "blockchain_type",
          "type": "enum[ethereum,bitcoin,polygon,binance,custom]",
          "required": false,
          "description": "Type of blockchain"
        },
        {
          "name": "contract_address",
          "type": "string",
          "required": false,
          "description": "Smart contract address to analyze"
        },
        {
          "name": "network",
          "type": "string",
          "required": false,
          "description": "Network to analyze (mainnet, testnet)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'blockchain_security' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for blockchain_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "quantum_security",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "quantum_security",
      "args": [
        {
          "name": "action",
          "type": "enum[analyze,generate,test,migrate,audit]",
          "required": false,
          "description": "Quantum security action"
        },
        {
          "name": "algorithm",
          "type": "enum[RSA,ECC,AES,SHA,post_quantum]",
          "required": false,
          "description": "Cryptographic algorithm to analyze"
        },
        {
          "name": "threat_model",
          "type": "enum[current,near_term,long_term]",
          "required": false,
          "description": "Quantum threat timeline"
        },
        {
          "name": "key_size",
          "type": "number",
          "required": false,
          "description": "Key size in bits"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'quantum_security' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for quantum_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "iot_security",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "iot_security",
      "args": [
        {
          "name": "action",
          "type": "enum[scan,audit,protect,monitor,respond]",
          "required": false,
          "description": "IoT security action"
        },
        {
          "name": "device_type",
          "type": "enum[sensor,camera,thermostat,lightbulb,router,other]",
          "required": false,
          "description": "Type of IoT device"
        },
        {
          "name": "protocol",
          "type": "enum[wifi,bluetooth,zigbee,z-wave,ethernet]",
          "required": false,
          "description": "Communication protocol"
        },
        {
          "name": "network_segment",
          "type": "string",
          "required": false,
          "description": "Network segment containing devices"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'iot_security' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for iot_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "hack_network",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "hack_network",
      "args": [
        {
          "name": "attack_vector",
          "type": "enum[reconnaissance,exploitation,persistence,exfiltration]",
          "required": false,
          "description": "Attack vector to use"
        },
        {
          "name": "target_network",
          "type": "string",
          "required": false,
          "description": "Target network CIDR or host range"
        },
        {
          "name": "output_format",
          "type": "string",
          "required": false,
          "description": "Output format for results"
        },
        {
          "name": "stealth_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable stealth mode for detection avoidance"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'hack_network' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "network",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for hack_network')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "penetration_testing_toolkit",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "penetration_testing_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum[reconnaissance,vulnerability_assessment,exploitation,post_exploitation,reporting]",
          "required": false,
          "description": "Penetration testing action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system or network to test"
        },
        {
          "name": "scope",
          "type": "string",
          "required": false,
          "description": "Testing scope and limitations"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'penetration_testing_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": false,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for penetration_testing_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "red_team_toolkit",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "red_team_toolkit",
      "args": [
        {
          "name": "attack_vector",
          "type": "enum[phishing,web_application,network,physical,supply_chain,social]",
          "required": false,
          "description": "Primary attack vector to use"
        },
        {
          "name": "target_environment",
          "type": "string",
          "required": false,
          "description": "Target environment or organization to simulate attack against"
        },
        {
          "name": "persistence_duration",
          "type": "string",
          "required": false,
          "description": "Duration to maintain persistence (e.g., '30d', '90d"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'red_team_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": false,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for red_team_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "encryption_tool",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "encryption_tool",
      "args": [
        {
          "name": "action",
          "type": "enum[encrypt,decrypt,hash,sign,verify]",
          "required": false,
          "description": "Cryptographic action to perform"
        },
        {
          "name": "algorithm",
          "type": "enum[aes,rsa,sha256,sha512,md5]",
          "required": false,
          "description": "Cryptographic algorithm to use"
        },
        {
          "name": "input_data",
          "type": "string",
          "required": false,
          "description": "Data to process"
        },
        {
          "name": "key",
          "type": "string",
          "required": false,
          "description": "Encryption/decryption key"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'encryption_tool' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for encryption_tool')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "malware_analysis",
      "category": "forensics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "malware_analysis",
      "args": [
        {
          "name": "action",
          "type": "enum[analyze,detect,classify,extract,report]",
          "required": false,
          "description": "Malware analysis action"
        },
        {
          "name": "analysis_type",
          "type": "enum[static,dynamic,behavioral,network]",
          "required": false,
          "description": "Type of analysis to perform"
        },
        {
          "name": "sample_path",
          "type": "string",
          "required": false,
          "description": "Path to malware sample"
        },
        {
          "name": "sandbox",
          "type": "boolean",
          "required": false,
          "description": "Use sandboxed environment for analysis"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'malware_analysis' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "forensics",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for malware_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "wifi_security_toolkit",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wifi_security_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum[scan_networks,capture_handshake,crack_password,evil_twin,deauth_attack,wps_test,rogue_ap,packet_sniff,monitor_clients,wifi_jammer,analyze_traffic,test_security,sniff_packets,capture_pmkid,dictionary_attack,brute_force_attack,rainbow_table_attack,create_rogue_ap,evil_twin_attack,phishing_capture,credential_harvest,wps_attack,pixie_dust_attack,fragmentation_attack,router_scan,iot_enumeration,vulnerability_scan,exploit_router,analyze_captures,generate_report,export_results,cleanup_traces]",
          "required": true,
          "description": "WiFi security action to perform"
        },
        {
          "name": "target_ssid",
          "type": "string",
          "required": false,
          "description": "Target WiFi network SSID"
        },
        {
          "name": "target_bssid",
          "type": "string",
          "required": false,
          "description": "Target WiFi network BSSID (MAC address)"
        },
        {
          "name": "wifiInterface",
          "type": "string",
          "required": false,
          "description": "Wireless interface to use (alias: interface)"
        },
        {
          "name": "interface",
          "type": "string",
          "required": false,
          "description": "Alias for wifiInterface"
        },
        {
          "name": "wordlist",
          "type": "string",
          "required": false,
          "description": "Password wordlist file path"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path for captured data"
        },
        {
          "name": "attack_type",
          "type": "string",
          "required": false,
          "description": "Security protocol or attack subtype to target"
        },
        {
          "name": "channel",
          "type": "number",
          "required": false,
          "description": "WiFi channel to target"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Attack duration in seconds"
        },
        {
          "name": "max_attempts",
          "type": "number",
          "required": false,
          "description": "Maximum attempts for certain attacks"
        },
        {
          "name": "power_level",
          "type": "number",
          "required": false,
          "description": "Transmit power level (0-100%)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'wifi_security_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "wireless",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wifi_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "wifi_hacking",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wifi_hacking",
      "args": [
        {
          "name": "action",
          "type": "enum[assess_network,crack_wep,crack_wpa,evil_twin,wps_exploit,iot_enum,deauth_attack,handshake_capture,password_attack,rogue_ap,traffic_analysis,vulnerability_scan,disrupt]",
          "required": false,
          "description": "WiFi hacking action to perform"
        },
        {
          "name": "target_ssid",
          "type": "string",
          "required": false,
          "description": "Target WiFi network SSID"
        },
        {
          "name": "target_bssid",
          "type": "string",
          "required": false,
          "description": "Target WiFi network BSSID"
        },
        {
          "name": "wireless_wifiInterface",
          "type": "string",
          "required": false,
          "description": "Wireless wifiInterface to use"
        },
        {
          "name": "wordlist",
          "type": "string",
          "required": false,
          "description": "Password wordlist file path"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path for results"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Attack duration in seconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'wifi_hacking' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "wireless",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wifi_hacking')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "wireless_security",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wireless_security",
      "args": [
        {
          "name": "action",
          "type": "enum[scan,deauth,capture,crack,monitor]",
          "required": false,
          "description": "Wireless action to perform"
        },
        {
          "name": "interface",
          "type": "string",
          "required": false,
          "description": "Wireless network interface to use"
        },
        {
          "name": "target_ssid",
          "type": "string",
          "required": false,
          "description": "Target SSID for focused operations"
        },
        {
          "name": "channel",
          "type": "number",
          "required": false,
          "description": "Specific channel to operate on"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'wireless_security' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "wireless",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wireless_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "wireless_network_scanner",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wireless_network_scanner",
      "args": [
        {
          "name": "action",
          "type": "enum[scan,get_networks,get_connected,get_signal_strength]",
          "required": false,
          "description": "Wireless scanning action to perform"
        },
        {
          "name": "interface",
          "type": "string",
          "required": false,
          "description": "Wireless interface to use"
        },
        {
          "name": "scan_time",
          "type": "number",
          "required": false,
          "description": "Scan duration in seconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'wireless_network_scanner' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "wireless",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wireless_network_scanner')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "wifi_disrupt",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wifi_disrupt",
      "args": [
        {
          "name": "action",
          "type": "enum[deauth_flood,malformed_spam,airtime_occupation,parse_nl_command]",
          "required": false,
          "description": "Wi-Fi disruption action to perform"
        },
        {
          "name": "interface",
          "type": "string",
          "required": false,
          "description": "Wi-Fi interface name (e.g., 'wlan0', 'Wi-Fi"
        },
        {
          "name": "target_bssid",
          "type": "string",
          "required": false,
          "description": "Target AP/client BSSID (MAC address) or 'all' for broadcast"
        },
        {
          "name": "nl_command",
          "type": "string",
          "required": false,
          "description": "Natural language command to parse (e.g., 'Jam the AP on channel 6"
        },
        {
          "name": "channel",
          "type": "number",
          "required": false,
          "description": "Wi-Fi channel (1-13 for 2.4GHz, 36+ for 5GHz)"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Duration in seconds"
        },
        {
          "name": "power",
          "type": "number",
          "required": false,
          "description": "TX power in dBm"
        },
        {
          "name": "auto_confirm",
          "type": "boolean",
          "required": false,
          "description": "Skip confirmation prompt (requires proper authorization)"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'wifi_disrupt' auto-added; side-effects not fully profiled",
      "safe_mode": false,
      "tags": [
        "wireless",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wifi_disrupt')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "cellular_triangulate",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cellular_triangulate",
      "args": [
        {
          "name": "action",
          "type": "enum[triangulate_location,scan_towers,query_tower_location,parse_nl_command,ping_phone_number]",
          "required": false,
          "description": "Cellular triangulation action to perform"
        },
        {
          "name": "modem",
          "type": "string",
          "required": false,
          "description": "Cellular modem interface (e.g., 'wwan0', 'Modem0"
        },
        {
          "name": "towers",
          "type": "string",
          "required": false,
          "description": "Comma-separated Cell IDs or 'auto' for scanning"
        },
        {
          "name": "api_key",
          "type": "string",
          "required": false,
          "description": "OpenCellID or Google Geolocation API key"
        },
        {
          "name": "phone_number",
          "type": "string",
          "required": false,
          "description": "Target phone number for SMS triggering (e.g., '+1234567890"
        },
        {
          "name": "max_towers",
          "type": "number",
          "required": false,
          "description": "Maximum towers to use for triangulation (minimum 3)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'cellular_triangulate' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cellular_triangulate')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "bluetooth_security_toolkit",
      "category": "bluetooth",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "bluetooth_security_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum[scan_vulnerabilities,test_pairing,analyze_traffic,check_encryption,get_security_info]",
          "required": false,
          "description": "Security testing action to perform"
        },
        {
          "name": "target_device",
          "type": "string",
          "required": false,
          "description": "Target Bluetooth device address"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'bluetooth_security_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "bluetooth",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for bluetooth_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "bluetooth_hacking",
      "category": "bluetooth",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "bluetooth_hacking",
      "args": [
        {
          "name": "action",
          "type": "enum[scan_devices,pair_bypass,extract_data,bluejacking,bluesnarfing,bluebugging,ble_analysis,spoof_device,jam_bluetooth,monitor_traffic,test_security,exploit_vulnerability]",
          "required": false,
          "description": "Bluetooth hacking action to perform"
        },
        {
          "name": "target_device",
          "type": "string",
          "required": false,
          "description": "Target Bluetooth device MAC address or name"
        },
        {
          "name": "bluetoothInterface",
          "type": "string",
          "required": false,
          "description": "Bluetooth bluetoothInterface to use"
        },
        {
          "name": "payload",
          "type": "string",
          "required": false,
          "description": "Custom payload or message to send"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path for captured data"
        },
        {
          "name": "attack_duration",
          "type": "number",
          "required": false,
          "description": "Attack duration in seconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'bluetooth_hacking' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "bluetooth",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for bluetooth_hacking')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "bluetooth_device_manager",
      "category": "bluetooth",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "bluetooth_device_manager",
      "args": [
        {
          "name": "action",
          "type": "enum[scan,connect,disconnect,pair,unpair,list,info]",
          "required": true,
          "description": "Bluetooth device management action"
        },
        {
          "name": "device_address",
          "type": "string",
          "required": false,
          "description": "Bluetooth device MAC address"
        },
        {
          "name": "device_name",
          "type": "string",
          "required": false,
          "description": "Bluetooth device name"
        },
        {
          "name": "scan_duration",
          "type": "number",
          "required": false,
          "description": "Scan duration in seconds"
        },
        {
          "name": "service_uuid",
          "type": "string",
          "required": false,
          "description": "Service UUID to filter"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'bluetooth_device_manager' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "bluetooth",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for bluetooth_device_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "sdr_security_toolkit",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "sdr_security_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum[detect_sdr,list_devices,scan_frequencies,capture_signal,decode_protocol,spectrum_analysis,transmit_signal,monitor_band,analyze_modulation,record_audio,play_audio,jam_frequency]",
          "required": false,
          "description": "SDR action to perform"
        },
        {
          "name": "modulation",
          "type": "string",
          "required": false,
          "description": "Modulation type"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path"
        },
        {
          "name": "device_id",
          "type": "string",
          "required": false,
          "description": "SDR device identifier"
        },
        {
          "name": "frequency",
          "type": "number",
          "required": false,
          "description": "Frequency in MHz"
        },
        {
          "name": "bandwidth",
          "type": "number",
          "required": false,
          "description": "Bandwidth in kHz"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'sdr_security_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "radio",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for sdr_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "radio_security",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "radio_security",
      "args": [
        {
          "name": "action",
          "type": "enum[scan_frequencies,decode_signal,test_security,analyze_communication,broadcast_signal,transmit_audio,jam_frequency,create_interference,test_power,monitor_spectrum,detect_signal,analyze_modulation]",
          "required": false,
          "description": "Radio security action to perform"
        },
        {
          "name": "modulation",
          "type": "string",
          "required": false,
          "description": "Modulation type"
        },
        {
          "name": "audio_file",
          "type": "string",
          "required": false,
          "description": "Audio file path for transmission"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path for results"
        },
        {
          "name": "frequency",
          "type": "number",
          "required": false,
          "description": "Frequency in MHz"
        },
        {
          "name": "bandwidth",
          "type": "number",
          "required": false,
          "description": "Bandwidth in kHz"
        },
        {
          "name": "power_level",
          "type": "number",
          "required": false,
          "description": "Transmission power level"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Operation duration in seconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'radio_security' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "radio",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for radio_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "signal_analysis",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "signal_analysis",
      "args": [
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path for recordings"
        },
        {
          "name": "frequency",
          "type": "number",
          "required": false,
          "description": "Frequency in Hz (e.g., 1090000000 for 1090 MHz)"
        },
        {
          "name": "sample_rate",
          "type": "number",
          "required": false,
          "description": "Sample rate in Hz (default: 2048000)"
        },
        {
          "name": "gain",
          "type": "number",
          "required": false,
          "description": "RF gain setting (0-100)"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds"
        },
        {
          "name": "device_index",
          "type": "number",
          "required": false,
          "description": "SDR device index (0 for first device)"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'signal_analysis' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "radio",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for signal_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "web_scraper",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "web_scraper",
      "args": [
        {
          "name": "extract_type",
          "type": "enum[text,links,images,tables,forms,all]",
          "required": false,
          "description": "Type of content to extract"
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "Target URL to scrape"
        },
        {
          "name": "max_pages",
          "type": "number",
          "required": false,
          "description": "Maximum number of pages to scrape"
        },
        {
          "name": "follow_links",
          "type": "boolean",
          "required": false,
          "description": "Whether to follow and scrape linked pages"
        },
        {
          "name": "selectors",
          "type": "array[string]",
          "required": false,
          "description": "CSS selectors for specific content extraction"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'web_scraper' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for web_scraper')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "enhanced_browser_automation",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_browser_automation",
      "args": [
        {
          "name": "action",
          "type": "enum[launch,close,navigate,back,forward,refresh,reload,click,type,fill,select,check,uncheck,hover,scroll,screenshot,extract,get_text,get_html,get_attributes,execute_script,evaluate,inject_script,form_fill,form_submit,form_reset,wait,wait_for_element,wait_for_text,wait_for_navigation,upload_file,download_file,set_viewport,set_geolocation,block_resources,automate_workflow,record_actions,playback_actions]",
          "required": true,
          "description": "Browser automation action to perform"
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "URL to navigate to"
        },
        {
          "name": "selector",
          "type": "string",
          "required": false,
          "description": "CSS selector, XPath, or element identifier for targeting elements"
        },
        {
          "name": "text",
          "type": "string",
          "required": false,
          "description": "Text content to search for or input"
        },
        {
          "name": "browser",
          "type": "enum[chrome,firefox,safari,edge,auto]",
          "required": false,
          "description": "Browser to use (auto selects platform default)"
        },
        {
          "name": "headless",
          "type": "boolean",
          "required": false,
          "description": "Run browser in headless mode"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Operation timeout in milliseconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'enhanced_browser_automation' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_browser_automation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "webhook_manager",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "webhook_manager",
      "args": [
        {
          "name": "action",
          "type": "enum[create,list,delete,update,test,trigger]",
          "required": true,
          "description": "Webhook management action"
        },
        {
          "name": "webhook_id",
          "type": "string",
          "required": false,
          "description": "Webhook identifier"
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "Webhook URL endpoint"
        },
        {
          "name": "method",
          "type": "enum[GET,POST,PUT,DELETE,PATCH]",
          "required": false,
          "description": "HTTP method"
        },
        {
          "name": "headers",
          "type": "object",
          "required": false,
          "description": "HTTP headers"
        },
        {
          "name": "payload",
          "type": "object",
          "required": false,
          "description": "Webhook payload data"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'webhook_manager' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for webhook_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "universal_browser_operator",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "universal_browser_operator",
      "args": [
        {
          "name": "action",
          "type": "enum[navigate,click,type,screenshot,get_text,get_html,evaluate,wait,scroll]",
          "required": false,
          "description": "Browser action to perform"
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "URL to navigate to (for navigate action)"
        },
        {
          "name": "selector",
          "type": "string",
          "required": false,
          "description": "CSS selector for element interaction"
        },
        {
          "name": "text",
          "type": "string",
          "required": false,
          "description": "Text to type (for type action)"
        },
        {
          "name": "script",
          "type": "string",
          "required": false,
          "description": "JavaScript to evaluate (for evaluate action)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'universal_browser_operator' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for universal_browser_operator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "web_search",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "web_search",
      "args": [
        {
          "name": "engine",
          "type": "enum[google,duckduckgo,bing,yahoo,reddit,wikipedia,github,stackoverflow,youtube,amazon]",
          "required": true,
          "description": "Search engine or site to use"
        },
        {
          "name": "query",
          "type": "string",
          "required": true,
          "description": "Search query to execute"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'web_search' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for web_search')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "form_completion",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "form_completion",
      "args": [
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "URL of the page containing the form"
        },
        {
          "name": "form_selector",
          "type": "string",
          "required": false,
          "description": "CSS selector for specific form (if multiple forms exist)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'form_completion' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for form_completion')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "form_detection",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "form_detection",
      "args": [
        {
          "name": "url",
          "type": "string",
          "required": true,
          "description": "URL of the page containing the form"
        },
        {
          "name": "form_selector",
          "type": "string",
          "required": false,
          "description": "CSS selector for specific form"
        },
        {
          "name": "save_screenshot",
          "type": "boolean",
          "required": false,
          "description": "Save screenshot of the form"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'form_detection' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for form_detection')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "form_validation",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "form_validation",
      "args": [
        {
          "name": "form_data",
          "type": "object",
          "required": true,
          "description": "Form data to validate"
        },
        {
          "name": "validation_rules",
          "type": "object",
          "required": false,
          "description": "Custom validation rules for specific fields"
        },
        {
          "name": "strict_mode",
          "type": "boolean",
          "required": false,
          "description": "Use strict validation mode"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'form_validation' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for form_validation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "form_pattern_recognition",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "form_pattern_recognition",
      "args": [
        {
          "name": "url",
          "type": "string",
          "required": true,
          "description": "URL of the page containing the form"
        },
        {
          "name": "form_selector",
          "type": "string",
          "required": false,
          "description": "CSS selector for specific form"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'form_pattern_recognition' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for form_pattern_recognition')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "captcha_defeating",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "captcha_defeating",
      "args": [
        {
          "name": "action",
          "type": "enum[detect,solve,bypass,analyze,test]",
          "required": false,
          "description": "CAPTCHA action to perform"
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "URL containing the CAPTCHA"
        },
        {
          "name": "image_path",
          "type": "string",
          "required": false,
          "description": "Path to CAPTCHA image file"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'captcha_defeating' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for captcha_defeating')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "browser_control",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "browser_control",
      "args": [
        {
          "name": "action",
          "type": "enum[launch,navigate,click,type,screenshot,execute_script,close]",
          "required": false,
          "description": "Browser action to perform"
        },
        {
          "name": "browser",
          "type": "string",
          "required": false,
          "description": "Browser to use (chrome, firefox, safari, edge)"
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "URL to navigate to"
        },
        {
          "name": "selector",
          "type": "string",
          "required": false,
          "description": "CSS selector for element interaction"
        },
        {
          "name": "text",
          "type": "string",
          "required": false,
          "description": "Text to type or script to execute"
        },
        {
          "name": "headless",
          "type": "boolean",
          "required": false,
          "description": "Run browser in headless mode"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'browser_control' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for browser_control')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "web_automation",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "web_automation",
      "args": [
        {
          "name": "action",
          "type": "enum[navigate,click,type,screenshot,extract,wait,scroll,execute_script,form_fill,get_elements]",
          "required": true,
          "description": "Web automation action to perform"
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "Target URL for web automation operations"
        },
        {
          "name": "selector",
          "type": "string",
          "required": false,
          "description": "CSS selector, XPath, or element identifier"
        },
        {
          "name": "text",
          "type": "string",
          "required": false,
          "description": "Text content to input into form fields"
        },
        {
          "name": "browser",
          "type": "enum[chrome,firefox,edge,auto]",
          "required": false,
          "description": "Browser engine to use"
        },
        {
          "name": "headless",
          "type": "boolean",
          "required": false,
          "description": "Run browser in headless mode"
        },
        {
          "name": "wait_time",
          "type": "number",
          "required": false,
          "description": "Wait duration in milliseconds"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "File path for saving screenshots or data"
        },
        {
          "name": "form_data",
          "type": "object",
          "required": false,
          "description": "Key-value pairs for form field data"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'web_automation' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "web",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for web_automation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "send_email",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "send_email",
      "args": [
        {
          "name": "to",
          "type": "string",
          "required": false,
          "description": "Recipient email address"
        },
        {
          "name": "subject",
          "type": "string",
          "required": false,
          "description": "Email subject line"
        },
        {
          "name": "body",
          "type": "string",
          "required": false,
          "description": "Email body content"
        },
        {
          "name": "from",
          "type": "string",
          "required": false,
          "description": "Sender email address"
        },
        {
          "name": "smtp_server",
          "type": "string",
          "required": false,
          "description": "SMTP server configuration"
        },
        {
          "name": "html",
          "type": "boolean",
          "required": false,
          "description": "Send as HTML email"
        },
        {
          "name": "attachments",
          "type": "array[string]",
          "required": false,
          "description": "File paths to attach"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'send_email' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for send_email')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "read_emails",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "read_emails",
      "args": [
        {
          "name": "imap_server",
          "type": "string",
          "required": false,
          "description": "IMAP server address"
        },
        {
          "name": "username",
          "type": "string",
          "required": false,
          "description": "Email username"
        },
        {
          "name": "password",
          "type": "string",
          "required": false,
          "description": "Email password"
        },
        {
          "name": "folder",
          "type": "string",
          "required": false,
          "description": "Email folder to read (default: INBOX)"
        },
        {
          "name": "limit",
          "type": "number",
          "required": false,
          "description": "Maximum number of emails to retrieve"
        },
        {
          "name": "unread_only",
          "type": "boolean",
          "required": false,
          "description": "Retrieve only unread emails"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'read_emails' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for read_emails')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "parse_email",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "parse_email",
      "args": [
        {
          "name": "parse_type",
          "type": "enum[headers,body,attachments,links,all]",
          "required": false,
          "description": "Type of parsing to perform"
        },
        {
          "name": "email_content",
          "type": "string",
          "required": false,
          "description": "Raw email content to parse"
        },
        {
          "name": "extract_links",
          "type": "boolean",
          "required": false,
          "description": "Extract URLs from email content"
        },
        {
          "name": "extract_attachments",
          "type": "boolean",
          "required": false,
          "description": "Extract attachment information"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'parse_email' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for parse_email')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "delete_emails",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "delete_emails",
      "args": [
        {
          "name": "imap_server",
          "type": "string",
          "required": false,
          "description": "IMAP server address"
        },
        {
          "name": "username",
          "type": "string",
          "required": false,
          "description": "Email username"
        },
        {
          "name": "password",
          "type": "string",
          "required": false,
          "description": "Email password"
        },
        {
          "name": "folder",
          "type": "string",
          "required": false,
          "description": "Email folder containing emails"
        },
        {
          "name": "permanent",
          "type": "boolean",
          "required": false,
          "description": "Permanently delete emails (bypass trash)"
        },
        {
          "name": "email_ids",
          "type": "array[string]",
          "required": false,
          "description": "Array of email IDs to delete"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'delete_emails' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for delete_emails')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "sort_emails",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "sort_emails",
      "args": [
        {
          "name": "emails",
          "type": "array[object]",
          "required": true,
          "description": "Array of emails to sort"
        },
        {
          "name": "sort_by",
          "type": "enum[date,sender,subject,priority,size]",
          "required": true,
          "description": "Sorting criteria"
        },
        {
          "name": "order",
          "type": "enum[asc,desc]",
          "required": false,
          "description": "Sorting order"
        },
        {
          "name": "group_by",
          "type": "string",
          "required": false,
          "description": "Group emails by criteria"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'sort_emails' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for sort_emails')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "manage_email_accounts",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "manage_email_accounts",
      "args": [
        {
          "name": "action",
          "type": "enum[add,remove,list,test,update]",
          "required": false,
          "description": "Account management action"
        },
        {
          "name": "account_name",
          "type": "string",
          "required": false,
          "description": "Name for the email account"
        },
        {
          "name": "email_address",
          "type": "string",
          "required": false,
          "description": "Email address for the account"
        },
        {
          "name": "smtp_server",
          "type": "string",
          "required": false,
          "description": "SMTP server configuration"
        },
        {
          "name": "imap_server",
          "type": "string",
          "required": false,
          "description": "IMAP server configuration"
        },
        {
          "name": "username",
          "type": "string",
          "required": false,
          "description": "Account username"
        },
        {
          "name": "password",
          "type": "string",
          "required": false,
          "description": "Account password"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'manage_email_accounts' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for manage_email_accounts')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "ocr_tool",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ocr_tool",
      "args": [
        {
          "name": "image_path",
          "type": "string",
          "required": false,
          "description": "Path to image file for OCR processing. Supports common formats: jpg, jpeg, png, gif, tiff, bmp, webp. Can be local file path or URL"
        },
        {
          "name": "language",
          "type": "string",
          "required": false,
          "description": "Language code for OCR processing (default: 'eng' for English). Common codes: eng (English), spa (Spanish), fra (French), deu (German), chi (Chinese), jpn (Japanese), kor (Korean), ara (Arabic), rus (Russian)"
        },
        {
          "name": "confidence_threshold",
          "type": "number",
          "required": false,
          "description": "Minimum confidence threshold (0-100) for text recognition. Higher values filter out uncertain results. Default: 60. Recommended: 70-85 for good balance"
        },
        {
          "name": "preprocess",
          "type": "boolean",
          "required": false,
          "description": "Enable automatic image preprocessing for better OCR results. Includes noise reduction, contrast enhancement, and skew correction. Default: true"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'ocr_tool' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ocr_tool')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "multimedia_tool",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "multimedia_tool",
      "args": [
        {
          "name": "source",
          "type": "string",
          "required": false,
          "description": "Media source path (local file) or URL (http/https) to open for editing. Supports audio (mp3, wav, flac, aac, ogg, m4a, wma), image (jpg, jpeg, png, gif, webp, tiff, bmp, svg), and video (mp4, avi, mov, mkv, webm, flv, wmv, m4v) formats"
        },
        {
          "name": "sessionName",
          "type": "string",
          "required": false,
          "description": "Custom name for the editing session. If not provided, defaults to 'untitled' or auto-generated based on source file"
        },
        {
          "name": "sessionId",
          "type": "string",
          "required": false,
          "description": "Unique session identifier for referencing an existing editing session. Required for edit, export, get_session, and delete_session actions"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'multimedia_tool' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for multimedia_tool')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "enhanced_media_editor",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_media_editor",
      "args": [
        {
          "name": "query",
          "type": "string",
          "required": false,
          "description": "Natural language command for media editing (e.g., 'resize this image to 1920x1080', 'add a fade out to the audio', 'crop the video to remove the watermark"
        },
        {
          "name": "sessionId",
          "type": "string",
          "required": false,
          "description": "Unique session identifier for referencing an existing editing session"
        },
        {
          "name": "sessionName",
          "type": "string",
          "required": false,
          "description": "Name for the editing session"
        },
        {
          "name": "source",
          "type": "string",
          "required": false,
          "description": "Media source path (local file) or URL (http/https) to open for editing"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'enhanced_media_editor' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_media_editor')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "screenshot",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "screenshot",
      "args": [
        {
          "name": "action",
          "type": "enum[capture,capture_area,capture_window,capture_delay,capture_continuous]",
          "required": true,
          "description": "Screenshot action to perform"
        },
        {
          "name": "output_path",
          "type": "string",
          "required": false,
          "description": "Output file path for screenshot"
        },
        {
          "name": "format",
          "type": "enum[png,jpg,bmp]",
          "required": false,
          "description": "Output format"
        },
        {
          "name": "delay",
          "type": "number",
          "required": false,
          "description": "Delay before capture in seconds"
        },
        {
          "name": "area",
          "type": "object",
          "required": false,
          "description": "Area to capture (for capture_area)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'screenshot' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for screenshot')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "mobile_device_info",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_device_info",
      "args": [
        {
          "name": "action",
          "type": "enum[get_info,get_battery,get_storage,get_network,get_apps]",
          "required": false,
          "description": "Device information action to perform"
        },
        {
          "name": "device_id",
          "type": "string",
          "required": false,
          "description": "Specific device ID to query"
        },
        {
          "name": "detailed",
          "type": "boolean",
          "required": false,
          "description": "Get detailed information"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'mobile_device_info' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "mobile",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_device_info')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "mobile_file_ops",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_file_ops",
      "args": [
        {
          "name": "action",
          "type": "enum[list,read,write,delete,copy,move,create_dir]",
          "required": false,
          "description": "File operation action to perform"
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "File or directory path"
        },
        {
          "name": "content",
          "type": "string",
          "required": false,
          "description": "Content to write to file"
        },
        {
          "name": "destination",
          "type": "string",
          "required": false,
          "description": "Destination path for copy/move operations"
        },
        {
          "name": "recursive",
          "type": "boolean",
          "required": false,
          "description": "Perform operation recursively for directories"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'mobile_file_ops' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "mobile",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_file_ops')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "mobile_system_tools",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_system_tools",
      "args": [
        {
          "name": "action",
          "type": "enum[process_list,kill_process,system_info,reboot,shutdown,clear_cache]",
          "required": false,
          "description": "System tool action to perform"
        },
        {
          "name": "process_name",
          "type": "string",
          "required": false,
          "description": "Process name for operations"
        },
        {
          "name": "process_id",
          "type": "number",
          "required": false,
          "description": "Process ID for kill operation"
        },
        {
          "name": "force",
          "type": "boolean",
          "required": false,
          "description": "Force operation execution"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'mobile_system_tools' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "mobile",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_system_tools')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "mobile_hardware",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_hardware",
      "args": [
        {
          "name": "action",
          "type": "enum[get_specs,get_sensors,get_camera,get_battery,get_storage,get_network]",
          "required": false,
          "description": "Hardware information action to perform"
        },
        {
          "name": "device_id",
          "type": "string",
          "required": false,
          "description": "Specific device ID to query"
        },
        {
          "name": "detailed",
          "type": "boolean",
          "required": false,
          "description": "Get detailed hardware information"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'mobile_hardware' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "mobile",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_hardware')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "mobile_device_management",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_device_management",
      "args": [
        {
          "name": "action",
          "type": "enum[enroll_device,apply_policy,remote_wipe,app_management,security_monitoring,compliance_check]",
          "required": false,
          "description": "Device management action to perform"
        },
        {
          "name": "device_id",
          "type": "string",
          "required": false,
          "description": "Target device identifier"
        },
        {
          "name": "policy_name",
          "type": "string",
          "required": false,
          "description": "Policy to apply to device"
        },
        {
          "name": "app_package",
          "type": "string",
          "required": false,
          "description": "App package name for management"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'mobile_device_management' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "mobile",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_device_management')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "mobile_app_unified",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_app_unified",
      "args": [
        {
          "name": "action",
          "type": "enum[install,uninstall,launch,close,analyze,test,debug,profile]",
          "required": true,
          "description": "Mobile app management action"
        },
        {
          "name": "app_package",
          "type": "string",
          "required": false,
          "description": "Application package name"
        },
        {
          "name": "device_id",
          "type": "string",
          "required": false,
          "description": "Target device identifier"
        },
        {
          "name": "platform",
          "type": "enum[android,ios]",
          "required": false,
          "description": "Mobile platform"
        },
        {
          "name": "test_type",
          "type": "enum[functional,performance,security,compatibility]",
          "required": false,
          "description": "Type of testing to perform"
        },
        {
          "name": "output_path",
          "type": "string",
          "required": false,
          "description": "Output path for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'mobile_app_unified' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "mobile",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_app_unified')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "mobile_network_analyzer",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_network_analyzer",
      "args": [
        {
          "name": "action",
          "type": "enum[capture_traffic,analyze_protocols,detect_anomalies,monitor_apps,generate_report]",
          "required": false,
          "description": "Network analysis action to perform"
        },
        {
          "name": "device_id",
          "type": "string",
          "required": false,
          "description": "Target mobile device identifier"
        },
        {
          "name": "filter_protocol",
          "type": "string",
          "required": false,
          "description": "Specific protocol to filter"
        },
        {
          "name": "capture_duration",
          "type": "number",
          "required": false,
          "description": "Traffic capture duration in seconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'mobile_network_analyzer' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "mobile",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_network_analyzer')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "mobile_security_toolkit",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_security_toolkit",
      "args": [
        {
          "name": "device_id",
          "type": "string",
          "required": false,
          "description": "Target mobile device identifier"
        },
        {
          "name": "cellular_modem",
          "type": "string",
          "required": false,
          "description": "Cellular modem interface for triangulation"
        },
        {
          "name": "api_key",
          "type": "string",
          "required": false,
          "description": "API key for cellular tower lookup"
        },
        {
          "name": "auto_confirm",
          "type": "boolean",
          "required": false,
          "description": "Skip confirmation prompt (requires proper authorization)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'mobile_security_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "mobile",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "enhanced_mobile_app_toolkit",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_mobile_app_toolkit",
      "args": [
        {
          "name": "app_id",
          "type": "string",
          "required": false,
          "description": "Mobile app identifier (bundle ID or package name)"
        },
        {
          "name": "version",
          "type": "string",
          "required": false,
          "description": "App version for operations"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'enhanced_mobile_app_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "mobile",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_mobile_app_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "vm_management",
      "category": "virtualization",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "vm_management",
      "args": [
        {
          "name": "action",
          "type": "enum[list,start,stop,create,delete,status,snapshot]",
          "required": false,
          "description": "VM management action to perform"
        },
        {
          "name": "vm_name",
          "type": "string",
          "required": false,
          "description": "Name of the virtual machine"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'vm_management' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "virtualization",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for vm_management')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "docker_management",
      "category": "virtualization",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "docker_management",
      "args": [
        {
          "name": "action",
          "type": "enum[list_containers,list_images,start,stop,create,remove,logs,exec]",
          "required": false,
          "description": "Docker management action to perform"
        },
        {
          "name": "container_name",
          "type": "string",
          "required": false,
          "description": "Name or ID of the container"
        },
        {
          "name": "image_name",
          "type": "string",
          "required": false,
          "description": "Name of the Docker image"
        },
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Command to execute in container"
        },
        {
          "name": "ports",
          "type": "array[string]",
          "required": false,
          "description": "Port mappings (e.g., ['8080:80'])"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'docker_management' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "virtualization",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for docker_management')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "rag_toolkit",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rag_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum[search_documents,query_with_context,embed_text,similarity_search,build_index,retrieve_context,generate_answer]",
          "required": true,
          "description": "RAG action to perform"
        },
        {
          "name": "query",
          "type": "string",
          "required": false,
          "description": "Search query or question"
        },
        {
          "name": "documents",
          "type": "array[string]",
          "required": false,
          "description": "Array of documents to search"
        },
        {
          "name": "text",
          "type": "string",
          "required": false,
          "description": "Text to embed or process"
        },
        {
          "name": "top_k",
          "type": "number",
          "required": false,
          "description": "Number of top results to return"
        },
        {
          "name": "similarity_threshold",
          "type": "number",
          "required": false,
          "description": "Minimum similarity threshold"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'rag_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rag_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "flipper_zero",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "flipper_zero",
      "args": [
        {
          "name": "action",
          "type": "enum[scan,transmit,receive,analyze,record,replay]",
          "required": true,
          "description": "Flipper Zero action to perform"
        },
        {
          "name": "protocol",
          "type": "enum[rfid,nfc,infrared,bluetooth,wifi,gpio,uart,spi,i2c]",
          "required": false,
          "description": "Communication protocol"
        },
        {
          "name": "frequency",
          "type": "number",
          "required": false,
          "description": "Frequency in Hz"
        },
        {
          "name": "data",
          "type": "string",
          "required": false,
          "description": "Data to transmit or analyze"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Operation duration in seconds"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file for captured data"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Flipper Zero consolidated operations",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for flipper_zero')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "enhanced_calculator",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_calculator",
      "args": [
        {
          "name": "expression",
          "type": "string",
          "required": false,
          "description": "Mathematical expression to evaluate (for advanced/expression modes). Supports variables, functions, and complex operations"
        },
        {
          "name": "a",
          "type": "number",
          "required": false,
          "description": "First number for calculation (for basic mode)"
        },
        {
          "name": "b",
          "type": "number",
          "required": false,
          "description": "Second number for calculation (for basic mode, not needed for unary operations)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'enhanced_calculator' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "utilities",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_calculator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "dice_rolling",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "dice_rolling",
      "args": [
        {
          "name": "dice_notation",
          "type": "string",
          "required": false,
          "description": "Dice notation (e.g., '2d6', '1d20', '3d8+5"
        },
        {
          "name": "count",
          "type": "number",
          "required": false,
          "description": "Number of times to roll (default: 1)"
        },
        {
          "name": "advantage",
          "type": "boolean",
          "required": false,
          "description": "Roll with advantage (take highest of 2 rolls)"
        },
        {
          "name": "disadvantage",
          "type": "boolean",
          "required": false,
          "description": "Roll with disadvantage (take lowest of 2 rolls)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'dice_rolling' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for dice_rolling')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "enhanced_data_analysis",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_data_analysis",
      "args": [
        {
          "name": "data_source",
          "type": "string",
          "required": false,
          "description": "Source of data to analyze (file path, URL, or data reference for advanced modes)"
        },
        {
          "name": "grouping_variable",
          "type": "string",
          "required": false,
          "description": "Variable for grouping data in comparative analysis"
        },
        {
          "name": "chart_title",
          "type": "string",
          "required": false,
          "description": "Title for generated charts"
        },
        {
          "name": "variables",
          "type": "array[string]",
          "required": false,
          "description": "Variable names for multivariate analysis"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'enhanced_data_analysis' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_data_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "machine_learning",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "machine_learning",
      "args": [
        {
          "name": "action",
          "type": "enum[train,predict,evaluate,optimize,deploy]",
          "required": false,
          "description": "ML action to perform"
        },
        {
          "name": "model_type",
          "type": "enum[classification,regression,clustering,neural_network]",
          "required": false,
          "description": "Type of ML model"
        },
        {
          "name": "data_path",
          "type": "string",
          "required": false,
          "description": "Path to training data"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'machine_learning' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for machine_learning')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "chart_generator",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "chart_generator",
      "args": [
        {
          "name": "chart_type",
          "type": "enum[line,bar,pie,scatter,histogram,donut,area,radar]",
          "required": true,
          "description": "Type of chart to generate"
        },
        {
          "name": "value",
          "type": "number",
          "required": true,
          "description": "Data value for the chart"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'chart_generator' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "utilities",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for chart_generator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "text_processor",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "text_processor",
      "args": [
        {
          "name": "action",
          "type": "enum[count_words,count_chars,find_replace,extract_emails,extract_urls,format_case,remove_duplicates]",
          "required": false,
          "description": "Text processing action to perform"
        },
        {
          "name": "text",
          "type": "string",
          "required": false,
          "description": "Input text to process"
        },
        {
          "name": "find_text",
          "type": "string",
          "required": false,
          "description": "Text to find for replace operations"
        },
        {
          "name": "replace_text",
          "type": "string",
          "required": false,
          "description": "Text to replace with"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'text_processor' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "utilities",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for text_processor')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "password_generator",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "password_generator",
      "args": [
        {
          "name": "length",
          "type": "number",
          "required": false,
          "description": "Password length (default: 16)"
        },
        {
          "name": "include_uppercase",
          "type": "boolean",
          "required": false,
          "description": "Include uppercase letters"
        },
        {
          "name": "include_lowercase",
          "type": "boolean",
          "required": false,
          "description": "Include lowercase letters"
        },
        {
          "name": "include_numbers",
          "type": "boolean",
          "required": false,
          "description": "Include numbers"
        },
        {
          "name": "include_symbols",
          "type": "boolean",
          "required": false,
          "description": "Include special symbols"
        },
        {
          "name": "exclude_similar",
          "type": "boolean",
          "required": false,
          "description": "Exclude similar characters (l, 1, I, O, 0)"
        },
        {
          "name": "exclude_ambiguous",
          "type": "boolean",
          "required": false,
          "description": "Exclude ambiguous characters"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'password_generator' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for password_generator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "calculator",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "calculator",
      "args": [
        {
          "name": "operation",
          "type": "enum[add,subtract,multiply,divide,power,sqrt,percentage]",
          "required": false,
          "description": "Mathematical operation to perform"
        },
        {
          "name": "a",
          "type": "number",
          "required": false,
          "description": "First number for calculation"
        },
        {
          "name": "b",
          "type": "number",
          "required": false,
          "description": "Second number for calculation (not needed for sqrt)"
        },
        {
          "name": "precision",
          "type": "number",
          "required": false,
          "description": "Decimal precision for result"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'calculator' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "utilities",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for calculator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "math_calculate",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "math_calculate",
      "args": [
        {
          "name": "expression",
          "type": "string",
          "required": false,
          "description": "Mathematical expression to evaluate"
        },
        {
          "name": "precision",
          "type": "number",
          "required": false,
          "description": "Decimal precision for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'math_calculate' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "utilities",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for math_calculate')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "data_analysis",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "data_analysis",
      "args": [
        {
          "name": "action",
          "type": "enum[analyze,visualize,correlate,predict,export]",
          "required": false,
          "description": "Analysis action to perform"
        },
        {
          "name": "analysis_type",
          "type": "enum[statistical,temporal,spatial,categorical]",
          "required": false,
          "description": "Type of analysis"
        },
        {
          "name": "data_source",
          "type": "string",
          "required": false,
          "description": "Source of data to analyze"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'data_analysis' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for data_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "data_analyzer",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "data_analyzer",
      "args": [
        {
          "name": "action",
          "type": "enum[analyze,statistics,correlation,trend_analysis,outlier_detection]",
          "required": false,
          "description": "Data analysis action to perform"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'data_analyzer' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for data_analyzer')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "cloud_infrastructure_manager",
      "category": "cloud",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cloud_infrastructure_manager",
      "args": [
        {
          "name": "action",
          "type": "enum[list_resources,create_resource,delete_resource,monitor_health,scale_resources,backup_management]",
          "required": false,
          "description": "Infrastructure management action to perform"
        },
        {
          "name": "cloud_provider",
          "type": "enum[aws,azure,gcp,multicloud]",
          "required": false,
          "description": "Cloud provider to manage"
        },
        {
          "name": "region",
          "type": "string",
          "required": false,
          "description": "Cloud region for operations"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'cloud_infrastructure_manager' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "cloud",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cloud_infrastructure_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "tool_discovery",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "tool_discovery",
      "args": [
        {
          "name": "query",
          "type": "string",
          "required": true,
          "description": "Natural language query to find relevant tools"
        },
        {
          "name": "category",
          "type": "string",
          "required": false,
          "description": "Optional tool category to focus on"
        },
        {
          "name": "capability",
          "type": "string",
          "required": false,
          "description": "Specific capability or feature to search for"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'tool_discovery' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for tool_discovery')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "explore_categories",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "explore_categories",
      "args": [
        {
          "name": "category",
          "type": "string",
          "required": false,
          "description": "Specific category to explore, or leave empty to see all categories"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'explore_categories' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for explore_categories')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "natural_language_router",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "natural_language_router",
      "args": [
        {
          "name": "query",
          "type": "string",
          "required": true,
          "description": "Natural language query to route to appropriate tools"
        },
        {
          "name": "context",
          "type": "string",
          "required": false,
          "description": "Additional context about the request"
        },
        {
          "name": "user_intent",
          "type": "string",
          "required": false,
          "description": "User's intended goal or objective"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'natural_language_router' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for natural_language_router')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "metasploit_framework",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "metasploit_framework",
      "args": [
        {
          "name": "action",
          "type": "enum[search,info,use,set,exploit,payload,generate,sessions,jobs]",
          "required": true,
          "description": "Metasploit action to perform"
        },
        {
          "name": "module",
          "type": "string",
          "required": false,
          "description": "Module name or search term"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target host or IP address"
        },
        {
          "name": "payload",
          "type": "string",
          "required": false,
          "description": "Payload to use"
        },
        {
          "name": "options",
          "type": "object",
          "required": false,
          "description": "Module options and parameters"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'metasploit_framework' auto-added; side-effects not fully profiled",
      "safe_mode": false,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for metasploit_framework')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "cobalt_strike",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cobalt_strike",
      "args": [
        {
          "name": "action",
          "type": "enum[generate_payload,start_listener,deploy_beacon,execute_command,lateral_movement,persistence]",
          "required": true,
          "description": "Cobalt Strike action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system or IP address"
        },
        {
          "name": "payload_type",
          "type": "enum[exe,dll,powershell,hta,macro]",
          "required": false,
          "description": "Payload type to generate"
        },
        {
          "name": "listener_port",
          "type": "number",
          "required": false,
          "description": "Listener port number"
        },
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Command to execute on target"
        },
        {
          "name": "output_path",
          "type": "string",
          "required": false,
          "description": "Output path for generated payloads"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'cobalt_strike' auto-added; side-effects not fully profiled",
      "safe_mode": false,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cobalt_strike')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "empire_powershell",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "empire_powershell",
      "args": [
        {
          "name": "action",
          "type": "enum[create_listener,generate_stager,execute_module,manage_agent,post_exploitation]",
          "required": true,
          "description": "Empire PowerShell action"
        },
        {
          "name": "listener_name",
          "type": "string",
          "required": false,
          "description": "Listener name"
        },
        {
          "name": "stager_type",
          "type": "enum[launcher,macro,ducky,hop]",
          "required": false,
          "description": "Stager type"
        },
        {
          "name": "module_name",
          "type": "string",
          "required": false,
          "description": "PowerShell module to execute"
        },
        {
          "name": "agent_name",
          "type": "string",
          "required": false,
          "description": "Agent identifier"
        },
        {
          "name": "parameters",
          "type": "object",
          "required": false,
          "description": "Module parameters"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'empire_powershell' auto-added; side-effects not fully profiled",
      "safe_mode": false,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for empire_powershell')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "bloodhound_ad",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "bloodhound_ad",
      "args": [
        {
          "name": "action",
          "type": "enum[collect,analyze,query,visualize,export]",
          "required": true,
          "description": "BloodHound AD action"
        },
        {
          "name": "domain",
          "type": "string",
          "required": false,
          "description": "Active Directory domain"
        },
        {
          "name": "collection_method",
          "type": "enum[all,dconly,group,localadmin,rdp,dcom,psremote]",
          "required": false,
          "description": "Data collection method"
        },
        {
          "name": "output_path",
          "type": "string",
          "required": false,
          "description": "Output path for collected data"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'bloodhound_ad' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for bloodhound_ad')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "mimikatz_credentials",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mimikatz_credentials",
      "args": [
        {
          "name": "action",
          "type": "enum[sekurlsa,kerberos,crypto,lsadump,vault,dpapi]",
          "required": true,
          "description": "Mimikatz credential action"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system or process"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file for credentials"
        },
        {
          "name": "elevated",
          "type": "boolean",
          "required": false,
          "description": "Require elevated privileges"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'mimikatz_credentials' auto-added; side-effects not fully profiled",
      "safe_mode": false,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mimikatz_credentials')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "mimikatz_enhanced",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mimikatz_enhanced",
      "args": [
        {
          "name": "action",
          "type": "enum[sekurlsa,kerberos,crypto,lsadump,vault,dpapi,privilege,process,service,token]",
          "required": true,
          "description": "Enhanced Mimikatz action"
        },
        {
          "name": "module",
          "type": "string",
          "required": false,
          "description": "Specific Mimikatz module"
        },
        {
          "name": "parameters",
          "type": "object",
          "required": false,
          "description": "Module-specific parameters"
        },
        {
          "name": "output_format",
          "type": "enum[text,json,csv]",
          "required": false,
          "description": "Output format"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'mimikatz_enhanced' auto-added; side-effects not fully profiled",
      "safe_mode": false,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mimikatz_enhanced')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "hexstrike_ai",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "hexstrike_ai",
      "args": [
        {
          "name": "action",
          "type": "enum[analyze_target,generate_exploit,test_payload,automated_attack,report_generation]",
          "required": true,
          "description": "HexStrike AI action"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system or application"
        },
        {
          "name": "attack_vector",
          "type": "enum[web,network,social,physical]",
          "required": false,
          "description": "Attack vector to use"
        },
        {
          "name": "payload_type",
          "type": "string",
          "required": false,
          "description": "Type of payload to generate"
        },
        {
          "name": "automation_level",
          "type": "enum[manual,semi_auto,full_auto]",
          "required": false,
          "description": "Level of automation"
        },
        {
          "name": "output_format",
          "type": "enum[json,html,pdf]",
          "required": false,
          "description": "Output format for reports"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'hexstrike_ai' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for hexstrike_ai')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "hexstrike_ai_natural_language",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "hexstrike_ai_natural_language",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for HexStrike AI operations"
        },
        {
          "name": "context",
          "type": "string",
          "required": false,
          "description": "Additional context for the command"
        },
        {
          "name": "target_info",
          "type": "object",
          "required": false,
          "description": "Target system information"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'hexstrike_ai_natural_language' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for hexstrike_ai_natural_language')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "nmap_scanner",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "nmap_scanner",
      "args": [
        {
          "name": "action",
          "type": "enum[host_discovery,port_scan,service_scan,os_detection,vulnerability_scan,stealth_scan,udp_scan,sctp_scan,ip_protocol_scan,idle_scan,fragment_scan,xmas_scan,null_scan,fin_scan,ack_scan,window_scan,maimon_scan,custom_scan,script_scan,timing_scan]",
          "required": true,
          "description": "Nmap scan action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target host or network (e.g., '192.168.1.1', '192.168.1.0/24')"
        },
        {
          "name": "ports",
          "type": "string",
          "required": false,
          "description": "Port range or specific ports (e.g., '1-1000', '22,80,443')"
        },
        {
          "name": "scan_type",
          "type": "enum[tcp_syn,tcp_connect,tcp_ack,tcp_window,tcp_maimon,tcp_null,tcp_fin,tcp_xmas,udp,sctp,ip_protocol]",
          "required": false,
          "description": "Scan type"
        },
        {
          "name": "timing",
          "type": "enum[T0,T1,T2,T3,T4,T5]",
          "required": false,
          "description": "Timing template"
        },
        {
          "name": "scripts",
          "type": "array[string]",
          "required": false,
          "description": "NSE scripts to run"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'nmap_scanner' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "network",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for nmap_scanner')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "frida_toolkit",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "frida_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum[attach,spawn,inject,hook,trace,dump]",
          "required": true,
          "description": "Frida toolkit action"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target application or process"
        },
        {
          "name": "script",
          "type": "string",
          "required": false,
          "description": "Frida script to execute"
        },
        {
          "name": "device",
          "type": "string",
          "required": false,
          "description": "Target device identifier"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'frida_toolkit' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for frida_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "ghidra_reverse_engineering",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ghidra_reverse_engineering",
      "args": [
        {
          "name": "action",
          "type": "enum[analyze,decompile,disassemble,export,import,script]",
          "required": true,
          "description": "Ghidra reverse engineering action"
        },
        {
          "name": "binary_path",
          "type": "string",
          "required": false,
          "description": "Path to binary file to analyze"
        },
        {
          "name": "project_name",
          "type": "string",
          "required": false,
          "description": "Ghidra project name"
        },
        {
          "name": "script_path",
          "type": "string",
          "required": false,
          "description": "Path to Ghidra script"
        },
        {
          "name": "output_format",
          "type": "enum[c,java,xml,json]",
          "required": false,
          "description": "Output format for decompiled code"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'ghidra_reverse_engineering' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ghidra_reverse_engineering')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "pacu_aws_exploitation",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "pacu_aws_exploitation",
      "args": [
        {
          "name": "action",
          "type": "enum[enumerate,exploit,escalate,persist,exfiltrate]",
          "required": true,
          "description": "Pacu AWS exploitation action"
        },
        {
          "name": "module",
          "type": "string",
          "required": false,
          "description": "Specific Pacu module to run"
        },
        {
          "name": "target_service",
          "type": "enum[ec2,s3,iam,lambda,rds,cloudtrail]",
          "required": false,
          "description": "Target AWS service"
        },
        {
          "name": "region",
          "type": "string",
          "required": false,
          "description": "AWS region"
        },
        {
          "name": "session_name",
          "type": "string",
          "required": false,
          "description": "Pacu session name"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'pacu_aws_exploitation' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for pacu_aws_exploitation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "tool_burglar",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "tool_burglar",
      "args": [
        {
          "name": "action",
          "type": "string",
          "required": false,
          "description": "Action to perform"
        },
        {
          "name": "prefix",
          "type": "string",
          "required": false,
          "description": "Apply a name prefix for imported tools, e.g. 'ext_'"
        },
        {
          "name": "nl_command",
          "type": "string",
          "required": false,
          "description": "Natural-language command alternative"
        },
        {
          "name": "tool",
          "type": "string",
          "required": false,
          "description": "Local tool name (for enable/disable/rename/move/export/deprecate)"
        },
        {
          "name": "new_name",
          "type": "string",
          "required": false,
          "description": "New name for rename"
        },
        {
          "name": "dest_dir",
          "type": "string",
          "required": false,
          "description": "Destination subdir relative to dev/src/tools for move"
        },
        {
          "name": "export_path",
          "type": "string",
          "required": false,
          "description": "Write exported tool to this path (file or dir)"
        },
        {
          "name": "sources",
          "type": "array[string]",
          "required": false,
          "description": "Git URLs or local paths"
        },
        {
          "name": "include",
          "type": "array[string]",
          "required": false,
          "description": "Tool name globs to include"
        },
        {
          "name": "exclude",
          "type": "array[string]",
          "required": false,
          "description": "Tool name globs to exclude"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Tool 'tool_burglar' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for tool_burglar')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "competitive_intelligence",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "competitive_intelligence",
      "args": [
        {
          "name": "action",
          "type": "string",
          "required": true,
          "description": "Competitive intelligence action"
        },
        {
          "name": "companyName",
          "type": "string",
          "required": false,
          "description": "Company name for the operation"
        },
        {
          "name": "homepageUrl",
          "type": "string",
          "required": false,
          "description": "Homepage URL to scrape"
        },
        {
          "name": "sitemapUrl",
          "type": "string",
          "required": false,
          "description": "Sitemap URL to analyze"
        },
        {
          "name": "categories",
          "type": "array[string]",
          "required": false,
          "description": "Categories to include"
        },
        {
          "name": "keywords",
          "type": "array[string]",
          "required": false,
          "description": "Keywords for sitemap filtering"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'competitive_intelligence' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for competitive_intelligence')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "competitive_intelligence_nl",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "competitive_intelligence_nl",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for competitive intelligence"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'competitive_intelligence_nl' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for competitive_intelligence_nl')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "competitive_intelligence_test",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "competitive_intelligence_test",
      "args": [
        {
          "name": "test_type",
          "type": "enum[unit,integration,performance,security]",
          "required": true,
          "description": "Type of test to run"
        },
        {
          "name": "target_company",
          "type": "string",
          "required": false,
          "description": "Company to test intelligence gathering on"
        },
        {
          "name": "test_data",
          "type": "object",
          "required": false,
          "description": "Test data parameters"
        },
        {
          "name": "expected_results",
          "type": "object",
          "required": false,
          "description": "Expected test results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'competitive_intelligence_test' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for competitive_intelligence_test')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "psychology",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "psychology",
      "args": [
        {
          "name": "action",
          "type": "enum[analyze_text,diagnostic_reference,natural_language,platform_info,rag_query,crisis_check,security_assessment,knowledge_base_query,dark_psychology_analysis,manipulation_detection,body_language_analysis,nlp_techniques,emotional_intelligence_assessment,knowledge_base_stats]",
          "required": true,
          "description": "Psychology analysis action"
        },
        {
          "name": "query",
          "type": "string",
          "required": false,
          "description": "Search query for diagnostic criteria, conditions, or symptoms"
        },
        {
          "name": "textSamples",
          "type": "array[string]",
          "required": false,
          "description": "Array of text samples for analysis"
        },
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Natural language command for psychology operations"
        },
        {
          "name": "mode",
          "type": "enum[support,security_awareness]",
          "required": false,
          "description": "Mode of operation"
        },
        {
          "name": "application",
          "type": "enum[helping,exploiting,defense,all]",
          "required": false,
          "description": "Application context"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'psychology' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for psychology')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "multi_engine_search",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "multi_engine_search",
      "args": [
        {
          "name": "query",
          "type": "string",
          "required": true,
          "description": "Search query to execute"
        },
        {
          "name": "engines",
          "type": "array[string]",
          "required": true,
          "description": "Search engines to use"
        },
        {
          "name": "max_results_per_engine",
          "type": "number",
          "required": false,
          "description": "Maximum results per engine"
        },
        {
          "name": "include_snippets",
          "type": "boolean",
          "required": false,
          "description": "Whether to include result snippets"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'multi_engine_search' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for multi_engine_search')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "search_analysis",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "search_analysis",
      "args": [
        {
          "name": "results",
          "type": "array[object]",
          "required": true,
          "description": "Search results to analyze"
        },
        {
          "name": "analysis_type",
          "type": "enum[trends,domains,keywords,sentiment,comprehensive]",
          "required": true,
          "description": "Type of analysis to perform"
        },
        {
          "name": "include_visualization",
          "type": "boolean",
          "required": false,
          "description": "Generate visualization data"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'search_analysis' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for search_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "wan_malware_deployer",
      "category": "forensics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wan_malware_deployer",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target IP address or hostname to attack (e.g., '192.168.1.100', 'target.com"
        },
        {
          "name": "payload_name",
          "type": "string",
          "required": false,
          "description": "Name of the malware payload to deploy (use list_payloads mode to see available options)"
        },
        {
          "name": "natural_language_command",
          "type": "string",
          "required": false,
          "description": "Natural language command for malware deployment (e.g., 'scan and attack 192.168.1.100 with ransomware', 'deploy trojan to target.com on port 8080', 'analyze target 192.168.1.100 and suggest attacks"
        },
        {
          "name": "search_query",
          "type": "string",
          "required": false,
          "description": "Search query for finding additional payload repositories (e.g., 'windows exploits', 'linux backdoors"
        },
        {
          "name": "repository_url",
          "type": "string",
          "required": false,
          "description": "GitHub repository URL to clone for additional payloads"
        },
        {
          "name": "repository_name",
          "type": "string",
          "required": false,
          "description": "Name for the cloned repository"
        },
        {
          "name": "port",
          "type": "number",
          "required": false,
          "description": "Specific port to target (if not provided, will scan for open ports)"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Execution timeout in milliseconds (default: 60000ms, max: 300000ms)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'wan_malware_deployer' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "forensics",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wan_malware_deployer')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "wan_malware_deployer_nl",
      "category": "forensics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wan_malware_deployer_nl",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for malware deployment (e.g., 'scan and attack 192.168.1.100 with ransomware', 'deploy trojan to target.com on port 8080', 'list available payloads', 'scan ports on 10.0.0.1"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'wan_malware_deployer_nl' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "forensics",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wan_malware_deployer_nl')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "hack_gpt",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "hack_gpt",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system, application, or domain to test"
        },
        {
          "name": "workspace",
          "type": "string",
          "required": false,
          "description": "HackGPT workspace name"
        },
        {
          "name": "config_file",
          "type": "string",
          "required": false,
          "description": "Path to HackGPT configuration file"
        },
        {
          "name": "natural_language_command",
          "type": "string",
          "required": false,
          "description": "Natural language command for HackGPT operations (e.g., 'scan the web application for vulnerabilities', 'generate exploit for SQL injection', 'perform OSINT on the target"
        },
        {
          "name": "exploit_chain",
          "type": "array[string]",
          "required": false,
          "description": "Custom exploit chain to execute"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'hack_gpt' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for hack_gpt')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "hack_gpt_natural_language",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "hack_gpt_natural_language",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for HackGPT operations (e.g., 'scan the web application for vulnerabilities', 'generate exploit for SQL injection', 'perform OSINT on the target', 'run Burp Suite scan', 'use Nuclei to find CVEs"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'hack_gpt_natural_language' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for hack_gpt_natural_language')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "strix_ai",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "strix_ai",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target codebase, application, or system to analyze"
        },
        {
          "name": "code_path",
          "type": "string",
          "required": false,
          "description": "Path to source code or application to analyze"
        },
        {
          "name": "ai_model",
          "type": "string",
          "required": false,
          "description": "AI model to use for analysis (e.g., 'openai/gpt-4', 'anthropic/claude-3"
        },
        {
          "name": "natural_language_command",
          "type": "string",
          "required": false,
          "description": "Natural language command for Strix operations (e.g., 'analyze the codebase for SQL injection vulnerabilities', 'run autonomous security testing on the application', 'deploy AI agents for dynamic analysis"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'strix_ai' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for strix_ai')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "strix_ai_natural_language",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "strix_ai_natural_language",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for Strix AI operations (e.g., 'analyze this codebase for vulnerabilities', 'validate exploits in the target', 'generate auto-fixes for the code', 'integrate with CI/CD pipeline"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'strix_ai_natural_language' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "ai",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for strix_ai_natural_language')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "pentest_plus_plus",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "pentest_plus_plus",
      "args": [
        {
          "name": "action",
          "type": "string",
          "required": false,
          "description": "PenTest++ action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system, application, or network to test"
        },
        {
          "name": "target_type",
          "type": "string",
          "required": false,
          "description": "Type of target (web_app, network, mobile, cloud, api, etc.)"
        },
        {
          "name": "reconnaissance_type",
          "type": "string",
          "required": false,
          "description": "Type of reconnaissance to perform"
        },
        {
          "name": "vulnerability_type",
          "type": "string",
          "required": false,
          "description": "Specific vulnerability type to focus on"
        },
        {
          "name": "exploit_framework",
          "type": "string",
          "required": false,
          "description": "Exploit framework to use (metasploit, custom, etc.)"
        },
        {
          "name": "attack_vector",
          "type": "string",
          "required": false,
          "description": "Attack vector to use"
        },
        {
          "name": "payload_type",
          "type": "string",
          "required": false,
          "description": "Type of payload to generate"
        },
        {
          "name": "report_format",
          "type": "string",
          "required": false,
          "description": "Format for generated reports"
        },
        {
          "name": "ai_model",
          "type": "string",
          "required": false,
          "description": "AI model to use for analysis"
        },
        {
          "name": "automation_level",
          "type": "string",
          "required": false,
          "description": "Level of automation (manual, semi_automated, fully_automated)"
        },
        {
          "name": "custom_workflow",
          "type": "string",
          "required": false,
          "description": "Custom workflow configuration"
        },
        {
          "name": "integration_type",
          "type": "string",
          "required": false,
          "description": "Integration type (metasploit, kali, custom)"
        },
        {
          "name": "natural_language_command",
          "type": "string",
          "required": false,
          "description": "Natural language command for PenTest++ operations"
        },
        {
          "name": "platform",
          "type": "string",
          "required": false,
          "description": "Target platform"
        },
        {
          "name": "architecture",
          "type": "string",
          "required": false,
          "description": "Target architecture"
        },
        {
          "name": "stealth_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable stealth mode for detection avoidance"
        },
        {
          "name": "ai_workflow_generation",
          "type": "boolean",
          "required": false,
          "description": "Enable AI-powered workflow generation"
        },
        {
          "name": "attack_path_prediction",
          "type": "boolean",
          "required": false,
          "description": "Enable AI attack path prediction"
        },
        {
          "name": "ethical_guidelines",
          "type": "boolean",
          "required": false,
          "description": "Enforce ethical hacking guidelines"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode for testing"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'pentest_plus_plus' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for pentest_plus_plus')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "pentest_plus_plus_natural_language",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "pentest_plus_plus_natural_language",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for PenTest++ operations (e.g., 'perform reconnaissance on the target', 'generate AI workflow for penetration testing', 'integrate with Metasploit', 'predict attack paths for the system"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'pentest_plus_plus_natural_language' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "security",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for pentest_plus_plus_natural_language')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "metadata_extractor",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "metadata_extractor",
      "args": [
        {
          "name": "input_type",
          "type": "enum[url,file,reddit_link,social_media]",
          "required": false,
          "description": "Type of input to process"
        },
        {
          "name": "extraction_type",
          "type": "enum[metadata_only,geolocation,visual_analysis,comprehensive]",
          "required": false,
          "description": "Type of extraction to perform"
        },
        {
          "name": "input_source",
          "type": "string",
          "required": false,
          "description": "URL, file path, or Reddit/social media link to analyze"
        },
        {
          "name": "include_exif",
          "type": "boolean",
          "required": false,
          "description": "Extract EXIF metadata from images"
        },
        {
          "name": "include_video_metadata",
          "type": "boolean",
          "required": false,
          "description": "Extract metadata from video files"
        },
        {
          "name": "include_audio_metadata",
          "type": "boolean",
          "required": false,
          "description": "Extract metadata from audio files"
        },
        {
          "name": "platform_stripping_check",
          "type": "boolean",
          "required": false,
          "description": "Check if platform strips metadata"
        },
        {
          "name": "visual_analysis",
          "type": "boolean",
          "required": false,
          "description": "Perform visual analysis (OCR, object detection)"
        },
        {
          "name": "cross_post_search",
          "type": "boolean",
          "required": false,
          "description": "Search for cross-posts on other platforms"
        },
        {
          "name": "geotagging_assist",
          "type": "boolean",
          "required": false,
          "description": "Provide geotagging assistance with maps"
        },
        {
          "name": "weather_lookup",
          "type": "boolean",
          "required": false,
          "description": "Look up weather data based on timestamp"
        },
        {
          "name": "sun_position_analysis",
          "type": "boolean",
          "required": false,
          "description": "Analyze sun position based on shadows"
        },
        {
          "name": "include_original_file",
          "type": "boolean",
          "required": false,
          "description": "Include original file in output"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'metadata_extractor' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for metadata_extractor')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    },
    {
      "name": "example_tool",
      "category": "misc",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "example_tool",
      "args": [
        {
          "name": "action",
          "type": "enum[demo,test,validate,benchmark]",
          "required": true,
          "description": "Example tool action"
        },
        {
          "name": "input_data",
          "type": "string",
          "required": false,
          "description": "Input data for the example"
        },
        {
          "name": "parameters",
          "type": "object",
          "required": false,
          "description": "Example parameters"
        },
        {
          "name": "output_format",
          "type": "enum[json,text,xml]",
          "required": false,
          "description": "Output format"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Tool 'example_tool' auto-added; side-effects not fully profiled",
      "safe_mode": true,
      "tags": [
        "misc",
        "auto-added"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for example_tool')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      }
    }
  ]
}
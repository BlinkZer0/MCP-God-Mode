{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "MCP God Mode Tools Manifest",
  "type": "object",
  "generated_at": "2025-09-19T05:40:07Z",
  "tools": [
    {
      "name": "drone_unified",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "drone_unified",
      "args": [
        {
          "name": "mode",
          "type": "enum",
          "required": false,
          "description": "Operation mode: 'defense' for defensive operations, 'offense' for offensive operations, 'mobile' for mobile-optimized operations, 'natural_language' for intelligent command processing"
        },
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Drone action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target network, system, or IP address (e.g., 192.168.1.0/24, example.com)"
        },
        {
          "name": "parameters",
          "type": "object",
          "required": false,
          "description": "Operation parameters"
        },
        {
          "name": "naturalLanguageCommand",
          "type": "string",
          "required": false,
          "description": "Natural language command for drone operations (e.g., 'scan for threats', 'jam the signals', 'deploy protection"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udef8 **Unified Drone Management Tool** - Comprehensive drone operations combining defense, offense, mobile optimization, and natural language processing. Provides cross-platform support with intelligent operation routing and safety controls.",
      "safe_mode": false,
      "tags": [
        "drone",
        "general",
        "unified"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for drone_unified')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "rf_sense",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense",
      "args": [
        {
          "name": "random_string",
          "type": "string",
          "required": true,
          "description": "Dummy parameter for no-parameter tools"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udce1 **Unified RF Sense Tool** - Consolidated RF sensing capabilities with comprehensive through-wall detection, occupancy sensing, and object tracking.\\n\\n\u26a0\ufe0f **CRITICAL WARNING - EXPERIMENTAL TOOL**: This RF Sense tool is **experimental and untested**. It can be **extremely harmful to devices** if misused. Use only if you understand RF technology and risks. We are building the structure before reaching 100% functionality.",
      "safe_mode": false,
      "tags": [
        "general",
        "rf",
        "sense"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "enhanced_legal_compliance",
      "category": "legal",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_legal_compliance",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Enhanced legal compliance action"
        },
        {
          "name": "audit_scope",
          "type": "string",
          "required": false,
          "description": "Scope of advanced audit"
        },
        {
          "name": "report_format",
          "type": "string",
          "required": false,
          "description": "Format for regulatory reports"
        },
        {
          "name": "dashboard_type",
          "type": "string",
          "required": false,
          "description": "Type of compliance dashboard"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd12 **Enhanced Legal Compliance Manager** - Advanced legal compliance with additional audit capabilities, evidence chain management, and regulatory reporting features beyond the standard legal compliance manager.",
      "safe_mode": false,
      "tags": [
        "compliance",
        "enhanced",
        "legal"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_legal_compliance')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "advanced_security_assessment",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "advanced_security_assessment",
      "args": [
        {
          "name": "assessment_type",
          "type": "enum",
          "required": true,
          "description": "Type of security assessment"
        },
        {
          "name": "target_scope",
          "type": "string",
          "required": true,
          "description": "Target system or network for assessment"
        },
        {
          "name": "assessment_depth",
          "type": "enum",
          "required": false,
          "description": "Depth of assessment"
        },
        {
          "name": "compliance_framework",
          "type": "string",
          "required": false,
          "description": "Compliance framework to validate against"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udee1\ufe0f **Advanced Security Assessment Tool** - Comprehensive security evaluation with threat modeling, risk analysis, and compliance validation beyond standard security tools.",
      "safe_mode": false,
      "tags": [
        "advanced",
        "assessment",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for advanced_security_assessment')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "cross_platform_system_manager",
      "category": "system",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cross_platform_system_manager",
      "args": [
        {
          "name": "operation",
          "type": "enum",
          "required": true,
          "description": "Cross-platform operation"
        },
        {
          "name": "target_platforms",
          "type": "array",
          "required": true,
          "description": "Target platforms for operation"
        },
        {
          "name": "operation_scope",
          "type": "string",
          "required": true,
          "description": "Scope of the operation"
        },
        {
          "name": "automation_level",
          "type": "enum",
          "required": false,
          "description": "Level of automation"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83c\udf0d **Cross-Platform System Manager** - Unified system management across all platforms with advanced monitoring, automation, and integration capabilities.",
      "safe_mode": false,
      "tags": [
        "cross",
        "manager",
        "platform",
        "system"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cross_platform_system_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "enterprise_integration_hub",
      "category": "integration",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enterprise_integration_hub",
      "args": [
        {
          "name": "integration_type",
          "type": "enum",
          "required": true,
          "description": "Type of enterprise integration"
        },
        {
          "name": "target_systems",
          "type": "array",
          "required": true,
          "description": "Target systems for integration"
        },
        {
          "name": "integration_scope",
          "type": "string",
          "required": true,
          "description": "Scope of integration"
        },
        {
          "name": "security_level",
          "type": "enum",
          "required": false,
          "description": "Security level for integration"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83c\udfe2 **Enterprise Integration Hub** - Advanced enterprise system integration with API management, workflow automation, and enterprise-grade security features.",
      "safe_mode": false,
      "tags": [
        "enterprise",
        "hub",
        "integration"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enterprise_integration_hub')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "advanced_analytics_engine",
      "category": "analytics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "advanced_analytics_engine",
      "args": [
        {
          "name": "analysis_type",
          "type": "enum",
          "required": true,
          "description": "Type of advanced analysis"
        },
        {
          "name": "data_sources",
          "type": "array",
          "required": true,
          "description": "Data sources for analysis"
        },
        {
          "name": "analysis_parameters",
          "type": "object",
          "required": false,
          "description": "Additional analysis parameters"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udcca **Advanced Analytics Engine** - Sophisticated data analysis with machine learning, predictive analytics, and real-time insights beyond standard data analysis tools.",
      "safe_mode": false,
      "tags": [
        "advanced",
        "analytics",
        "engine"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for advanced_analytics_engine')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "web_ui_chat",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "web_ui_chat",
      "args": [
        {
          "name": "provider",
          "type": "string",
          "required": true,
          "description": "Provider ID (e.g., 'chatgpt', 'grok', 'claude', 'huggingface', or custom provider)"
        },
        {
          "name": "prompt",
          "type": "string",
          "required": true,
          "description": "The message to send to the AI service"
        },
        {
          "name": "timeoutMs",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds"
        },
        {
          "name": "variables",
          "type": "record",
          "required": false,
          "description": "Variables to substitute in provider scripts/macros"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target platform (default: from environment)"
        },
        {
          "name": "headless",
          "type": "boolean",
          "required": false,
          "description": "Run browser in headless mode (default: false)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83c\udf10 **Web UI Chat** - Chat with AI services through their web interfaces without APIs. Supports streaming responses and session persistence across ChatGPT, Grok, Claude, Hugging Face Chat, and custom providers.",
      "safe_mode": false,
      "tags": [
        "chat",
        "ui",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for web_ui_chat')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "providers_list",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "providers_list",
      "args": [
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Filter providers by platform"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udccb **Providers List** - List all available AI service providers and their capabilities, with platform-specific filtering.",
      "safe_mode": false,
      "tags": [
        "list",
        "providers",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for providers_list')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "provider_wizard",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "provider_wizard",
      "args": [
        {
          "name": "startUrl",
          "type": "string",
          "required": true,
          "description": "URL of the AI service chat interface"
        },
        {
          "name": "providerName",
          "type": "string",
          "required": true,
          "description": "Name for the provider (e.g., 'My Custom AI"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": true,
          "description": "Target platform for the provider"
        },
        {
          "name": "headless",
          "type": "boolean",
          "required": false,
          "description": "Run browser in headless mode during setup"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd27 **Provider Wizard** - Interactive wizard to set up custom AI service providers by capturing selectors and testing the configuration.",
      "safe_mode": false,
      "tags": [
        "provider",
        "web",
        "wizard"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for provider_wizard')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "macro_record",
      "category": "automation",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "macro_record",
      "args": [
        {
          "name": "target",
          "type": "object",
          "required": false,
          "description": "Provider ID to record against"
        },
        {
          "name": "scope",
          "type": "enum",
          "required": false,
          "description": "Recording scope - DOM for web elements, driver for mobile actions, auto to choose best"
        },
        {
          "name": "name",
          "type": "string",
          "required": false,
          "description": "Name for the macro"
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "Description of what the macro does"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target platform for recording"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udcf9 **Macro Record** - Record a macro by capturing user actions on a web page or app into a portable JSON script.",
      "safe_mode": false,
      "tags": [
        "automation",
        "macro",
        "record"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for macro_record')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "macro_run",
      "category": "automation",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "macro_run",
      "args": [
        {
          "name": "macroId",
          "type": "string",
          "required": true,
          "description": "ID of the macro to execute"
        },
        {
          "name": "variables",
          "type": "record",
          "required": false,
          "description": "Variables to substitute in the macro"
        },
        {
          "name": "dryRun",
          "type": "boolean",
          "required": false,
          "description": "Print the planned actions without executing them"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\u25b6\ufe0f **Macro Run** - Execute a saved macro with optional variable substitution and dry-run capability.",
      "safe_mode": false,
      "tags": [
        "automation",
        "macro",
        "run"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for macro_run')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "session_management",
      "category": "system",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "session_management",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Session management action"
        },
        {
          "name": "provider",
          "type": "string",
          "required": false,
          "description": "Provider ID (required for clear action)"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Platform (required for clear action)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd10 **Session Management** - Manage encrypted sessions for AI service providers with list, clear, and cleanup operations.",
      "safe_mode": false,
      "tags": [
        "management",
        "session",
        "system"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for session_management')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "advanced_threat_hunting",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "advanced_threat_hunting",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Threat hunting action"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system or network to hunt"
        },
        {
          "name": "timeframe",
          "type": "string",
          "required": false,
          "description": "Time frame for hunting"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83c\udfaf **Advanced Threat Hunting** - Sophisticated threat detection and hunting capabilities with behavioral analysis, IOC tracking, and advanced correlation techniques.",
      "safe_mode": false,
      "tags": [
        "advanced",
        "hunting",
        "security",
        "threat"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for advanced_threat_hunting')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "cyber_deception_platform",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cyber_deception_platform",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Deception action"
        },
        {
          "name": "deception_type",
          "type": "string",
          "required": false,
          "description": "Type of deception to deploy"
        },
        {
          "name": "monitoring_level",
          "type": "string",
          "required": false,
          "description": "Monitoring intensity level"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udd78\ufe0f **Cyber Deception Platform** - Advanced deception technology with honeypots, decoy systems, and threat misdirection capabilities.",
      "safe_mode": false,
      "tags": [
        "cyber",
        "deception",
        "platform",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cyber_deception_platform')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "zero_trust_architect",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "zero_trust_architect",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Zero trust action"
        },
        {
          "name": "scope",
          "type": "string",
          "required": false,
          "description": "Implementation scope"
        },
        {
          "name": "trust_level",
          "type": "string",
          "required": false,
          "description": "Trust verification level"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udd10 **Zero Trust Architect** - Comprehensive zero trust security implementation with continuous verification, micro-segmentation, and policy enforcement.",
      "safe_mode": false,
      "tags": [
        "architect",
        "security",
        "trust",
        "zero"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for zero_trust_architect')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "quantum_cryptography_suite",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "quantum_cryptography_suite",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Quantum crypto action"
        },
        {
          "name": "algorithm",
          "type": "string",
          "required": false,
          "description": "Quantum algorithm to use"
        },
        {
          "name": "security_level",
          "type": "string",
          "required": false,
          "description": "Quantum security level"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\u269b\ufe0f **Quantum Cryptography Suite** - Advanced quantum-resistant cryptography with post-quantum algorithms, quantum key distribution, and future-proof encryption.",
      "safe_mode": false,
      "tags": [
        "cryptography",
        "quantum",
        "security",
        "suite"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for quantum_cryptography_suite')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "ai_security_orchestrator",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ai_security_orchestrator",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "AI security action"
        },
        {
          "name": "ai_model",
          "type": "string",
          "required": false,
          "description": "AI model to use"
        },
        {
          "name": "automation_level",
          "type": "string",
          "required": false,
          "description": "Automation intensity"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83e\udd16 **AI Security Orchestrator** - Advanced AI-powered security automation with machine learning threat detection, automated response, and intelligent analysis.",
      "safe_mode": false,
      "tags": [
        "ai",
        "orchestrator",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ai_security_orchestrator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "blockchain_forensics",
      "category": "forensics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "blockchain_forensics",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Blockchain forensics action"
        },
        {
          "name": "blockchain",
          "type": "string",
          "required": false,
          "description": "Blockchain network to analyze"
        },
        {
          "name": "address",
          "type": "string",
          "required": false,
          "description": "Wallet address to investigate"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\u26d3\ufe0f **Blockchain Forensics** - Advanced blockchain investigation with transaction tracing, wallet analysis, and cryptocurrency forensics.",
      "safe_mode": false,
      "tags": [
        "blockchain",
        "forensics"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for blockchain_forensics')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "supply_chain_security",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "supply_chain_security",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Supply chain security action"
        },
        {
          "name": "scope",
          "type": "string",
          "required": false,
          "description": "Assessment scope"
        },
        {
          "name": "risk_level",
          "type": "string",
          "required": false,
          "description": "Risk tolerance level"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\ude9a **Supply Chain Security** - Comprehensive supply chain risk assessment with vendor analysis, dependency scanning, and third-party security validation.",
      "safe_mode": false,
      "tags": [
        "chain",
        "security",
        "supply"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for supply_chain_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "privacy_engineering",
      "category": "privacy",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "privacy_engineering",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Privacy engineering action"
        },
        {
          "name": "data_type",
          "type": "string",
          "required": false,
          "description": "Type of data to protect"
        },
        {
          "name": "regulation",
          "type": "string",
          "required": false,
          "description": "Privacy regulation to comply with"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd12 **Privacy Engineering** - Advanced privacy protection with data minimization, anonymization, and privacy-by-design implementation.",
      "safe_mode": false,
      "tags": [
        "engineering",
        "privacy"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for privacy_engineering')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "incident_commander",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "incident_commander",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Incident command action"
        },
        {
          "name": "incident_type",
          "type": "string",
          "required": false,
          "description": "Type of security incident"
        },
        {
          "name": "severity",
          "type": "string",
          "required": false,
          "description": "Incident severity level"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udea8 **Incident Commander** - Advanced incident response coordination with automated workflows, stakeholder communication, and recovery orchestration.",
      "safe_mode": false,
      "tags": [
        "commander",
        "incident",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for incident_commander')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "security_metrics_dashboard",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "security_metrics_dashboard",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Security metrics action"
        },
        {
          "name": "metric_type",
          "type": "string",
          "required": false,
          "description": "Type of security metric"
        },
        {
          "name": "timeframe",
          "type": "string",
          "required": false,
          "description": "Analysis timeframe"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udcca **Security Metrics Dashboard** - Comprehensive security KPI tracking with real-time metrics, trend analysis, and executive reporting.",
      "safe_mode": false,
      "tags": [
        "dashboard",
        "metrics",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for security_metrics_dashboard')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "crime_reporter_unified",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "crime_reporter_unified",
      "args": [
        {
          "name": "mode",
          "type": "enum",
          "required": false,
          "description": "Operation mode: 'command' for structured commands, 'natural_language' for conversational interface, 'test' for configuration testing"
        },
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Crime reporter command: searchJurisdiction, prepareReport, fileReport, previewReport, getStatus, exportCase, testConfiguration"
        },
        {
          "name": "parameters",
          "type": "object",
          "required": false,
          "description": "Command parameters"
        },
        {
          "name": "naturalLanguageCommand",
          "type": "string",
          "required": false,
          "description": "Natural language command for crime reporting (e.g., 'Report a theft in Minneapolis with these photos, anonymously"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udea8 **Unified Crime Reporter Tool** - Comprehensive crime reporting with jurisdiction resolution, case preparation, automated filing, natural language processing, and configuration testing. Includes privacy protection, audit logging, and legal compliance features.",
      "safe_mode": false,
      "tags": [
        "crime",
        "general",
        "reporter",
        "unified"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for crime_reporter_unified')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "zero_day_exploiter_unified",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "zero_day_exploiter_unified",
      "args": [
        {
          "name": "mode",
          "type": "enum",
          "required": false,
          "description": "Operation mode: 'command' for structured commands, 'natural_language' for conversational interface, 'test' for configuration testing"
        },
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Zero-day exploiter command: research, generatePoC, startTesting, getSessionStatus, cancelSession, getStatus, acknowledgeLegal, getSecurityWarnings, getAvailableEnvironments, getAvailableTemplates, getAuditLog"
        },
        {
          "name": "parameters",
          "type": "object",
          "required": false,
          "description": "Command parameters"
        },
        {
          "name": "naturalLanguageCommand",
          "type": "string",
          "required": false,
          "description": "Natural language command for zero-day exploitation (e.g., 'Research critical vulnerabilities from last week', 'Generate PoC for CVE-2025-55234"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udd0d **Unified Zero-Day Exploiter Tool** - Research zero-day vulnerabilities, generate PoCs, conduct ethical security testing, and natural language processing with comprehensive legal compliance. Includes safe mode protection, audit logging, and authorization checks.",
      "safe_mode": false,
      "tags": [
        "day",
        "exploiter",
        "general",
        "unified",
        "zero"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for zero_day_exploiter_unified')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "advanced_grep",
      "category": "file_system",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "advanced_grep",
      "args": [
        {
          "name": "pattern",
          "type": "string",
          "required": true,
          "description": "The search pattern. Can be literal text or regex pattern."
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "The directory or file path to search in. Examples: '.', './src', '/home/user/documents', 'C:\\\\Users\\\\User\\\\Projects'."
        },
        {
          "name": "caseInsensitive",
          "type": "boolean",
          "required": false,
          "description": "Case-insensitive search"
        },
        {
          "name": "wholeWord",
          "type": "boolean",
          "required": false,
          "description": "Match whole words only"
        },
        {
          "name": "regex",
          "type": "boolean",
          "required": false,
          "description": "Treat pattern as regex"
        },
        {
          "name": "contextBefore",
          "type": "number",
          "required": false,
          "description": "Number of lines to show before each match (0-10)"
        },
        {
          "name": "contextAfter",
          "type": "number",
          "required": false,
          "description": "Number of lines to show after each match (0-10)"
        },
        {
          "name": "maxFileSize",
          "type": "number",
          "required": false,
          "description": "Maximum file size to search in bytes (default: 10MB)"
        },
        {
          "name": "encoding",
          "type": "string",
          "required": false,
          "description": "File encoding: 'auto', 'utf8', 'utf16le', 'latin1', 'cp1252'"
        },
        {
          "name": "outputFormat",
          "type": "enum",
          "required": false,
          "description": "Output format"
        },
        {
          "name": "colorOutput",
          "type": "boolean",
          "required": false,
          "description": "Enable colored output highlighting"
        },
        {
          "name": "showLineNumbers",
          "type": "boolean",
          "required": false,
          "description": "Show line numbers"
        },
        {
          "name": "showFilename",
          "type": "boolean",
          "required": false,
          "description": "Show filename for each match"
        },
        {
          "name": "recursive",
          "type": "boolean",
          "required": false,
          "description": "Search subdirectories recursively"
        },
        {
          "name": "includePattern",
          "type": "array",
          "required": false,
          "description": "File patterns to include (e.g., ['*.js', '*.ts'])"
        },
        {
          "name": "excludePattern",
          "type": "array",
          "required": false,
          "description": "File patterns to exclude (e.g., ['node_modules', '*.log'])"
        },
        {
          "name": "maxDepth",
          "type": "number",
          "required": false,
          "description": "Maximum directory depth (0 = unlimited)"
        },
        {
          "name": "limitResults",
          "type": "number",
          "required": false,
          "description": "Maximum number of results to return (0 = unlimited)"
        },
        {
          "name": "binaryFiles",
          "type": "enum",
          "required": false,
          "description": "How to handle binary files"
        },
        {
          "name": "followSymlinks",
          "type": "boolean",
          "required": false,
          "description": "Follow symbolic links"
        },
        {
          "name": "performanceMode",
          "type": "enum",
          "required": false,
          "description": "Performance vs accuracy trade-off"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd0d **Advanced Grep Tool** - Enhanced text search with cross-platform support, contextual display, encoding detection, and performance optimizations. Based on user requests for improved grep functionality.",
      "safe_mode": false,
      "tags": [
        "advanced",
        "file_system",
        "grep"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for advanced_grep')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/file_system/advanced_grep.ts"
    },
    {
      "name": "ai_adversarial_prompt",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ai_adversarial_prompt",
      "args": [
        {
          "name": "mode",
          "type": "enum",
          "required": true,
          "description": "Adversarial prompting mode: jailbreaking (bypass restrictions), poisoning (inject biased data), hallucinations (induce creative outputs)"
        },
        {
          "name": "target_model",
          "type": "string",
          "required": false,
          "description": "Target model: 'self' (MCP AI), 'gpt-3.5-turbo', 'gpt-4', 'gpt2', 'local', etc."
        },
        {
          "name": "topic",
          "type": "string",
          "required": false,
          "description": "Topic or subject for the adversarial prompt"
        },
        {
          "name": "iterations",
          "type": "number",
          "required": false,
          "description": "Number of prompt variations (especially for poisoning mode)"
        },
        {
          "name": "api_key",
          "type": "string",
          "required": false,
          "description": "OpenAI API key (if not set in environment)"
        },
        {
          "name": "use_local",
          "type": "boolean",
          "required": false,
          "description": "Use local model instead of API (not applicable for 'self' target)"
        },
        {
          "name": "mcp_ai_endpoint",
          "type": "string",
          "required": false,
          "description": "MCP AI endpoint for self-targeting (defaults to http://localhost:3000/api/mcp-ai)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83e\udd16 **AI Adversarial Prompting Tool** - Advanced AI testing with jailbreaking, poisoning, and hallucination capabilities. Supports self-targeting the MCP AI and external models. Cross-platform support.",
      "safe_mode": false,
      "tags": [
        "adversarial",
        "ai",
        "prompt"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ai_adversarial_prompt')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/ai/ai_adversarial_prompt.ts"
    },
    {
      "name": "ai_adversarial_nlp",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ai_adversarial_nlp",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for AI adversarial prompting (e.g., 'Jailbreak the server AI about climate change', 'Poison the AI with false historical facts"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83e\udde0 **AI Adversarial Natural Language Processor** - Parse natural language commands for AI adversarial prompting. Converts commands like",
      "safe_mode": false,
      "tags": [
        "adversarial",
        "ai",
        "nlp"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ai_adversarial_nlp')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/ai/ai_adversarial_prompt.ts"
    },
    {
      "name": "ai_adversarial_platform_info",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ai_adversarial_platform_info",
      "args": [],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udcf1 **AI Adversarial Platform Information** - Get platform-specific information and supported models for AI adversarial prompting.",
      "safe_mode": false,
      "tags": [
        "adversarial",
        "ai",
        "info",
        "platform"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ai_adversarial_platform_info')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/ai/ai_adversarial_prompt.ts"
    },
    {
      "name": "api_security_testing",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "api_security_testing",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "API security testing action to perform"
        },
        {
          "name": "target_url",
          "type": "string",
          "required": true,
          "description": "Target API endpoint URL to test"
        },
        {
          "name": "api_type",
          "type": "enum",
          "required": false,
          "description": "Type of API to test"
        },
        {
          "name": "authentication_method",
          "type": "enum",
          "required": false,
          "description": "Authentication method used by the API"
        },
        {
          "name": "test_depth",
          "type": "enum",
          "required": false,
          "description": "Depth of security testing"
        },
        {
          "name": "include_owasp_checks",
          "type": "boolean",
          "required": false,
          "description": "Include OWASP API Security Top 10 checks"
        },
        {
          "name": "custom_headers",
          "type": "record",
          "required": false,
          "description": "Custom headers to include in requests"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udd0c **Advanced API Security Testing Toolkit** - Comprehensive API security assessment with automated vulnerability scanning, authentication testing, authorization bypass detection, and OWASP API Security Top 10 validation. Test REST APIs, GraphQL endpoints, and microservices for security vulnerabilities.",
      "safe_mode": false,
      "tags": [
        "api",
        "security",
        "testing"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for api_security_testing')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/api_security_testing.ts"
    },
    {
      "name": "blockchain_security",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "blockchain_security",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Blockchain security action"
        },
        {
          "name": "blockchain_type",
          "type": "enum",
          "required": true,
          "description": "Type of blockchain"
        },
        {
          "name": "contract_address",
          "type": "string",
          "required": false,
          "description": "Smart contract address to analyze"
        },
        {
          "name": "network",
          "type": "string",
          "required": false,
          "description": "Network to analyze (mainnet, testnet)"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Blockchain security analysis and vulnerability assessment",
      "safe_mode": false,
      "tags": [
        "blockchain",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for blockchain_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/blockchain_security.ts"
    },
    {
      "name": "bloodhound_ad",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "bloodhound_ad",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "BloodHound AD action to perform"
        },
        {
          "name": "neo4j_host",
          "type": "string",
          "required": false,
          "description": "Neo4j database host (default: localhost)"
        },
        {
          "name": "neo4j_port",
          "type": "number",
          "required": false,
          "description": "Neo4j database port (default: 7687)"
        },
        {
          "name": "neo4j_user",
          "type": "string",
          "required": false,
          "description": "Neo4j username (default: neo4j)"
        },
        {
          "name": "neo4j_password",
          "type": "string",
          "required": false,
          "description": "Neo4j password"
        },
        {
          "name": "domain",
          "type": "string",
          "required": false,
          "description": "Target domain for analysis"
        },
        {
          "name": "username",
          "type": "string",
          "required": false,
          "description": "Username for data collection"
        },
        {
          "name": "password",
          "type": "string",
          "required": false,
          "description": "Password for data collection"
        },
        {
          "name": "dc_ip",
          "type": "string",
          "required": false,
          "description": "Domain controller IP address"
        },
        {
          "name": "collection_method",
          "type": "enum",
          "required": false,
          "description": "Data collection method"
        },
        {
          "name": "query_type",
          "type": "enum",
          "required": false,
          "description": "Query type"
        },
        {
          "name": "cypher_query",
          "type": "string",
          "required": false,
          "description": "Custom Cypher query"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode to prevent actual data collection (disabled by default for full functionality)"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced BloodHound Active Directory attack path analysis and enumeration tool. Provides comprehensive AD reconnaissance capabilities including user enumeration, group analysis, privilege escalation paths, lateral movement opportunities, and attack path visualization. Supports cross-platform operation with natural language interface for intuitive AD security assessment.",
      "safe_mode": true,
      "tags": [
        "ad",
        "bloodhound",
        "specops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for bloodhound_ad')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/penetration/bloodhound_ad.ts"
    },
    {
      "name": "bluetooth_device_manager",
      "category": "bluetooth",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "bluetooth_device_manager",
      "args": [],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced Bluetooth device management and configuration toolkit",
      "safe_mode": false,
      "tags": [
        "bluetooth",
        "device",
        "manager"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for bluetooth_device_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/bluetooth/bluetooth_device_manager.ts"
    },
    {
      "name": "bluetooth_hacking",
      "category": "bluetooth",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "bluetooth_hacking",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Bluetooth hacking action to perform"
        },
        {
          "name": "target_device",
          "type": "string",
          "required": false,
          "description": "Target Bluetooth device MAC address or name"
        },
        {
          "name": "device_type",
          "type": "enum",
          "required": false,
          "description": "Type of Bluetooth device to target"
        },
        {
          "name": "bluetoothInterface",
          "type": "string",
          "required": false,
          "description": "Bluetooth bluetoothInterface to use"
        },
        {
          "name": "attack_duration",
          "type": "number",
          "required": false,
          "description": "Attack duration in seconds"
        },
        {
          "name": "payload",
          "type": "string",
          "required": false,
          "description": "Custom payload or message to send"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path for captured data"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced Bluetooth security penetration testing and exploitation toolkit. Perform comprehensive Bluetooth device assessments, bypass pairing mechanisms, extract sensitive data, execute bluejacking/bluesnarfing/bluebugging attacks, and analyze Bluetooth Low Energy (BLE) devices. Supports all Bluetooth versions with cross-platform compatibility.",
      "safe_mode": false,
      "tags": [
        "bluetooth",
        "hacking"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for bluetooth_hacking')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/bluetooth/bluetooth_hacking.ts"
    },
    {
      "name": "bluetooth_security_toolkit",
      "category": "bluetooth",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "bluetooth_security_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Security testing action to perform"
        },
        {
          "name": "target_device",
          "type": "string",
          "required": false,
          "description": "Target Bluetooth device address"
        },
        {
          "name": "test_type",
          "type": "enum",
          "required": false,
          "description": "Type of security test"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Bluetooth security testing and vulnerability assessment",
      "safe_mode": false,
      "tags": [
        "bluetooth",
        "security",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for bluetooth_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/bluetooth/bluetooth_security_toolkit.ts"
    },
    {
      "name": "browser_control",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "browser_control",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Browser action to perform. 'launch_browser' starts browser, 'navigate' goes to URL, 'close_browser' closes browser, 'screenshot' captures screen."
        },
        {
          "name": "browser",
          "type": "enum",
          "required": false,
          "description": "Browser to control. 'chrome' for Google Chrome, 'firefox' for Mozilla Firefox, 'safari' for Safari (macOS), 'edge' for Microsoft Edge, 'auto' for system default."
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "URL to navigate to. Examples: 'https://google.com', 'https://github.com'. Required for navigate action."
        },
        {
          "name": "screenshot_path",
          "type": "string",
          "required": false,
          "description": "File path to save screenshots. Examples: './screenshot.png', 'C:\\\\Screenshots\\\\page.png'."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Cross-platform browser control tool. Launch browsers and navigate to URLs across Chrome, Firefox, Safari, Edge on all operating systems.",
      "safe_mode": false,
      "tags": [
        "browser",
        "control",
        "general"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for browser_control')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "calculator",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "calculator",
      "args": [
        {
          "name": "expression",
          "type": "string",
          "required": true,
          "description": "The mathematical expression to evaluate. Supports basic arithmetic, scientific functions, and complex expressions. Examples: '2 + 2', 'sin(45)', 'sqrt(16)', '2^8', 'log(100)', '5!', '2 * (3 + 4)'."
        },
        {
          "name": "precision",
          "type": "number",
          "required": false,
          "description": "The number of decimal places to display in the result. Examples: 2 for currency, 5 for scientific calculations, 10 for high precision. Range: 0-15 decimal places."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Mathematical calculator with basic functions",
      "safe_mode": false,
      "tags": [
        "calculator",
        "general"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for calculator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "captcha_defeating",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "captcha_defeating",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "CAPTCHA action to perform"
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "URL containing the CAPTCHA"
        },
        {
          "name": "image_path",
          "type": "string",
          "required": false,
          "description": "Path to CAPTCHA image file"
        },
        {
          "name": "captcha_type",
          "type": "enum",
          "required": false,
          "description": "Type of CAPTCHA"
        },
        {
          "name": "method",
          "type": "enum",
          "required": false,
          "description": "Solving method to use"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds"
        },
        {
          "name": "save_screenshot",
          "type": "boolean",
          "required": false,
          "description": "Save screenshot of the CAPTCHA"
        },
        {
          "name": "confidence_threshold",
          "type": "number",
          "required": false,
          "description": "Minimum confidence threshold for automated solving"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced CAPTCHA detection, solving, and bypassing toolkit with multiple solving methods including OCR, AI, and manual intervention",
      "safe_mode": false,
      "tags": [
        "captcha",
        "defeating",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for captcha_defeating')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/captcha_defeating.ts"
    },
    {
      "name": "cellular_triangulate",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cellular_triangulate",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Cellular triangulation action to perform"
        },
        {
          "name": "modem",
          "type": "string",
          "required": false,
          "description": "Cellular modem interface (e.g., 'wwan0', 'Modem0"
        },
        {
          "name": "mode",
          "type": "enum",
          "required": false,
          "description": "Triangulation mode: rssi (signal strength), tdoa (time difference), gps (GPS coordinates), ss7 (SS7 direct network query)"
        },
        {
          "name": "towers",
          "type": "string",
          "required": false,
          "description": "Comma-separated Cell IDs or 'auto' for scanning"
        },
        {
          "name": "api_key",
          "type": "string",
          "required": false,
          "description": "OpenCellID or Google Geolocation API key"
        },
        {
          "name": "max_towers",
          "type": "number",
          "required": false,
          "description": "Maximum towers to use for triangulation (minimum 3)"
        },
        {
          "name": "phone_number",
          "type": "string",
          "required": false,
          "description": "Target phone number for SMS triggering (e.g., '+1234567890"
        },
        {
          "name": "tower_data",
          "type": "array",
          "required": false,
          "description": "Remote tower data from target device"
        },
        {
          "name": "gps_data",
          "type": "object",
          "required": false,
          "description": "GPS coordinates from webpage"
        },
        {
          "name": "sms_method",
          "type": "enum",
          "required": false,
          "description": "SMS method: auto (platform-specific), phonelink (Windows), messages (macOS), twilio (fallback)"
        },
        {
          "name": "twilio_sid",
          "type": "string",
          "required": false,
          "description": "Twilio Account SID"
        },
        {
          "name": "twilio_token",
          "type": "string",
          "required": false,
          "description": "Twilio Auth Token"
        },
        {
          "name": "twilio_number",
          "type": "string",
          "required": false,
          "description": "Twilio phone number"
        },
        {
          "name": "ss7_pc",
          "type": "string",
          "required": false,
          "description": "SS7 Point Code (e.g., '12345"
        },
        {
          "name": "ss7_gt",
          "type": "string",
          "required": false,
          "description": "SS7 Global Title (e.g., '1234567890"
        },
        {
          "name": "ss7_hlr",
          "type": "string",
          "required": false,
          "description": "HLR address for SS7 queries (e.g., 'hlr.example.com"
        },
        {
          "name": "nl_command",
          "type": "string",
          "required": false,
          "description": "Natural language command to parse (e.g., 'Find my location with cell towers"
        },
        {
          "name": "auto_confirm",
          "type": "boolean",
          "required": false,
          "description": "Skip confirmation prompt (requires proper authorization)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udce1 **Cellular Triangulation Tool** - Location estimation using cellular tower signals with RSSI and TDOA triangulation, SS7 direct network queries, or GPS coordinates from web browsers. Queries tower locations via OpenCellID API and performs local triangulation for GPS-free location services. Supports cross-platform operation with natural language interface, SS7 integration, and website-based data collection.",
      "safe_mode": false,
      "tags": [
        "cellular",
        "triangulate",
        "wireless"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cellular_triangulate')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/wireless/cellular_triangulate.ts"
    },
    {
      "name": "chart_generator",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "chart_generator",
      "args": [
        {
          "name": "chart_type",
          "type": "enum",
          "required": true,
          "description": "Type of chart to generate"
        },
        {
          "name": "data",
          "type": "array",
          "required": true,
          "description": "Data value for the chart"
        },
        {
          "name": "title",
          "type": "string",
          "required": false,
          "description": "Chart title"
        },
        {
          "name": "x_label",
          "type": "string",
          "required": false,
          "description": "X-axis label"
        },
        {
          "name": "y_label",
          "type": "string",
          "required": false,
          "description": "Y-axis label"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format (defaults to SVG)"
        },
        {
          "name": "animated",
          "type": "boolean",
          "required": false,
          "description": "Enable animations (defaults to true)"
        },
        {
          "name": "colors",
          "type": "array",
          "required": false,
          "description": "Custom color palette"
        },
        {
          "name": "width",
          "type": "number",
          "required": false,
          "description": "Chart width in pixels"
        },
        {
          "name": "height",
          "type": "number",
          "required": false,
          "description": "Chart height in pixels"
        },
        {
          "name": "theme",
          "type": "enum",
          "required": false,
          "description": "Chart theme"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced SVG chart and graph generation with animations from data",
      "safe_mode": false,
      "tags": [
        "chart",
        "generator",
        "utilities"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for chart_generator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/utilities/chart_generator.ts"
    },
    {
      "name": "cloud_infrastructure_manager",
      "category": "cloud",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cloud_infrastructure_manager",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Infrastructure management action to perform"
        },
        {
          "name": "cloud_provider",
          "type": "enum",
          "required": true,
          "description": "Cloud provider to manage"
        },
        {
          "name": "resource_type",
          "type": "enum",
          "required": false,
          "description": "Type of resource to manage"
        },
        {
          "name": "region",
          "type": "string",
          "required": false,
          "description": "Cloud region for operations"
        },
        {
          "name": "resource_config",
          "type": "object",
          "required": false,
          "description": "Resource configuration parameters"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Cloud infrastructure management and monitoring",
      "safe_mode": false,
      "tags": [
        "cloud",
        "infrastructure",
        "manager"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cloud_infrastructure_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/cloud/cloud_infrastructure_manager.ts"
    },
    {
      "name": "cloud_security_assessment",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cloud_security_assessment",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Cloud security assessment action to perform"
        },
        {
          "name": "cloud_provider",
          "type": "enum",
          "required": true,
          "description": "Cloud provider to assess"
        },
        {
          "name": "service_type",
          "type": "enum",
          "required": false,
          "description": "Specific cloud service to assess"
        },
        {
          "name": "compliance_framework",
          "type": "enum",
          "required": false,
          "description": "Compliance framework to check against"
        },
        {
          "name": "scan_depth",
          "type": "enum",
          "required": false,
          "description": "Depth of security assessment"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        },
        {
          "name": "include_recommendations",
          "type": "boolean",
          "required": false,
          "description": "Include security recommendations"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\u2601\ufe0f **Comprehensive Cloud Security Assessment Toolkit** - Advanced cloud security evaluation with multi-cloud support, configuration scanning, compliance validation, and threat detection. Assess AWS, Azure, GCP, and other cloud platforms for security misconfigurations, compliance violations, and potential vulnerabilities.",
      "safe_mode": false,
      "tags": [
        "assessment",
        "cloud",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cloud_security_assessment')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/cloud_security_assessment.ts"
    },
    {
      "name": "cloud_security_toolkit",
      "category": "cloud",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cloud_security_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Cloud security action to perform"
        },
        {
          "name": "cloud_provider",
          "type": "enum",
          "required": true,
          "description": "Cloud provider to assess"
        },
        {
          "name": "service_type",
          "type": "enum",
          "required": false,
          "description": "Specific cloud service to assess"
        },
        {
          "name": "compliance_framework",
          "type": "enum",
          "required": false,
          "description": "Compliance framework to check"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced cloud security assessment and compliance toolkit with comprehensive multi-cloud support, automated security scanning, and regulatory compliance validation",
      "safe_mode": false,
      "tags": [
        "cloud",
        "security",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cloud_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/cloud/cloud_security_toolkit.ts"
    },
    {
      "name": "cobalt_strike",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cobalt_strike",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Cobalt Strike action to perform"
        },
        {
          "name": "teamserver_host",
          "type": "string",
          "required": false,
          "description": "Team server host IP"
        },
        {
          "name": "teamserver_port",
          "type": "number",
          "required": false,
          "description": "Team server port (default: 50050)"
        },
        {
          "name": "client_password",
          "type": "string",
          "required": false,
          "description": "Client connection password"
        },
        {
          "name": "beacon_id",
          "type": "string",
          "required": false,
          "description": "Beacon ID for interaction"
        },
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Command to execute on beacon"
        },
        {
          "name": "file_path",
          "type": "string",
          "required": false,
          "description": "File path for upload/download"
        },
        {
          "name": "target_host",
          "type": "string",
          "required": false,
          "description": "Target host for lateral movement"
        },
        {
          "name": "listener_name",
          "type": "string",
          "required": false,
          "description": "Listener name"
        },
        {
          "name": "listener_type",
          "type": "enum",
          "required": false,
          "description": "Listener type"
        },
        {
          "name": "payload_type",
          "type": "enum",
          "required": false,
          "description": "Payload type"
        },
        {
          "name": "profile_path",
          "type": "string",
          "required": false,
          "description": "Malleable C2 profile path"
        },
        {
          "name": "script_path",
          "type": "string",
          "required": false,
          "description": "Aggressor script path"
        },
        {
          "name": "report_format",
          "type": "enum",
          "required": false,
          "description": "Report format"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode to prevent actual attacks (disabled by default for full functionality)"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced Cobalt Strike integration for sophisticated threat simulation and red team operations. Provides comprehensive attack simulation capabilities including beacon management, lateral movement, persistence mechanisms, and advanced evasion techniques. Supports cross-platform operation with natural language interface for intuitive red team operations.",
      "safe_mode": true,
      "tags": [
        "cobalt",
        "specops",
        "strike"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cobalt_strike')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/penetration/cobalt_strike.ts"
    },
    {
      "name": "competitive_intelligence",
      "category": "competitive_intelligence",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "competitive_intelligence",
      "args": [
        {
          "name": "action",
          "type": "string",
          "required": true,
          "description": "Competitive intelligence action: addCompany, removeCompany, scrapeHomepage, analyzeSitemap, runAnalysis, viewData, listCompanies, generateReport"
        },
        {
          "name": "companyName",
          "type": "string",
          "required": false,
          "description": "Company name for the operation"
        },
        {
          "name": "homepageUrl",
          "type": "string",
          "required": false,
          "description": "Homepage URL to scrape"
        },
        {
          "name": "sitemapUrl",
          "type": "string",
          "required": false,
          "description": "Sitemap URL to analyze"
        },
        {
          "name": "keywords",
          "type": "array",
          "required": false,
          "description": "Keywords for sitemap filtering"
        },
        {
          "name": "categories",
          "type": "array",
          "required": false,
          "description": "Categories to include (features, pricing, products, customers, faq, api, all)"
        },
        {
          "name": "prompt",
          "type": "string",
          "required": false,
          "description": "Analysis prompt"
        },
        {
          "name": "dataSource",
          "type": "string",
          "required": false,
          "description": "Data source for analysis (homepage, all, or page:URL)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd0d **Competitive Intelligence Tool** - Comprehensive competitor analysis with web scraping, sitemap analysis, and competitive insights generation. Based on the original Competitive Intelligence CLI by Harshit Jain (@qb-harshit).",
      "safe_mode": false,
      "tags": [
        "competitive",
        "competitive_intelligence",
        "intelligence"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for competitive_intelligence')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/competitive_intelligence/tool.ts"
    },
    {
      "name": "competitive_intelligence_nl",
      "category": "competitive_intelligence",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "competitive_intelligence_nl",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for competitive intelligence (e.g., 'Add company Stripe', 'Scrape homepage for Stripe https://stripe.com', 'Analyze features for Stripe"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd0d **Competitive Intelligence Natural Language Interface** - Process natural language commands for competitive intelligence operations. Based on the original Competitive Intelligence CLI by Harshit Jain (@qb-harshit).",
      "safe_mode": false,
      "tags": [
        "competitive",
        "competitive_intelligence",
        "intelligence",
        "nl"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for competitive_intelligence_nl')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/competitive_intelligence/tool.ts"
    },
    {
      "name": "competitive_intelligence_test",
      "category": "competitive_intelligence",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "competitive_intelligence_test",
      "args": [
        {
          "name": "random_string",
          "type": "string",
          "required": true,
          "description": "Dummy parameter for no-parameter tools"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83e\uddea **Competitive Intelligence Configuration Test** - Test competitive intelligence tool configuration and connectivity. Includes attribution to original creator.",
      "safe_mode": false,
      "tags": [
        "competitive",
        "competitive_intelligence",
        "intelligence",
        "test"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for competitive_intelligence_test')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/competitive_intelligence/tool.ts"
    },
    {
      "name": "compliance_assessment",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "compliance_assessment",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Compliance action"
        },
        {
          "name": "framework",
          "type": "enum",
          "required": true,
          "description": "Compliance framework"
        },
        {
          "name": "scope",
          "type": "string",
          "required": true,
          "description": "Assessment scope"
        },
        {
          "name": "evidence_path",
          "type": "string",
          "required": false,
          "description": "Path to evidence files"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Regulatory compliance assessment and reporting",
      "safe_mode": false,
      "tags": [
        "assessment",
        "compliance",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for compliance_assessment')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/compliance_assessment.ts"
    },
    {
      "name": "cron_job_manager",
      "category": "system",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "cron_job_manager",
      "args": [],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Cross-platform cron job and scheduled task management",
      "safe_mode": false,
      "tags": [
        "cron",
        "job",
        "manager",
        "system"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for cron_job_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/system/cron_job_manager.ts"
    },
    {
      "name": "data_analysis",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "data_analysis",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Analysis action to perform"
        },
        {
          "name": "data_source",
          "type": "string",
          "required": true,
          "description": "Source of data to analyze"
        },
        {
          "name": "analysis_type",
          "type": "enum",
          "required": true,
          "description": "Type of analysis"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced data analysis and statistical processing",
      "safe_mode": false,
      "tags": [
        "analysis",
        "data",
        "utilities"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for data_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/utilities/data_analysis.ts"
    },
    {
      "name": "data_analyzer",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "data_analyzer",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Data analysis action to perform"
        },
        {
          "name": "data",
          "type": "array",
          "required": true,
          "description": "Array of numerical data to analyze"
        },
        {
          "name": "analysis_type",
          "type": "enum",
          "required": false,
          "description": "Type of analysis to perform"
        },
        {
          "name": "options",
          "type": "object",
          "required": false,
          "description": "Analysis options and parameters"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Data analysis and statistical processing",
      "safe_mode": false,
      "tags": [
        "analyzer",
        "data",
        "utilities"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for data_analyzer')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/utilities/data_analyzer.ts"
    },
    {
      "name": "database_security_toolkit",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "database_security_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Database security action to perform"
        },
        {
          "name": "database_type",
          "type": "enum",
          "required": true,
          "description": "Type of database to test"
        },
        {
          "name": "connection_string",
          "type": "string",
          "required": false,
          "description": "Database connection string (for authorized testing only)"
        },
        {
          "name": "test_depth",
          "type": "enum",
          "required": false,
          "description": "Depth of security testing"
        },
        {
          "name": "include_compliance_checks",
          "type": "boolean",
          "required": false,
          "description": "Include compliance framework checks"
        },
        {
          "name": "compliance_framework",
          "type": "enum",
          "required": false,
          "description": "Compliance framework to check against"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\uddc4\ufe0f **Comprehensive Database Security Toolkit** - Advanced database security assessment with vulnerability scanning, SQL injection testing, access control auditing, encryption validation, and compliance checking. Support for SQL, NoSQL, and cloud databases with automated security testing.",
      "safe_mode": false,
      "tags": [
        "database",
        "security",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for database_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/database_security_toolkit.ts"
    },
    {
      "name": "delete_emails",
      "category": "email",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "delete_emails",
      "args": [
        {
          "name": "imap_server",
          "type": "string",
          "required": true,
          "description": "IMAP server address"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "Email username"
        },
        {
          "name": "password",
          "type": "string",
          "required": true,
          "description": "Email password"
        },
        {
          "name": "email_ids",
          "type": "array",
          "required": true,
          "description": "Array of email IDs to delete"
        },
        {
          "name": "folder",
          "type": "string",
          "required": false,
          "description": "Email folder containing emails"
        },
        {
          "name": "permanent",
          "type": "boolean",
          "required": false,
          "description": "Permanently delete emails (bypass trash)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Email deletion and management",
      "safe_mode": false,
      "tags": [
        "delete",
        "email",
        "emails"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for delete_emails')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/email/delete_emails.ts"
    },
    {
      "name": "dice_rolling",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "dice_rolling",
      "args": [
        {
          "name": "dice",
          "type": "string",
          "required": true,
          "description": "Dice notation (e.g., 'd6', '3d20', '2d10+5', 'd100"
        },
        {
          "name": "count",
          "type": "number",
          "required": false,
          "description": "Number of times to roll (default: 1)"
        },
        {
          "name": "modifier",
          "type": "number",
          "required": false,
          "description": "Additional modifier to apply to the final result (default: 0)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Roll dice with various configurations and get random numbers. Supports any sided dice, multiple dice, and modifiers.",
      "safe_mode": false,
      "tags": [
        "dice",
        "general",
        "rolling"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for dice_rolling')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "docker_management",
      "category": "virtualization",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "docker_management",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Docker management action to perform"
        },
        {
          "name": "container_name",
          "type": "string",
          "required": false,
          "description": "Name or ID of the container"
        },
        {
          "name": "image_name",
          "type": "string",
          "required": false,
          "description": "Name of the Docker image"
        },
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Command to execute in container"
        },
        {
          "name": "ports",
          "type": "array",
          "required": false,
          "description": "Port mappings (e.g., ['8080:80'])"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Docker container and image management",
      "safe_mode": false,
      "tags": [
        "docker",
        "management",
        "virtualization"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for docker_management')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/virtualization/docker_management.ts"
    },
    {
      "name": "download_file",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "download_file",
      "args": [
        {
          "name": "url",
          "type": "string",
          "required": true,
          "description": "The URL of the file to download. Must be a valid HTTP/HTTPS URL. Examples: 'https://example.com/file.zip', 'http://downloads.example.org/document.pdf'."
        },
        {
          "name": "outputPath",
          "type": "string",
          "required": false,
          "description": "Optional custom filename for the downloaded file. Examples: 'myfile.zip', './downloads/document.pdf', 'C:\\\\Users\\\\User\\\\Downloads\\\\file.txt'. If not specified, uses the original filename from the URL."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Download a file from URL",
      "safe_mode": false,
      "tags": [
        "download",
        "file",
        "general"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for download_file')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "elevated_permissions_manager",
      "category": "system",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "elevated_permissions_manager",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Elevated permissions management action to perform"
        },
        {
          "name": "tool_name",
          "type": "string",
          "required": false,
          "description": "Tool name for permission operations"
        },
        {
          "name": "command",
          "type": "string",
          "required": false,
          "description": "Command to check for safety"
        },
        {
          "name": "enabled",
          "type": "boolean",
          "required": false,
          "description": "Enable/disable setting for boolean operations"
        },
        {
          "name": "config_data",
          "type": "string",
          "required": false,
          "description": "Configuration data for import operations"
        },
        {
          "name": "export_format",
          "type": "enum",
          "required": false,
          "description": "Export format for configuration"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udd10 **Advanced Elevated Permissions Manager** - Comprehensive security and control system for MCP God Mode that allows users to manage which tools can execute with elevated privileges (admin/root/sudo) across all platforms. Provides granular control over elevated permissions, dangerous command blocking, and security settings.",
      "safe_mode": true,
      "tags": [
        "elevated",
        "manager",
        "permissions",
        "system"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for elevated_permissions_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/system/elevated_permissions_manager.ts"
    },
    {
      "name": "email_security_suite",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "email_security_suite",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Email security action to perform"
        },
        {
          "name": "target_domain",
          "type": "string",
          "required": false,
          "description": "Target domain for email security testing"
        },
        {
          "name": "email_address",
          "type": "string",
          "required": false,
          "description": "Email address to test"
        },
        {
          "name": "test_type",
          "type": "enum",
          "required": false,
          "description": "Type of email security test"
        },
        {
          "name": "include_phishing_tests",
          "type": "boolean",
          "required": false,
          "description": "Include phishing simulation tests"
        },
        {
          "name": "scan_attachments",
          "type": "boolean",
          "required": false,
          "description": "Scan email attachments for malware"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udce7 **Comprehensive Email Security Suite** - Advanced email security testing and analysis with phishing simulation, email spoofing detection, attachment malware scanning, DKIM/SPF/DMARC validation, and email header analysis. Protect against email-based attacks and ensure email security compliance.",
      "safe_mode": false,
      "tags": [
        "email",
        "security",
        "suite"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for email_security_suite')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/email_security_suite.ts"
    },
    {
      "name": "empire_powershell",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "empire_powershell",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Empire PowerShell action to perform"
        },
        {
          "name": "empire_host",
          "type": "string",
          "required": false,
          "description": "Empire server host IP"
        },
        {
          "name": "empire_port",
          "type": "number",
          "required": false,
          "description": "Empire server port (default: 1337)"
        },
        {
          "name": "agent_id",
          "type": "string",
          "required": false,
          "description": "Agent ID for interaction"
        },
        {
          "name": "module_name",
          "type": "string",
          "required": false,
          "description": "Module name to execute"
        },
        {
          "name": "listener_name",
          "type": "string",
          "required": false,
          "description": "Listener name"
        },
        {
          "name": "listener_type",
          "type": "enum",
          "required": false,
          "description": "Listener type"
        },
        {
          "name": "stager_type",
          "type": "enum",
          "required": false,
          "description": "Stager type"
        },
        {
          "name": "launcher_type",
          "type": "enum",
          "required": false,
          "description": "Launcher type"
        },
        {
          "name": "target_host",
          "type": "string",
          "required": false,
          "description": "Target host for lateral movement"
        },
        {
          "name": "file_path",
          "type": "string",
          "required": false,
          "description": "File path for upload/download"
        },
        {
          "name": "script_content",
          "type": "string",
          "required": false,
          "description": "Custom PowerShell script content"
        },
        {
          "name": "module_options",
          "type": "record",
          "required": false,
          "description": "Module options"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file for results"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode to prevent actual attacks (disabled by default for full functionality)"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced Empire PowerShell post-exploitation framework integration for sophisticated Windows post-exploitation operations. Provides comprehensive PowerShell-based attack capabilities including agent management, module execution, credential harvesting, lateral movement, and persistence mechanisms. Supports cross-platform operation with natural language interface for intuitive post-exploitation operations.",
      "safe_mode": true,
      "tags": [
        "empire",
        "powershell",
        "specops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for empire_powershell')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/penetration/empire_powershell.ts"
    },
    {
      "name": "encryption_tool",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "encryption_tool",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Cryptographic action to perform"
        },
        {
          "name": "algorithm",
          "type": "enum",
          "required": true,
          "description": "Cryptographic algorithm to use"
        },
        {
          "name": "input_data",
          "type": "string",
          "required": true,
          "description": "Data to process"
        },
        {
          "name": "key",
          "type": "string",
          "required": false,
          "description": "Encryption/decryption key"
        },
        {
          "name": "mode",
          "type": "enum",
          "required": false,
          "description": "Encryption mode for AES"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced encryption and cryptographic operations",
      "safe_mode": false,
      "tags": [
        "encryption",
        "tool",
        "utilities"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for encryption_tool')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/utilities/encryption_tool.ts"
    },
    {
      "name": "enhanced_browser_automation",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_browser_automation",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Browser automation action to perform"
        },
        {
          "name": "headless",
          "type": "boolean",
          "required": false,
          "description": "Run browser in headless mode"
        },
        {
          "name": "viewport",
          "type": "object",
          "required": false,
          "description": "Browser viewport size"
        },
        {
          "name": "xpath",
          "type": "string",
          "required": false,
          "description": "XPath expression for element selection"
        },
        {
          "name": "text",
          "type": "string",
          "required": false,
          "description": "Text content to search for or input"
        },
        {
          "name": "script_type",
          "type": "enum",
          "required": false,
          "description": "Type of script execution"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Operation timeout in milliseconds"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path for results"
        },
        {
          "name": "geolocation",
          "type": "object",
          "required": false,
          "description": "Browser geolocation coordinates"
        },
        {
          "name": "blocked_resources",
          "type": "array",
          "required": false,
          "description": "Resource types to block (image, stylesheet, font, etc.)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83c\udf10 **Enhanced Browser Automation & Web Control Toolkit** - Comprehensive cross-platform browser automation combining advanced browser control, web automation, element interaction, content extraction, form filling, JavaScript execution, and screenshot capabilities. Supports Chrome, Firefox, Safari, and Edge browsers across Windows, Linux, macOS, Android, and iOS platforms with both Playwright and Puppeteer integration.",
      "safe_mode": false,
      "tags": [
        "automation",
        "browser",
        "enhanced",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_browser_automation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/enhanced_browser_automation.ts"
    },
    {
      "name": "enhanced_calculator",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_calculator",
      "args": [
        {
          "name": "mode",
          "type": "enum",
          "required": false,
          "description": "Calculation mode: 'basic' for simple operations, 'advanced' for scientific functions, 'expression' for mathematical expressions"
        },
        {
          "name": "a",
          "type": "number",
          "required": false,
          "description": "First number for calculation (for basic mode)"
        },
        {
          "name": "b",
          "type": "number",
          "required": false,
          "description": "Second number for calculation (for basic mode, not needed for unary operations)"
        },
        {
          "name": "variables",
          "type": "record",
          "required": false,
          "description": "Variables to substitute in expression (for advanced/expression modes)"
        },
        {
          "name": "format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        },
        {
          "name": "angle_unit",
          "type": "enum",
          "required": false,
          "description": "Angle unit for trigonometric functions"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd22 **Enhanced Mathematical Calculator** - Comprehensive mathematical operations combining basic arithmetic, advanced scientific computing, expression evaluation, and statistical functions. Supports both simple operations (add, subtract, multiply, divide) and complex mathematical expressions with variables, precision control, and multiple output formats.",
      "safe_mode": false,
      "tags": [
        "calculator",
        "enhanced",
        "utilities"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_calculator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/utilities/enhanced_calculator.ts"
    },
    {
      "name": "enhanced_data_analysis",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_data_analysis",
      "args": [
        {
          "name": "mode",
          "type": "enum",
          "required": false,
          "description": "Analysis mode: 'statistical' for basic stats, 'advanced' for complex analytics, 'visualization' for data visualization, 'correlation' for relationship analysis, 'prediction' for forecasting, 'export' for data export"
        },
        {
          "name": "data_source",
          "type": "string",
          "required": false,
          "description": "Source of data to analyze (file path, URL, or data reference for advanced modes)"
        },
        {
          "name": "outlier_threshold",
          "type": "number",
          "required": false,
          "description": "Standard deviation threshold for outlier detection (1-5)"
        },
        {
          "name": "grouping_variable",
          "type": "string",
          "required": false,
          "description": "Variable for grouping data in comparative analysis"
        },
        {
          "name": "chart_title",
          "type": "string",
          "required": false,
          "description": "Title for generated charts"
        },
        {
          "name": "include_raw_data",
          "type": "boolean",
          "required": false,
          "description": "Include raw data in output"
        },
        {
          "name": "generate_insights",
          "type": "boolean",
          "required": false,
          "description": "Generate automated insights from analysis"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udcca **Enhanced Data Analysis & Statistical Processing Toolkit** - Comprehensive data analysis combining basic statistical calculations, advanced analytics, visualization, correlation analysis, trend detection, and predictive modeling. Supports both numerical data arrays and complex data sources with multiple analysis types and output formats.",
      "safe_mode": false,
      "tags": [
        "analysis",
        "data",
        "enhanced",
        "utilities"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_data_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/utilities/enhanced_data_analysis.ts"
    },
    {
      "name": "enhanced_media_editor",
      "category": "media",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_media_editor",
      "args": [
        {
          "name": "mode",
          "type": "enum",
          "required": false,
          "description": "Operation mode: 'natural_language' for conversational interface (default), 'command' for structured commands, 'quick_command' for fast processing without UI"
        },
        {
          "name": "action",
          "type": "enum",
          "required": false,
          "description": "Unified media editor action. Options: status (get tool status), open (open media file), create_session (create new editing session), process_audio (apply Audacity 3.7.6 audio operations), process_image (apply GIMP 3.0 image operations), process_video (apply Kdenlive 25.09.0 video operations), manage_timeline (timeline management), manage_layers (layer management), export (export edited media), get_session (get session details), delete_session (delete session), create_project (create project), batch_process (process multiple files), get_audio_devices (list audio devices), record_audio (record audio), generate_ai_image (generate AI images with SVG fallback), generate_ai_video (generate AI videos with animated SVG fallback), generate_ai_audio (generate AI audio with MIDI fallback), configure_api (configure API for AI generation), get_api_config (get API configuration), detect_model_capabilities (detect model capabilities), generate_svg (generate SVG graphics), generate_animated_svg (generate animated SVG), generate_midi (generate MIDI audio), quick_resize (fast image resize), quick_crop (fast image crop), quick_rotate (fast image rotation), quick_trim (fast audio trim), quick_normalize (fast audio normalize), quick_fade (fast audio fade), quick_brightness (fast brightness adjustment), quick_contrast (fast contrast adjustment), quick_blur (fast blur effect), quick_sharpen (fast sharpen effect)"
        },
        {
          "name": "query",
          "type": "string",
          "required": false,
          "description": "Natural language command for media editing (e.g., 'resize this image to 1920x1080', 'add a fade out to the audio', 'crop the video to remove the watermark"
        },
        {
          "name": "sessionName",
          "type": "string",
          "required": false,
          "description": "Name for the editing session"
        },
        {
          "name": "source",
          "type": "string",
          "required": false,
          "description": "Media source path (local file) or URL (http/https) to open for editing"
        },
        {
          "name": "type",
          "type": "enum",
          "required": false,
          "description": "Media type specification"
        },
        {
          "name": "audioParams",
          "type": "object",
          "required": false,
          "description": "Audio operation parameters"
        },
        {
          "name": "trackId",
          "type": "string",
          "required": false,
          "description": "Audio track identifier"
        },
        {
          "name": "imageParams",
          "type": "object",
          "required": false,
          "description": "Image operation parameters"
        },
        {
          "name": "layerId",
          "type": "string",
          "required": false,
          "description": "Image layer identifier"
        },
        {
          "name": "videoParams",
          "type": "object",
          "required": false,
          "description": "Video operation parameters"
        },
        {
          "name": "clipId",
          "type": "string",
          "required": false,
          "description": "Video clip identifier"
        },
        {
          "name": "trackData",
          "type": "object",
          "required": false,
          "description": "Track data for timeline operations"
        },
        {
          "name": "clipData",
          "type": "object",
          "required": false,
          "description": "Clip data for timeline operations"
        },
        {
          "name": "layerData",
          "type": "object",
          "required": false,
          "description": "Layer data for layer operations"
        },
        {
          "name": "exportQuality",
          "type": "number",
          "required": false,
          "description": "Output quality setting (1-100)"
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "Output file path for export operations"
        },
        {
          "name": "options",
          "type": "object",
          "required": false,
          "description": "Additional export options"
        },
        {
          "name": "projectType",
          "type": "enum",
          "required": false,
          "description": "Project type"
        },
        {
          "name": "sessionIds",
          "type": "array",
          "required": false,
          "description": "Array of session IDs for project or batch operations"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Recording duration in seconds"
        },
        {
          "name": "recordingFormat",
          "type": "enum",
          "required": false,
          "description": "Audio recording format"
        },
        {
          "name": "model",
          "type": "string",
          "required": false,
          "description": "AI model to use for generation"
        },
        {
          "name": "configId",
          "type": "string",
          "required": false,
          "description": "API configuration ID for AI generation"
        },
        {
          "name": "modelId",
          "type": "string",
          "required": false,
          "description": "Model ID for capability detection"
        },
        {
          "name": "width",
          "type": "number",
          "required": false,
          "description": "Image/video width in pixels"
        },
        {
          "name": "height",
          "type": "number",
          "required": false,
          "description": "Image/video height in pixels"
        },
        {
          "name": "quality",
          "type": "number",
          "required": false,
          "description": "Generation quality (1-100)"
        },
        {
          "name": "style",
          "type": "string",
          "required": false,
          "description": "Artistic style for generation"
        },
        {
          "name": "seed",
          "type": "number",
          "required": false,
          "description": "Random seed for reproducible generation"
        },
        {
          "name": "steps",
          "type": "number",
          "required": false,
          "description": "Number of generation steps"
        },
        {
          "name": "guidance",
          "type": "number",
          "required": false,
          "description": "Guidance scale for generation"
        },
        {
          "name": "negativePrompt",
          "type": "string",
          "required": false,
          "description": "Negative prompt to avoid certain elements"
        },
        {
          "name": "outputFormat",
          "type": "enum",
          "required": false,
          "description": "Output format for generated content"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Operations performed by enhanced_media_editor may impact system state.",
      "safe_mode": false,
      "tags": [
        "editor",
        "enhanced",
        "media"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_media_editor')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/media/enhanced_media_editor.ts"
    },
    {
      "name": "enhanced_mobile_app_toolkit",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "enhanced_mobile_app_toolkit",
      "args": [
        {
          "name": "operation",
          "type": "enum",
          "required": true,
          "description": "Mobile app toolkit operation to perform"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target mobile platform"
        },
        {
          "name": "version",
          "type": "string",
          "required": false,
          "description": "App version for operations"
        },
        {
          "name": "events",
          "type": "array",
          "required": false,
          "description": "Events to track"
        },
        {
          "name": "deployment_target",
          "type": "enum",
          "required": false,
          "description": "Deployment target"
        },
        {
          "name": "optimization_level",
          "type": "enum",
          "required": false,
          "description": "Optimization level"
        },
        {
          "name": "generate_report",
          "type": "boolean",
          "required": false,
          "description": "Generate detailed report"
        },
        {
          "name": "include_recommendations",
          "type": "boolean",
          "required": false,
          "description": "Include optimization recommendations"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udcf1 **Enhanced Mobile App Development & Management Toolkit** - Comprehensive mobile application lifecycle management combining analytics, deployment, monitoring, optimization, performance testing, security analysis, and quality assurance testing. Supports Android and iOS platforms with cross-platform compatibility, CI/CD integration, and advanced mobile development workflows.",
      "safe_mode": false,
      "tags": [
        "app",
        "enhanced",
        "mobile",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for enhanced_mobile_app_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/mobile/enhanced_mobile_app_toolkit.ts"
    },
    {
      "name": "exploit_framework",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "exploit_framework",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Exploit framework action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target host to test or exploit. Examples: '192.168.1.1', 'company.com'"
        },
        {
          "name": "exploit",
          "type": "string",
          "required": false,
          "description": "Specific exploit to use. Examples: 'eternalblue', 'bluekeep', 'heartbleed'"
        },
        {
          "name": "payload",
          "type": "string",
          "required": false,
          "description": "Payload type to use. Examples: 'reverse_shell', 'bind_shell', 'meterpreter'"
        },
        {
          "name": "options",
          "type": "record",
          "required": false,
          "description": "Additional exploit options and parameters"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds for exploit execution"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output for detailed exploit information"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode to prevent actual exploitation (disabled by default for full functionality)"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\u26a1 **Advanced Exploit Framework & Vulnerability Testing Suite** - Comprehensive penetration testing platform for authorized corporate security assessments. Contains pre-built exploits for critical vulnerabilities (EternalBlue, BlueKeep, Heartbleed, Shellshock, Dirty COW) across Windows, Linux, macOS, Android, and iOS platforms. Features safe mode simulation, payload generation, vulnerability validation, and automated cleanup procedures with detailed security recommendations and compliance documentation.",
      "safe_mode": true,
      "tags": [
        "exploit",
        "framework",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for exploit_framework')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/exploit_framework.ts"
    },
    {
      "name": "explore_categories",
      "category": "discovery",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "explore_categories",
      "args": [
        {
          "name": "category",
          "type": "string",
          "required": false,
          "description": "Specific category to explore, or leave empty to see all categories"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Explore all available tool categories and their capabilities",
      "safe_mode": false,
      "tags": [
        "categories",
        "discovery",
        "explore"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for explore_categories')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/discovery/explore_categories.ts"
    },
    {
      "name": "file_ops",
      "category": "file_system",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "file_ops",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "File operation action to perform"
        },
        {
          "name": "source",
          "type": "string",
          "required": true,
          "description": "Source file or directory path"
        },
        {
          "name": "destination",
          "type": "string",
          "required": false,
          "description": "Destination path for copy/move operations"
        },
        {
          "name": "new_name",
          "type": "string",
          "required": false,
          "description": "New name for rename operation"
        },
        {
          "name": "recursive",
          "type": "boolean",
          "required": false,
          "description": "Perform operation recursively for directories"
        },
        {
          "name": "overwrite",
          "type": "boolean",
          "required": false,
          "description": "Overwrite existing files"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced file operations and management",
      "safe_mode": false,
      "tags": [
        "file",
        "file_system",
        "ops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for file_ops')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/file_system/file_ops.ts"
    },
    {
      "name": "file_watcher",
      "category": "file_system",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "file_watcher",
      "args": [],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced file system watching and monitoring capabilities",
      "safe_mode": false,
      "tags": [
        "file",
        "file_system",
        "watcher"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for file_watcher')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/file_system/file_watcher.ts"
    },
    {
      "name": "flipper_zero",
      "category": "flipper",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "flipper_zero",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Flipper Zero operation to perform"
        },
        {
          "name": "session_id",
          "type": "string",
          "required": false,
          "description": "Session ID from connect (required for most operations)"
        },
        {
          "name": "scan_ble",
          "type": "boolean",
          "required": false,
          "description": "Whether to scan for BLE devices (for list_devices)"
        },
        {
          "name": "scan_usb",
          "type": "boolean",
          "required": false,
          "description": "Whether to scan for USB devices (for list_devices)"
        },
        {
          "name": "include_bridge",
          "type": "boolean",
          "required": false,
          "description": "Whether to include bridge endpoint (for list_devices)"
        },
        {
          "name": "content",
          "type": "string",
          "required": false,
          "description": "File content to write (for fs_write)"
        },
        {
          "name": "protocol",
          "type": "string",
          "required": false,
          "description": "IR protocol name (for ir_send_raw)"
        },
        {
          "name": "data",
          "type": "string",
          "required": false,
          "description": "Raw IR data (for ir_send_raw)"
        },
        {
          "name": "value",
          "type": "boolean",
          "required": false,
          "description": "Pin value true=high, false=low (for gpio_set)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd0c **Flipper Zero Comprehensive Tool** - Complete Flipper Zero device management and operations including device discovery, connection management, file operations, IR/Sub-GHz transmission, NFC/RFID operations, BadUSB scripting, UART sniffing, GPIO control, and Bluetooth management. Consolidates 24 individual Flipper tools into a single action-based interface.",
      "safe_mode": false,
      "tags": [
        "flipper",
        "zero"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for flipper_zero')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/flipper/flipper_zero_consolidated.ts"
    },
    {
      "name": "forensics_analysis",
      "category": "forensics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "forensics_analysis",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Forensics action to perform"
        },
        {
          "name": "evidence_type",
          "type": "enum",
          "required": true,
          "description": "Type of evidence to analyze"
        },
        {
          "name": "source_path",
          "type": "string",
          "required": true,
          "description": "Path to evidence source"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output report format"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Digital forensics and incident response analysis",
      "safe_mode": false,
      "tags": [
        "analysis",
        "forensics"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for forensics_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/forensics/forensics_analysis.ts"
    },
    {
      "name": "forensics_toolkit",
      "category": "forensics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "forensics_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Forensics action to perform"
        },
        {
          "name": "evidence_source",
          "type": "string",
          "required": true,
          "description": "Source of evidence to analyze"
        },
        {
          "name": "analysis_type",
          "type": "enum",
          "required": false,
          "description": "Type of forensics analysis"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        },
        {
          "name": "preserve_evidence",
          "type": "boolean",
          "required": false,
          "description": "Preserve original evidence integrity"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced digital forensics and evidence analysis toolkit with comprehensive memory analysis, file carving, timeline reconstruction, and chain of custody management",
      "safe_mode": false,
      "tags": [
        "forensics",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for forensics_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/forensics/forensics_toolkit.ts"
    },
    {
      "name": "form_detection",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "form_detection",
      "args": [
        {
          "name": "url",
          "type": "string",
          "required": true,
          "description": "URL of the page containing the form"
        },
        {
          "name": "form_selector",
          "type": "string",
          "required": false,
          "description": "CSS selector for specific form (if multiple forms exist)"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds"
        },
        {
          "name": "save_screenshot",
          "type": "boolean",
          "required": false,
          "description": "Save screenshot of the form"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Detect and analyze forms on web pages, identifying field types, patterns, and completion requirements",
      "safe_mode": false,
      "tags": [
        "detection",
        "form",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for form_detection')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/form_completion.ts"
    },
    {
      "name": "form_completion",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "form_completion",
      "args": [
        {
          "name": "url",
          "type": "string",
          "required": true,
          "description": "URL of the form to complete"
        },
        {
          "name": "form_data",
          "type": "record",
          "required": true,
          "description": "Form data to fill (field_name: value pairs)"
        },
        {
          "name": "form_selector",
          "type": "string",
          "required": false,
          "description": "CSS selector for specific form (if multiple forms exist)"
        },
        {
          "name": "captcha_handling",
          "type": "enum",
          "required": false,
          "description": "How to handle CAPTCHAs"
        },
        {
          "name": "validation",
          "type": "boolean",
          "required": false,
          "description": "Validate form fields before submission"
        },
        {
          "name": "submit_form",
          "type": "boolean",
          "required": false,
          "description": "Whether to submit the form after completion"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds"
        },
        {
          "name": "save_screenshot",
          "type": "boolean",
          "required": false,
          "description": "Save screenshot after completion"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Complete online forms automatically with intelligent field detection, validation, and CAPTCHA handling",
      "safe_mode": false,
      "tags": [
        "completion",
        "form",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for form_completion')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/form_completion.ts"
    },
    {
      "name": "form_validation",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "form_validation",
      "args": [
        {
          "name": "form_data",
          "type": "record",
          "required": true,
          "description": "Form data to validate"
        },
        {
          "name": "validation_rules",
          "type": "record",
          "required": false,
          "description": "Custom validation rules for specific fields"
        },
        {
          "name": "strict_mode",
          "type": "boolean",
          "required": false,
          "description": "Use strict validation mode"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Validate form data against field requirements, patterns, and business rules",
      "safe_mode": false,
      "tags": [
        "form",
        "validation",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for form_validation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/form_completion.ts"
    },
    {
      "name": "form_pattern_recognition",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "form_pattern_recognition",
      "args": [
        {
          "name": "url",
          "type": "string",
          "required": true,
          "description": "URL of the page containing the form"
        },
        {
          "name": "form_selector",
          "type": "string",
          "required": false,
          "description": "CSS selector for specific form"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Recognize common form patterns (contact, registration, login, checkout) and suggest appropriate field mappings",
      "safe_mode": false,
      "tags": [
        "form",
        "pattern",
        "recognition",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for form_pattern_recognition')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/form_completion.ts"
    },
    {
      "name": "frida_toolkit",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "frida_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Frida action to perform"
        },
        {
          "name": "target_application",
          "type": "string",
          "required": false,
          "description": "Target application bundle ID or package name"
        },
        {
          "name": "target_device",
          "type": "string",
          "required": false,
          "description": "Target device ID (for mobile platforms)"
        },
        {
          "name": "method_name",
          "type": "string",
          "required": false,
          "description": "Method name to hook"
        },
        {
          "name": "class_name",
          "type": "string",
          "required": false,
          "description": "Class name for method hooking"
        },
        {
          "name": "module_name",
          "type": "string",
          "required": false,
          "description": "Module name for API interception"
        },
        {
          "name": "memory_size",
          "type": "number",
          "required": false,
          "description": "Memory size for operations"
        },
        {
          "name": "memory_data",
          "type": "string",
          "required": false,
          "description": "Memory data to write"
        },
        {
          "name": "script_file",
          "type": "string",
          "required": false,
          "description": "Frida script file path"
        },
        {
          "name": "script_type",
          "type": "enum",
          "required": false,
          "description": "Script type"
        },
        {
          "name": "architecture",
          "type": "enum",
          "required": false,
          "description": "Target architecture"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        },
        {
          "name": "debug",
          "type": "boolean",
          "required": false,
          "description": "Enable debug output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced Frida dynamic instrumentation toolkit with full cross-platform support (Windows, Linux, macOS, iOS, Android). Provides comprehensive dynamic analysis capabilities including function hooking, memory manipulation, API interception, and runtime patching across all platforms. Supports natural language interface for intuitive dynamic analysis operations.",
      "safe_mode": true,
      "tags": [
        "frida",
        "specops",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for frida_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/mobile_iot/frida_toolkit.ts"
    },
    {
      "name": "fs_list",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "fs_list",
      "args": [
        {
          "name": "dir",
          "type": "string",
          "required": false,
          "description": "The directory path to list files and folders from. Examples: '.', './documents', '/home/user/pictures', 'C:\\\\Users\\\\User\\\\Desktop'. Use '.' for current directory."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "List files/directories under a relative path (non-recursive)",
      "safe_mode": false,
      "tags": [
        "fs",
        "general",
        "list"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for fs_list')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "fs_read_text",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "fs_read_text",
      "args": [
        {
          "name": "path",
          "type": "string",
          "required": true,
          "description": "The file path to read from. Can be relative or absolute path. Examples: './config.txt', '/home/user/documents/readme.md', 'C:\\\\Users\\\\User\\\\Desktop\\\\notes.txt'."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Read a UTF-8 text file within the sandbox",
      "safe_mode": false,
      "tags": [
        "fs",
        "general",
        "read",
        "text"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for fs_read_text')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "fs_search",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "fs_search",
      "args": [
        {
          "name": "pattern",
          "type": "string",
          "required": true,
          "description": "The file name pattern to search for. Supports glob patterns and partial matches. Examples: '*.txt', 'config*', '*.js', 'README*', '*.{json,yaml}'."
        },
        {
          "name": "dir",
          "type": "string",
          "required": false,
          "description": "The directory to search in. Examples: '.', './src', '/home/user/documents', 'C:\\\\Users\\\\User\\\\Projects'. Use '.' for current directory."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Search for files by name pattern",
      "safe_mode": false,
      "tags": [
        "fs",
        "general",
        "search"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for fs_search')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "fs_write_text",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "fs_write_text",
      "args": [
        {
          "name": "path",
          "type": "string",
          "required": true,
          "description": "The file path to write to. Can be relative or absolute path. Examples: './output.txt', '/home/user/documents/log.txt', 'C:\\\\Users\\\\User\\\\Desktop\\\\data.txt'."
        },
        {
          "name": "content",
          "type": "string",
          "required": true,
          "description": "The text content to write to the file. Can be plain text, JSON, XML, or any text-based format. Examples: 'Hello World', '{\\\"key\\\": \\\"value\\\"}', '<xml>data</xml>'."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Write a UTF-8 text file within the sandbox",
      "safe_mode": false,
      "tags": [
        "fs",
        "general",
        "text",
        "write"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for fs_write_text')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "ghidra_reverse_engineering",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ghidra_reverse_engineering",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Ghidra action to perform"
        },
        {
          "name": "project_name",
          "type": "string",
          "required": false,
          "description": "Ghidra project name"
        },
        {
          "name": "output_directory",
          "type": "string",
          "required": false,
          "description": "Output directory for analysis results"
        },
        {
          "name": "target_architecture",
          "type": "string",
          "required": false,
          "description": "Target architecture (x86, x64, ARM, ARM64, MIPS, etc.)"
        },
        {
          "name": "target_platform",
          "type": "string",
          "required": false,
          "description": "Target platform (Windows, Linux, macOS, iOS, Android)"
        },
        {
          "name": "script_file",
          "type": "string",
          "required": false,
          "description": "Ghidra script file path"
        },
        {
          "name": "script_type",
          "type": "enum",
          "required": false,
          "description": "Script type"
        },
        {
          "name": "architecture",
          "type": "enum",
          "required": false,
          "description": "Target architecture"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        },
        {
          "name": "debug",
          "type": "boolean",
          "required": false,
          "description": "Enable debug output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced Ghidra reverse engineering framework with full cross-platform support (Windows, Linux, macOS, iOS, Android). Provides comprehensive binary analysis capabilities including disassembly, decompilation, function analysis, vulnerability detection, and malware analysis across all platforms. Supports natural language interface for intuitive reverse engineering operations.",
      "safe_mode": true,
      "tags": [
        "engineering",
        "ghidra",
        "reverse",
        "specops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ghidra_reverse_engineering')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/mobile_iot/ghidra_reverse_engineering.ts"
    },
    {
      "name": "git_status",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "git_status",
      "args": [
        {
          "name": "dir",
          "type": "string",
          "required": false,
          "description": "The directory containing the git repository to check. Examples: './project', '/home/user/repos/myproject', 'C:\\\\Users\\\\User\\\\Projects\\\\MyProject'. Use '.' for the current directory."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Get git status for a repository",
      "safe_mode": false,
      "tags": [
        "general",
        "git",
        "status"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for git_status')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "grep",
      "category": "file_system",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "grep",
      "args": [
        {
          "name": "pattern",
          "type": "string",
          "required": true,
          "description": "The search pattern. Can be literal text or regex pattern."
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "The directory or file path to search in. Examples: '.', './src', '/home/user/documents', 'C:\\\\Users\\\\User\\\\Projects'."
        },
        {
          "name": "caseInsensitive",
          "type": "boolean",
          "required": false,
          "description": "Case-insensitive search"
        },
        {
          "name": "wholeWord",
          "type": "boolean",
          "required": false,
          "description": "Match whole words only"
        },
        {
          "name": "regex",
          "type": "boolean",
          "required": false,
          "description": "Treat pattern as regex"
        },
        {
          "name": "contextBefore",
          "type": "number",
          "required": false,
          "description": "Number of lines to show before each match (0-10)"
        },
        {
          "name": "contextAfter",
          "type": "number",
          "required": false,
          "description": "Number of lines to show after each match (0-10)"
        },
        {
          "name": "maxFileSize",
          "type": "number",
          "required": false,
          "description": "Maximum file size to search in bytes (default: 10MB)"
        },
        {
          "name": "encoding",
          "type": "string",
          "required": false,
          "description": "File encoding: 'auto', 'utf8', 'utf16le', 'latin1', 'cp1252'"
        },
        {
          "name": "outputFormat",
          "type": "enum",
          "required": false,
          "description": "Output format"
        },
        {
          "name": "colorOutput",
          "type": "boolean",
          "required": false,
          "description": "Enable colored output highlighting"
        },
        {
          "name": "showLineNumbers",
          "type": "boolean",
          "required": false,
          "description": "Show line numbers"
        },
        {
          "name": "showFilename",
          "type": "boolean",
          "required": false,
          "description": "Show filename for each match"
        },
        {
          "name": "recursive",
          "type": "boolean",
          "required": false,
          "description": "Search subdirectories recursively"
        },
        {
          "name": "includePattern",
          "type": "array",
          "required": false,
          "description": "File patterns to include (e.g., ['*.js', '*.ts'])"
        },
        {
          "name": "excludePattern",
          "type": "array",
          "required": false,
          "description": "File patterns to exclude (e.g., ['node_modules', '*.log'])"
        },
        {
          "name": "maxDepth",
          "type": "number",
          "required": false,
          "description": "Maximum directory depth (0 = unlimited)"
        },
        {
          "name": "limitResults",
          "type": "number",
          "required": false,
          "description": "Maximum number of results to return (0 = unlimited)"
        },
        {
          "name": "binaryFiles",
          "type": "enum",
          "required": false,
          "description": "How to handle binary files"
        },
        {
          "name": "followSymlinks",
          "type": "boolean",
          "required": false,
          "description": "Follow symbolic links"
        },
        {
          "name": "performanceMode",
          "type": "enum",
          "required": false,
          "description": "Performance vs accuracy trade-off"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd0d **Grep Tool** - Advanced text search with cross-platform support, contextual display, encoding detection, and performance optimizations. This is the enhanced version that takes precedence over basic grep implementations.",
      "safe_mode": false,
      "tags": [
        "file_system",
        "grep"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for grep')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/file_system/grep.ts"
    },
    {
      "name": "hack_gpt",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "hack_gpt",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "HackGPT action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system, application, or domain to test"
        },
        {
          "name": "tool_integration",
          "type": "enum",
          "required": false,
          "description": "Specific tool integration to use"
        },
        {
          "name": "attack_vector",
          "type": "enum",
          "required": false,
          "description": "Attack vector to focus on"
        },
        {
          "name": "intensity",
          "type": "enum",
          "required": false,
          "description": "Attack intensity level"
        },
        {
          "name": "stealth_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable stealth mode for detection avoidance"
        },
        {
          "name": "ai_learning",
          "type": "boolean",
          "required": false,
          "description": "Enable AI learning and adaptation"
        },
        {
          "name": "exploit_chain",
          "type": "array",
          "required": false,
          "description": "Custom exploit chain to execute"
        },
        {
          "name": "payload_type",
          "type": "enum",
          "required": false,
          "description": "Type of payload to generate"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        },
        {
          "name": "workspace",
          "type": "string",
          "required": false,
          "description": "HackGPT workspace name"
        },
        {
          "name": "config_file",
          "type": "string",
          "required": false,
          "description": "Path to HackGPT configuration file"
        },
        {
          "name": "natural_language_command",
          "type": "string",
          "required": false,
          "description": "Natural language command for HackGPT operations (e.g., 'scan the web application for vulnerabilities', 'generate exploit for SQL injection', 'perform OSINT on the target"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target platform"
        },
        {
          "name": "architecture",
          "type": "enum",
          "required": false,
          "description": "Target architecture"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode to prevent actual attacks (disabled by default for full functionality)"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83e\udd16 **HackGPT - AI-Powered Offensive Security Toolkit** - Comprehensive AI extension for offensive security integrating Burp Suite, Nuclei, Shodan, and OSINT frameworks. Automates reconnaissance, payload generation, exploit writing, and zero-day PoC creation via natural language interface. Transforms general-purpose AI into a",
      "safe_mode": true,
      "tags": [
        "gpt",
        "hack",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for hack_gpt')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/hack_gpt.ts"
    },
    {
      "name": "hack_gpt_natural_language",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "hack_gpt_natural_language",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for HackGPT operations (e.g., 'scan the web application for vulnerabilities', 'generate exploit for SQL injection', 'perform OSINT on the target', 'run Burp Suite scan', 'use Nuclei to find CVEs"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83e\udd16 **HackGPT Natural Language Interface** - Process natural language commands for HackGPT offensive security operations. Converts conversational requests like",
      "safe_mode": true,
      "tags": [
        "gpt",
        "hack",
        "language",
        "natural",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for hack_gpt_natural_language')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/hack_gpt_natural_language.ts"
    },
    {
      "name": "hack_network",
      "category": "penetration",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "hack_network",
      "args": [
        {
          "name": "target_network",
          "type": "string",
          "required": true,
          "description": "Target network CIDR or host range"
        },
        {
          "name": "attack_vector",
          "type": "enum",
          "required": true,
          "description": "Attack vector to use"
        },
        {
          "name": "stealth_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable stealth mode for detection avoidance"
        },
        {
          "name": "output_format",
          "type": "string",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Comprehensive network hacking and penetration testing",
      "safe_mode": false,
      "tags": [
        "hack",
        "network",
        "penetration"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for hack_network')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/penetration/hack_network.ts"
    },
    {
      "name": "health",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "health",
      "args": [],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Liveness/readiness probe",
      "safe_mode": false,
      "tags": [
        "general",
        "health"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for health')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "hexstrike_ai",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "hexstrike_ai",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "HexStrike AI action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system, network, or application to test (e.g., '192.168.1.1', 'company.com', '192.168.1.0/24"
        },
        {
          "name": "agent_type",
          "type": "enum",
          "required": false,
          "description": "Type of AI agent to deploy"
        },
        {
          "name": "attack_vector",
          "type": "enum",
          "required": false,
          "description": "Attack vector to focus on"
        },
        {
          "name": "intensity",
          "type": "enum",
          "required": false,
          "description": "Attack intensity level"
        },
        {
          "name": "stealth_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable stealth mode for detection avoidance"
        },
        {
          "name": "ai_learning",
          "type": "boolean",
          "required": false,
          "description": "Enable AI learning and adaptation"
        },
        {
          "name": "exploit_chain",
          "type": "array",
          "required": false,
          "description": "Custom exploit chain to execute"
        },
        {
          "name": "cve_ids",
          "type": "array",
          "required": false,
          "description": "Specific CVE IDs to target"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        },
        {
          "name": "workspace",
          "type": "string",
          "required": false,
          "description": "HexStrike workspace name"
        },
        {
          "name": "config_file",
          "type": "string",
          "required": false,
          "description": "Path to HexStrike configuration file"
        },
        {
          "name": "natural_language_command",
          "type": "string",
          "required": false,
          "description": "Natural language command for HexStrike operations (e.g., 'perform autonomous penetration test on target', 'generate custom exploits for the system', 'run AI-powered vulnerability assessment"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target platform"
        },
        {
          "name": "architecture",
          "type": "enum",
          "required": false,
          "description": "Target architecture"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode to prevent actual attacks (disabled by default for full functionality)"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83e\udd16 **HexStrike AI - Advanced AI-Powered Penetration Testing Framework** - Comprehensive autonomous penetration testing platform featuring over 150 integrated security tools, AI agents, and intelligent decision engine for dynamic attack simulations. Automates reconnaissance, vulnerability scanning, exploit generation, and chain execution with real-time CVE analysis. Acts like a swarm of specialized AI hackers that learn and adapt in real-time, generating custom exploits without human input. Supports cross-platform operation (Windows, Linux, macOS, iOS, Android) with natural language interface for intuitive penetration testing operations.",
      "safe_mode": true,
      "tags": [
        "ai",
        "hexstrike",
        "specops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for hexstrike_ai')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/penetration/hexstrike_ai.ts"
    },
    {
      "name": "hexstrike_ai_natural_language",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "hexstrike_ai_natural_language",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for HexStrike AI operations (e.g., 'perform autonomous penetration test on target', 'generate custom exploits for the system', 'run AI-powered vulnerability assessment', 'deploy reconnaissance agents"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83e\udd16 **HexStrike AI Natural Language Interface** - Process natural language commands for HexStrike AI penetration testing operations. Converts conversational requests like",
      "safe_mode": false,
      "tags": [
        "ai",
        "hexstrike",
        "language",
        "natural",
        "specops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for hexstrike_ai_natural_language')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/penetration/hexstrike_ai_natural_language.ts"
    },
    {
      "name": "iot_security",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "iot_security",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "IoT security action"
        },
        {
          "name": "device_type",
          "type": "enum",
          "required": true,
          "description": "Type of IoT device"
        },
        {
          "name": "network_segment",
          "type": "string",
          "required": false,
          "description": "Network segment containing devices"
        },
        {
          "name": "protocol",
          "type": "enum",
          "required": true,
          "description": "Communication protocol"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Internet of Things security assessment and protection",
      "safe_mode": false,
      "tags": [
        "iot",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for iot_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/iot_security.ts"
    },
    {
      "name": "ip_geolocation",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ip_geolocation",
      "args": [
        {
          "name": "ip_address",
          "type": "string",
          "required": true,
          "description": "IP address to geolocate"
        },
        {
          "name": "database",
          "type": "enum",
          "required": true,
          "description": "Geolocation database/service to use"
        },
        {
          "name": "accuracy_level",
          "type": "enum",
          "required": false,
          "description": "Desired accuracy level"
        },
        {
          "name": "include_isp",
          "type": "boolean",
          "required": false,
          "description": "Include ISP information"
        },
        {
          "name": "include_timezone",
          "type": "boolean",
          "required": false,
          "description": "Include timezone information"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "IP-based geolocation using multiple databases and services (MaxMind GeoIP, IP2Location, free services)",
      "safe_mode": false,
      "tags": [
        "geolocation",
        "ip",
        "network"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ip_geolocation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/ip_geolocation.ts"
    },
    {
      "name": "latency_geolocation",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "latency_geolocation",
      "args": [
        {
          "name": "target_ip",
          "type": "string",
          "required": true,
          "description": "Target IP address to geolocate"
        },
        {
          "name": "vantage_points",
          "type": "array",
          "required": true,
          "description": "Vantage point location name"
        },
        {
          "name": "ping_count",
          "type": "number",
          "required": false,
          "description": "Number of ping packets to send"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Ping timeout in milliseconds"
        },
        {
          "name": "include_traceroute",
          "type": "boolean",
          "required": false,
          "description": "Include traceroute data"
        },
        {
          "name": "algorithm",
          "type": "enum",
          "required": false,
          "description": "Geolocation algorithm to use"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Latency-based geolocation using ping triangulation from multiple vantage points",
      "safe_mode": false,
      "tags": [
        "geolocation",
        "latency",
        "network"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for latency_geolocation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/latency_geolocation.ts"
    },
    {
      "name": "legal_compliance_manager",
      "category": "legal",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "legal_compliance_manager",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Legal compliance action to perform"
        },
        {
          "name": "enableEvidencePreservation",
          "type": "boolean",
          "required": false,
          "description": "Enable evidence preservation"
        },
        {
          "name": "enableLegalHold",
          "type": "boolean",
          "required": false,
          "description": "Enable legal hold capabilities"
        },
        {
          "name": "enableChainOfCustody",
          "type": "boolean",
          "required": false,
          "description": "Enable chain of custody tracking"
        },
        {
          "name": "enableDataIntegrity",
          "type": "boolean",
          "required": false,
          "description": "Enable data integrity verification"
        },
        {
          "name": "caseDescription",
          "type": "string",
          "required": false,
          "description": "Legal case description"
        },
        {
          "name": "createdBy",
          "type": "string",
          "required": false,
          "description": "User creating the legal hold"
        },
        {
          "name": "affectedData",
          "type": "array",
          "required": false,
          "description": "List of affected data paths"
        },
        {
          "name": "custodian",
          "type": "string",
          "required": false,
          "description": "Data custodian"
        },
        {
          "name": "legalBasis",
          "type": "string",
          "required": false,
          "description": "Legal basis for the hold"
        },
        {
          "name": "caseId",
          "type": "string",
          "required": false,
          "description": "External case ID"
        },
        {
          "name": "evidenceType",
          "type": "enum",
          "required": false,
          "description": "Type of evidence"
        },
        {
          "name": "metadata",
          "type": "record",
          "required": false,
          "description": "Additional metadata for evidence"
        },
        {
          "name": "legalHoldIds",
          "type": "array",
          "required": false,
          "description": "Associated legal hold IDs"
        },
        {
          "name": "custodyAction",
          "type": "enum",
          "required": false,
          "description": "Custody action"
        },
        {
          "name": "toCustodian",
          "type": "string",
          "required": false,
          "description": "Custodian receiving the evidence"
        },
        {
          "name": "purpose",
          "type": "string",
          "required": false,
          "description": "Purpose of the custody action"
        },
        {
          "name": "location",
          "type": "string",
          "required": false,
          "description": "Physical or logical location"
        },
        {
          "name": "witnesses",
          "type": "array",
          "required": false,
          "description": "Witnesses to the custody action"
        },
        {
          "name": "notes",
          "type": "string",
          "required": false,
          "description": "Additional notes"
        },
        {
          "name": "fromCustodian",
          "type": "string",
          "required": false,
          "description": "Custodian transferring the evidence"
        },
        {
          "name": "auditLogLevel",
          "type": "enum",
          "required": false,
          "description": "Audit logging level"
        },
        {
          "name": "endDate",
          "type": "string",
          "required": false,
          "description": "End date for query (ISO format)"
        },
        {
          "name": "limit",
          "type": "number",
          "required": false,
          "description": "Maximum number of records to return"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Manage legal compliance, audit logging, evidence preservation, and legal hold capabilities",
      "safe_mode": false,
      "tags": [
        "compliance",
        "legal",
        "manager"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for legal_compliance_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/legal/legal_compliance_manager.ts"
    },
    {
      "name": "machine_learning",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "machine_learning",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "ML action to perform"
        },
        {
          "name": "model_type",
          "type": "enum",
          "required": true,
          "description": "Type of ML model"
        },
        {
          "name": "data_path",
          "type": "string",
          "required": false,
          "description": "Path to training data"
        },
        {
          "name": "hyperparameters",
          "type": "record",
          "required": false,
          "description": "Model hyperparameters"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Machine learning model training and prediction",
      "safe_mode": false,
      "tags": [
        "learning",
        "machine",
        "utilities"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for machine_learning')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/utilities/machine_learning.ts"
    },
    {
      "name": "malware_analysis",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "malware_analysis",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Malware analysis action"
        },
        {
          "name": "sample_path",
          "type": "string",
          "required": true,
          "description": "Path to malware sample"
        },
        {
          "name": "analysis_type",
          "type": "enum",
          "required": true,
          "description": "Type of analysis to perform"
        },
        {
          "name": "sandbox",
          "type": "boolean",
          "required": false,
          "description": "Use sandboxed environment for analysis"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Malware analysis and reverse engineering",
      "safe_mode": false,
      "tags": [
        "analysis",
        "malware",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for malware_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/malware_analysis.ts"
    },
    {
      "name": "malware_analysis_toolkit",
      "category": "forensics",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "malware_analysis_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Malware analysis action to perform"
        },
        {
          "name": "sample_path",
          "type": "string",
          "required": true,
          "description": "Path to malware sample for analysis"
        },
        {
          "name": "analysis_environment",
          "type": "enum",
          "required": false,
          "description": "Analysis environment to use"
        },
        {
          "name": "analysis_depth",
          "type": "enum",
          "required": false,
          "description": "Depth of analysis to perform"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Comprehensive malware analysis and reverse engineering toolkit with static/dynamic analysis, behavioral monitoring, and advanced threat intelligence integration",
      "safe_mode": false,
      "tags": [
        "analysis",
        "forensics",
        "malware",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for malware_analysis_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/forensics/malware_analysis_toolkit.ts"
    },
    {
      "name": "manage_email_accounts",
      "category": "email",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "manage_email_accounts",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Account management action"
        },
        {
          "name": "account_name",
          "type": "string",
          "required": false,
          "description": "Name for the email account"
        },
        {
          "name": "email_address",
          "type": "string",
          "required": false,
          "description": "Email address for the account"
        },
        {
          "name": "smtp_server",
          "type": "string",
          "required": false,
          "description": "SMTP server configuration"
        },
        {
          "name": "imap_server",
          "type": "string",
          "required": false,
          "description": "IMAP server configuration"
        },
        {
          "name": "username",
          "type": "string",
          "required": false,
          "description": "Account username"
        },
        {
          "name": "password",
          "type": "string",
          "required": false,
          "description": "Account password"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Multi-account email management and configuration",
      "safe_mode": false,
      "tags": [
        "accounts",
        "email",
        "manage"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for manage_email_accounts')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/email/manage_email_accounts.ts"
    },
    {
      "name": "math_calculate",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "math_calculate",
      "args": [
        {
          "name": "expression",
          "type": "string",
          "required": true,
          "description": "Mathematical expression to evaluate"
        },
        {
          "name": "precision",
          "type": "number",
          "required": false,
          "description": "Decimal precision for results"
        },
        {
          "name": "variables",
          "type": "record",
          "required": false,
          "description": "Variables to substitute in expression"
        },
        {
          "name": "format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced mathematical calculations and scientific computing",
      "safe_mode": false,
      "tags": [
        "calculate",
        "math",
        "utilities"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for math_calculate')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/utilities/math_calculate.ts"
    },
    {
      "name": "metadata_extractor",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "metadata_extractor",
      "args": [
        {
          "name": "input_type",
          "type": "enum",
          "required": true,
          "description": "Type of input to process"
        },
        {
          "name": "input_source",
          "type": "string",
          "required": true,
          "description": "URL, file path, or Reddit/social media link to analyze"
        },
        {
          "name": "extraction_type",
          "type": "enum",
          "required": true,
          "description": "Type of extraction to perform"
        },
        {
          "name": "include_exif",
          "type": "boolean",
          "required": false,
          "description": "Extract EXIF metadata from images"
        },
        {
          "name": "include_video_metadata",
          "type": "boolean",
          "required": false,
          "description": "Extract metadata from video files"
        },
        {
          "name": "include_audio_metadata",
          "type": "boolean",
          "required": false,
          "description": "Extract metadata from audio files"
        },
        {
          "name": "platform_stripping_check",
          "type": "boolean",
          "required": false,
          "description": "Check if platform strips metadata"
        },
        {
          "name": "visual_analysis",
          "type": "boolean",
          "required": false,
          "description": "Perform visual analysis (OCR, object detection)"
        },
        {
          "name": "cross_post_search",
          "type": "boolean",
          "required": false,
          "description": "Search for cross-posts on other platforms"
        },
        {
          "name": "geotagging_assist",
          "type": "boolean",
          "required": false,
          "description": "Provide geotagging assistance with maps"
        },
        {
          "name": "weather_lookup",
          "type": "boolean",
          "required": false,
          "description": "Look up weather data based on timestamp"
        },
        {
          "name": "sun_position_analysis",
          "type": "boolean",
          "required": false,
          "description": "Analyze sun position based on shadows"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        },
        {
          "name": "include_original_file",
          "type": "boolean",
          "required": false,
          "description": "Include original file in output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Comprehensive metadata extraction and geolocation tool for media files, URLs, and social media posts with platform-aware stripping detection and visual analysis",
      "safe_mode": false,
      "tags": [
        "extractor",
        "metadata",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for metadata_extractor')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/metadata_extractor.ts"
    },
    {
      "name": "metasploit_framework",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "metasploit_framework",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Metasploit action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target host or network (e.g., '192.168.1.1', '192.168.1.0/24"
        },
        {
          "name": "exploit",
          "type": "string",
          "required": false,
          "description": "Exploit module to use (e.g., 'exploit/windows/smb/ms17_010_eternalblue"
        },
        {
          "name": "payload",
          "type": "string",
          "required": false,
          "description": "Payload to use (e.g., 'windows/x64/meterpreter/reverse_tcp"
        },
        {
          "name": "lhost",
          "type": "string",
          "required": false,
          "description": "Local host IP for reverse connections"
        },
        {
          "name": "lport",
          "type": "number",
          "required": false,
          "description": "Local port for reverse connections"
        },
        {
          "name": "rhost",
          "type": "string",
          "required": false,
          "description": "Remote host IP"
        },
        {
          "name": "rport",
          "type": "number",
          "required": false,
          "description": "Remote port"
        },
        {
          "name": "session_id",
          "type": "number",
          "required": false,
          "description": "Session ID for interaction"
        },
        {
          "name": "module",
          "type": "string",
          "required": false,
          "description": "Module name or path"
        },
        {
          "name": "options",
          "type": "record",
          "required": false,
          "description": "Additional module options"
        },
        {
          "name": "workspace",
          "type": "string",
          "required": false,
          "description": "Workspace name"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file for results"
        },
        {
          "name": "automation_script",
          "type": "string",
          "required": false,
          "description": "Automation script path"
        },
        {
          "name": "custom_code",
          "type": "string",
          "required": false,
          "description": "Custom exploit code"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target platform"
        },
        {
          "name": "architecture",
          "type": "enum",
          "required": false,
          "description": "Target architecture"
        },
        {
          "name": "natural_language_command",
          "type": "string",
          "required": false,
          "description": "Natural language command for Metasploit operations (e.g., 'exploit the eternalblue vulnerability on the target', 'generate a reverse shell payload for windows', 'run post exploitation modules on the session"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode to prevent actual exploitation (disabled by default for full functionality)"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced Metasploit Framework integration for exploit development and execution with full cross-platform support (Windows, Linux, macOS, iOS, Android). Provides comprehensive penetration testing capabilities including exploit development, payload generation, post-exploitation modules, and automated attack chains. Supports natural language interface for intuitive exploit management across all platforms.",
      "safe_mode": true,
      "tags": [
        "framework",
        "metasploit",
        "specops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for metasploit_framework')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/penetration/metasploit_framework.ts"
    },
    {
      "name": "mimikatz_credentials",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mimikatz_credentials",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Mimikatz action to perform"
        },
        {
          "name": "target_user",
          "type": "string",
          "required": false,
          "description": "Target user for credential extraction"
        },
        {
          "name": "target_domain",
          "type": "string",
          "required": false,
          "description": "Target domain"
        },
        {
          "name": "target_dc",
          "type": "string",
          "required": false,
          "description": "Target domain controller"
        },
        {
          "name": "ticket_file",
          "type": "string",
          "required": false,
          "description": "Ticket file path"
        },
        {
          "name": "hash_value",
          "type": "string",
          "required": false,
          "description": "Hash value for pass-the-hash"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file for extracted credentials"
        },
        {
          "name": "custom_command",
          "type": "string",
          "required": false,
          "description": "Custom Mimikatz command"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode to prevent actual credential extraction (disabled by default for full functionality)"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced Mimikatz credential extraction and manipulation tool for Windows post-exploitation. Provides comprehensive credential harvesting capabilities including LSASS memory dumping, credential extraction, ticket manipulation, and privilege escalation techniques. Supports cross-platform operation with natural language interface for intuitive credential operations.",
      "safe_mode": true,
      "tags": [
        "credentials",
        "mimikatz",
        "specops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mimikatz_credentials')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/penetration/mimikatz_credentials.ts"
    },
    {
      "name": "mimikatz_enhanced",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mimikatz_enhanced",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Enhanced Mimikatz action to perform"
        },
        {
          "name": "target_domain",
          "type": "string",
          "required": false,
          "description": "Target domain"
        },
        {
          "name": "target_dc",
          "type": "string",
          "required": false,
          "description": "Target domain controller"
        },
        {
          "name": "target_computer",
          "type": "string",
          "required": false,
          "description": "Target computer"
        },
        {
          "name": "target_process",
          "type": "string",
          "required": false,
          "description": "Target process name or PID"
        },
        {
          "name": "password",
          "type": "string",
          "required": false,
          "description": "Password for authentication"
        },
        {
          "name": "hash_value",
          "type": "string",
          "required": false,
          "description": "Hash value (NTLM, LM, etc.)"
        },
        {
          "name": "key_value",
          "type": "string",
          "required": false,
          "description": "Key value for pass-the-key"
        },
        {
          "name": "certificate",
          "type": "string",
          "required": false,
          "description": "Certificate for pass-the-cert"
        },
        {
          "name": "ticket_format",
          "type": "enum",
          "required": false,
          "description": "Ticket format"
        },
        {
          "name": "service_name",
          "type": "string",
          "required": false,
          "description": "Service name for silver tickets"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path"
        },
        {
          "name": "dump_file",
          "type": "string",
          "required": false,
          "description": "Memory dump file path"
        },
        {
          "name": "evasion_technique",
          "type": "enum",
          "required": false,
          "description": "Evasion technique"
        },
        {
          "name": "persistence_method",
          "type": "enum",
          "required": false,
          "description": "Persistence method"
        },
        {
          "name": "architecture",
          "type": "enum",
          "required": false,
          "description": "Target architecture"
        },
        {
          "name": "stealth_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable stealth mode for evasion"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        },
        {
          "name": "debug",
          "type": "boolean",
          "required": false,
          "description": "Enable debug output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Enhanced Mimikatz credential extraction and manipulation tool with full cross-platform support (Windows, Linux, macOS, iOS, Android). Provides comprehensive credential harvesting capabilities including LSASS memory dumping, credential extraction, ticket manipulation, privilege escalation techniques, and advanced evasion methods. Supports natural language interface for intuitive credential operations across all platforms.",
      "safe_mode": true,
      "tags": [
        "enhanced",
        "mimikatz",
        "specops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mimikatz_enhanced')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/penetration/mimikatz_enhanced.ts"
    },
    {
      "name": "mobile_app_unified",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_app_unified",
      "args": [
        {
          "name": "operation",
          "type": "enum",
          "required": true,
          "description": "Mobile app toolkit operation to perform"
        },
        {
          "name": "app_id",
          "type": "string",
          "required": false,
          "description": "Mobile app identifier (bundle ID or package name)"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target mobile platform"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udcf1 **Unified Mobile App Toolkit** - Comprehensive mobile application lifecycle management combining analytics, deployment, monitoring, optimization, performance testing, security analysis, and quality assurance testing. Supports Android and iOS platforms with cross-platform compatibility, CI/CD integration, and advanced mobile development workflows.",
      "safe_mode": false,
      "tags": [
        "app",
        "general",
        "mobile",
        "unified"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_app_unified')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-modular.ts"
    },
    {
      "name": "mobile_device_info",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_device_info",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Device information action to perform"
        },
        {
          "name": "device_id",
          "type": "string",
          "required": false,
          "description": "Specific device ID to query"
        },
        {
          "name": "detailed",
          "type": "boolean",
          "required": false,
          "description": "Get detailed information"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Mobile device information and diagnostics",
      "safe_mode": false,
      "tags": [
        "device",
        "info",
        "mobile"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_device_info')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/mobile/mobile_device_info.ts"
    },
    {
      "name": "mobile_device_management",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_device_management",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Device management action to perform"
        },
        {
          "name": "device_id",
          "type": "string",
          "required": true,
          "description": "Target device identifier"
        },
        {
          "name": "policy_name",
          "type": "string",
          "required": false,
          "description": "Policy to apply to device"
        },
        {
          "name": "app_action",
          "type": "enum",
          "required": false,
          "description": "App management action"
        },
        {
          "name": "app_package",
          "type": "string",
          "required": false,
          "description": "App package name for management"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Mobile device management and policy enforcement",
      "safe_mode": false,
      "tags": [
        "device",
        "management",
        "mobile"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_device_management')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/mobile/mobile_device_management.ts"
    },
    {
      "name": "mobile_file_ops",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_file_ops",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "File operation: 'list' shows contents, 'copy'/'move' transfer files, 'delete' removes items, 'create' makes files, 'get_info' shows details, 'search' finds files."
        },
        {
          "name": "source",
          "type": "string",
          "required": false,
          "description": "Source path. Examples: '/sdcard/Documents/', '/var/mobile/Documents/', './photos/'. Required for most operations."
        },
        {
          "name": "destination",
          "type": "string",
          "required": false,
          "description": "Destination path for copy/move. Examples: '/sdcard/backup/', './backup/'. Include filename for file operations."
        },
        {
          "name": "content",
          "type": "string",
          "required": false,
          "description": "Content for new files. Examples: 'Hello World', '{\\\"config\\\": \\\"value\\\"}'. Used with create action."
        },
        {
          "name": "pattern",
          "type": "string",
          "required": false,
          "description": "Search pattern. Examples: '*.jpg', '*.log', 'backup*'. Used with search action."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Mobile file operations for Android and iOS devices. Perform file management, data transfer, and search operations on mobile platforms with appropriate permission handling.",
      "safe_mode": false,
      "tags": [
        "file",
        "general",
        "mobile",
        "ops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_file_ops')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "mobile_hardware",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_hardware",
      "args": [
        {
          "name": "feature",
          "type": "enum",
          "required": true,
          "description": "Hardware feature: 'camera' for photo/video, 'location' for GPS, 'sensors' for accelerometer/gyroscope, 'notifications' for alerts, 'audio' for microphone."
        },
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Action: 'check_availability' verifies feature exists, 'get_status' shows current state, 'get_data' retrieves information."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Mobile hardware access and sensor data for Android and iOS. Access device features like camera, location, sensors, and notifications with proper permission handling.",
      "safe_mode": false,
      "tags": [
        "general",
        "hardware",
        "mobile"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_hardware')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "mobile_network_analyzer",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_network_analyzer",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Network analysis action to perform"
        },
        {
          "name": "device_id",
          "type": "string",
          "required": true,
          "description": "Target mobile device identifier"
        },
        {
          "name": "capture_duration",
          "type": "number",
          "required": false,
          "description": "Traffic capture duration in seconds"
        },
        {
          "name": "filter_protocol",
          "type": "string",
          "required": false,
          "description": "Specific protocol to filter"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Mobile network traffic analysis and monitoring",
      "safe_mode": false,
      "tags": [
        "analyzer",
        "mobile",
        "network"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_network_analyzer')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/mobile/mobile_network_analyzer.ts"
    },
    {
      "name": "mobile_security_toolkit",
      "category": "mobile",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_security_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Mobile security action to perform"
        },
        {
          "name": "device_id",
          "type": "string",
          "required": false,
          "description": "Target mobile device identifier"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target mobile platform"
        },
        {
          "name": "cellular_modem",
          "type": "string",
          "required": false,
          "description": "Cellular modem interface for triangulation"
        },
        {
          "name": "api_key",
          "type": "string",
          "required": false,
          "description": "API key for cellular tower lookup"
        },
        {
          "name": "test_depth",
          "type": "enum",
          "required": false,
          "description": "Depth of security testing"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        },
        {
          "name": "auto_confirm",
          "type": "boolean",
          "required": false,
          "description": "Skip confirmation prompt (requires proper authorization)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udcf1 **Mobile Security Toolkit** - Comprehensive mobile device security testing and analysis with cellular triangulation, device assessment, app security testing, and network monitoring. Supports Android and iOS platforms with natural language interface for intuitive operation.",
      "safe_mode": false,
      "tags": [
        "mobile",
        "security",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/mobile/mobile_security_toolkit.ts"
    },
    {
      "name": "mobile_system_tools",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "mobile_system_tools",
      "args": [
        {
          "name": "tool",
          "type": "enum",
          "required": true,
          "description": "System tool: 'processes' shows running apps, 'storage' checks disk usage, 'packages' lists installed apps, 'system_info' provides device details."
        },
        {
          "name": "action",
          "type": "string",
          "required": false,
          "description": "Action to perform. Examples: 'list', 'info', 'analyze'. Actions vary by tool type."
        },
        {
          "name": "filter",
          "type": "string",
          "required": false,
          "description": "Filter results. Examples: 'system', 'user', 'running'. Helps narrow down results."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Mobile system management for Android and iOS. Monitor processes, check storage, examine packages, and review system information on mobile devices.",
      "safe_mode": false,
      "tags": [
        "general",
        "mobile",
        "system",
        "tools"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for mobile_system_tools')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "multimedia_tool",
      "category": "media",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "multimedia_tool",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Multimedia tool action to perform. Options: status (get tool status), open (open media file), edit (apply editing operation), export (export edited media), batch_process (process multiple files), create_project (create project), get_session (get session details), delete_session (delete session), record_audio (record audio), get_audio_devices (list audio devices), start_recording (begin recording), generate_svg (create SVG graphics), generate_ai_image (generate AI images)"
        },
        {
          "name": "source",
          "type": "string",
          "required": false,
          "description": "Media source path (local file) or URL (http/https) to open for editing. Supports audio (mp3, wav, flac, aac, ogg, m4a, wma), image (jpg, jpeg, png, gif, webp, tiff, bmp, svg), and video (mp4, avi, mov, mkv, webm, flv, wmv, m4v) formats"
        },
        {
          "name": "sessionName",
          "type": "string",
          "required": false,
          "description": "Custom name for the editing session. If not provided, defaults to 'untitled' or auto-generated based on source file"
        },
        {
          "name": "type",
          "type": "enum",
          "required": false,
          "description": "Media type specification. If not provided, will be auto-detected from file extension or content analysis"
        },
        {
          "name": "sessionId",
          "type": "string",
          "required": false,
          "description": "Unique session identifier for referencing an existing editing session. Required for edit, export, get_session, and delete_session actions"
        },
        {
          "name": "operation",
          "type": "enum",
          "required": false,
          "description": "Editing operation to apply. Audio: trim, normalize, fade, gain, reverse, time_stretch, pitch_shift. Image: resize, crop, rotate, flip, filter, enhance, adjust, vignette, border. Video: cut, merge, convert, resize_video, add_audio, add_subtitles, apply_effects. Universal: composite, watermark, batch_process"
        },
        {
          "name": "params",
          "type": "object",
          "required": false,
          "description": "Operation-specific parameters object. Structure varies by operation type. Examples: resize: {width: 800, height: 600, fit: 'cover'}, trim: {start: 10, end: 30}, filter: {type: 'blur', radius: 2}"
        },
        {
          "name": "format",
          "type": "string",
          "required": false,
          "description": "Output format for export operations. Audio: wav, mp3, flac, aac, ogg. Image: jpg, jpeg, png, gif, webp, tiff, bmp, svg. Video: mp4, avi, mov, mkv, webm. If not specified, uses original format"
        },
        {
          "name": "quality",
          "type": "number",
          "required": false,
          "description": "Output quality setting (1-100). Higher values produce better quality but larger file sizes. Default: 80. Applies to compressed formats like jpg, mp3, mp4"
        },
        {
          "name": "path",
          "type": "string",
          "required": false,
          "description": "Output file path for export operations. If not specified, generates path in session working directory with appropriate extension"
        },
        {
          "name": "options",
          "type": "object",
          "required": false,
          "description": "Additional export options object. May include codec settings, compression options, metadata preservation, and format-specific parameters"
        },
        {
          "name": "sessionIds",
          "type": "array",
          "required": false,
          "description": "Array of session IDs for batch processing operations. Used with batch_process action to apply operations to multiple sessions simultaneously"
        },
        {
          "name": "operations",
          "type": "array",
          "required": false,
          "description": "Array of batch operations to apply. Each operation object contains: name (operation identifier), operation (operation type), params (operation-specific parameters)"
        },
        {
          "name": "outputDir",
          "type": "string",
          "required": false,
          "description": "Output directory path for batch processing results. If not specified, uses system temp directory. Directory will be created if it doesn't exist"
        },
        {
          "name": "name",
          "type": "string",
          "required": false,
          "description": "Name for project creation or session naming. Used with create_project action or as custom session name"
        },
        {
          "name": "sessions",
          "type": "array",
          "required": false,
          "description": "Array of session IDs to include in a project. Used with create_project action to organize related media sessions"
        },
        {
          "name": "deviceId",
          "type": "string",
          "required": false,
          "description": "Specific audio device ID for recording. Use get_audio_devices to list available devices. If not specified, uses auto-detection"
        },
        {
          "name": "deviceType",
          "type": "enum",
          "required": false,
          "description": "Audio device type for recording. microphone: record from microphone input, stereo_mix: record system audio (what's playing), auto: automatically select best available device"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Recording duration in seconds (1-3600). Default: 30 seconds. Maximum: 1 hour"
        },
        {
          "name": "recordingFormat",
          "type": "enum",
          "required": false,
          "description": "Audio recording format. wav: uncompressed (best quality), mp3: compressed (smaller size), flac: lossless compression, aac: advanced compression. Default: wav"
        },
        {
          "name": "width",
          "type": "number",
          "required": false,
          "description": "Width in pixels for generated content. Default: 800px. Recommended range: 100-4096px. Higher values create more detailed but larger files"
        },
        {
          "name": "height",
          "type": "number",
          "required": false,
          "description": "Height in pixels for generated content. Default: 600px. Recommended range: 100-4096px. Higher values create more detailed but larger files"
        },
        {
          "name": "style",
          "type": "enum",
          "required": false,
          "description": "Generation style for content creation. minimal: simple, clean designs. detailed: complex, intricate patterns. geometric: angular, mathematical shapes. organic: natural, flowing forms. technical: mechanical, precise elements. artistic: creative, expressive designs. realistic: lifelike, photographic quality. cartoon: animated, stylized appearance. abstract: non-representational, conceptual. photographic: camera-like realism. digital_art: computer-generated aesthetics"
        },
        {
          "name": "colors",
          "type": "array",
          "required": false,
          "description": "Color palette as array of hex color codes (e.g., ['#FF0000', '#00FF00', '#0000FF']). If not specified, uses default palette based on style and prompt"
        },
        {
          "name": "elements",
          "type": "array",
          "required": false,
          "description": "Specific visual elements to include in generation. Examples: ['trees', 'mountains', 'buildings', 'people', 'animals']. Helps guide the AI generation process"
        },
        {
          "name": "model",
          "type": "string",
          "required": false,
          "description": "AI model to use for image generation. Options: 'dall-e-3', 'dall-e-2', 'stable-diffusion', 'midjourney', 'auto'. If not specified, auto-detects best available model based on API keys and capabilities"
        },
        {
          "name": "fallbackToSVG",
          "type": "boolean",
          "required": false,
          "description": "Enable automatic fallback to SVG generation if AI model is unavailable or fails. Default: true. Ensures content generation always succeeds with graceful degradation"
        },
        {
          "name": "generationQuality",
          "type": "enum",
          "required": false,
          "description": "Generation quality level. low: faster generation, basic quality. medium: balanced speed and quality. high: best quality, slower generation. Default: medium"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83c\udfac **Unified Multimedia Editing Suite** - Comprehensive cross-platform multimedia processing tool combining audio, image, and video editing capabilities. Features session management, batch processing, project organization, cross-platform audio recording, AI-powered content generation, and natural language interface. Supports all major media formats with professional-grade editing operations.",
      "safe_mode": false,
      "tags": [
        "media",
        "multimedia",
        "tool"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for multimedia_tool')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/media/multimedia_tool.ts"
    },
    {
      "name": "natural_language_router",
      "category": "discovery",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "natural_language_router",
      "args": [
        {
          "name": "query",
          "type": "string",
          "required": true,
          "description": "Natural language query to route to appropriate tools"
        },
        {
          "name": "context",
          "type": "string",
          "required": false,
          "description": "Additional context about the request"
        },
        {
          "name": "user_intent",
          "type": "string",
          "required": false,
          "description": "User's intended goal or objective"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Route natural language requests to appropriate tools with intelligent matching",
      "safe_mode": false,
      "tags": [
        "discovery",
        "language",
        "natural",
        "router"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for natural_language_router')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/discovery/natural_language_router.ts"
    },
    {
      "name": "network_diagnostics",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_diagnostics",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target host or network to diagnose"
        },
        {
          "name": "tests",
          "type": "array",
          "required": true,
          "description": "Network tests to perform"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout for individual tests in seconds"
        },
        {
          "name": "output_format",
          "type": "string",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Comprehensive network diagnostics and troubleshooting",
      "safe_mode": false,
      "tags": [
        "diagnostics",
        "network"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_diagnostics')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/network_diagnostics.ts"
    },
    {
      "name": "network_discovery",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_discovery",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target IP address, domain, or network range (CIDR)"
        },
        {
          "name": "discovery_type",
          "type": "enum",
          "required": true,
          "description": "Type of discovery to perform"
        },
        {
          "name": "port_range",
          "type": "string",
          "required": false,
          "description": "Port range to scan (e.g., '1-1000', '80,443,8080"
        },
        {
          "name": "scan_type",
          "type": "enum",
          "required": false,
          "description": "Port scan type"
        },
        {
          "name": "service_detection",
          "type": "boolean",
          "required": false,
          "description": "Enable service version detection"
        },
        {
          "name": "os_detection",
          "type": "boolean",
          "required": false,
          "description": "Enable OS detection"
        },
        {
          "name": "script_scanning",
          "type": "boolean",
          "required": false,
          "description": "Enable NSE script scanning"
        },
        {
          "name": "timing",
          "type": "enum",
          "required": false,
          "description": "Scan timing template"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Network discovery and reconnaissance using port scanners, service detection, and DNS lookups",
      "safe_mode": false,
      "tags": [
        "discovery",
        "network"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_discovery')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/network_discovery.ts"
    },
    {
      "name": "network_penetration",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_penetration",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target network or host"
        },
        {
          "name": "technique",
          "type": "enum",
          "required": true,
          "description": "Penetration technique to use"
        },
        {
          "name": "payload",
          "type": "string",
          "required": false,
          "description": "Custom payload or exploit to use"
        },
        {
          "name": "evasion",
          "type": "boolean",
          "required": false,
          "description": "Enable anti-detection evasion techniques"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced network penetration testing and exploitation",
      "safe_mode": false,
      "tags": [
        "network",
        "penetration"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_penetration')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/network_penetration.ts"
    },
    {
      "name": "network_security",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_security",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Security action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target network or host"
        },
        {
          "name": "scan_type",
          "type": "enum",
          "required": true,
          "description": "Type of security scan"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Scan duration in minutes"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Comprehensive network security assessment and monitoring",
      "safe_mode": false,
      "tags": [
        "network",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/network_security.ts"
    },
    {
      "name": "network_traffic_analyzer",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_traffic_analyzer",
      "args": [],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced network traffic capture, analysis, and monitoring toolkit",
      "safe_mode": false,
      "tags": [
        "analyzer",
        "network",
        "traffic"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_traffic_analyzer')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/network_traffic_analyzer.ts"
    },
    {
      "name": "network_triangulation",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_triangulation",
      "args": [
        {
          "name": "triangulation_type",
          "type": "enum",
          "required": true,
          "description": "Type of triangulation to perform"
        },
        {
          "name": "access_points",
          "type": "array",
          "required": false,
          "description": "MAC address of access point"
        },
        {
          "name": "cell_towers",
          "type": "array",
          "required": false,
          "description": "Cell tower ID"
        },
        {
          "name": "database",
          "type": "enum",
          "required": true,
          "description": "Location database to use"
        },
        {
          "name": "accuracy_target",
          "type": "enum",
          "required": false,
          "description": "Desired accuracy level"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Network triangulation using Wi-Fi access points and cell towers for device location",
      "safe_mode": false,
      "tags": [
        "network",
        "triangulation"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_triangulation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/network_triangulation.ts"
    },
    {
      "name": "network_utilities",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "network_utilities",
      "args": [
        {
          "name": "utility_type",
          "type": "enum",
          "required": true,
          "description": "Type of network utility to use"
        },
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target IP address, domain, or network range"
        },
        {
          "name": "options",
          "type": "object",
          "required": false,
          "description": "Maximum number of hops for traceroute"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Network utility tools including traceroute, ping sweeps, and VPN management",
      "safe_mode": false,
      "tags": [
        "network",
        "utilities"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for network_utilities')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/network_utilities.ts"
    },
    {
      "name": "nmap_scanner",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "nmap_scanner",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Nmap scan action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target host or network (e.g., '192.168.1.1', '192.168.1.0/24"
        },
        {
          "name": "ports",
          "type": "string",
          "required": false,
          "description": "Port range or specific ports (e.g., '1-1000', '22,80,443"
        },
        {
          "name": "scan_type",
          "type": "enum",
          "required": false,
          "description": "Scan type"
        },
        {
          "name": "timing",
          "type": "enum",
          "required": false,
          "description": "Timing template"
        },
        {
          "name": "scripts",
          "type": "array",
          "required": false,
          "description": "NSE scripts to run"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target platform"
        },
        {
          "name": "architecture",
          "type": "enum",
          "required": false,
          "description": "Target architecture"
        },
        {
          "name": "natural_language_command",
          "type": "string",
          "required": false,
          "description": "Natural language command for Nmap operations (e.g., 'scan the network for open ports', 'find all hosts on the subnet', 'detect services running on the target', 'perform a stealth scan of the target"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode to prevent actual scanning (disabled by default for full functionality)"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced Nmap network discovery and security auditing tool with full cross-platform support (Windows, Linux, macOS, iOS, Android). Provides comprehensive network scanning capabilities including host discovery, port scanning, service detection, OS fingerprinting, and vulnerability detection. Supports natural language interface for intuitive network reconnaissance across all platforms.",
      "safe_mode": true,
      "tags": [
        "nmap",
        "scanner",
        "specops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for nmap_scanner')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/network/nmap_scanner.ts"
    },
    {
      "name": "ocr_tool",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "ocr_tool",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "OCR action to perform."
        },
        {
          "name": "input_file",
          "type": "string",
          "required": true,
          "description": "Path to the input file (image, PDF, video)."
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Path for the output text file."
        },
        {
          "name": "language",
          "type": "string",
          "required": false,
          "description": "Language for OCR processing."
        },
        {
          "name": "confidence_threshold",
          "type": "number",
          "required": false,
          "description": "Minimum confidence threshold for text recognition (0-100)."
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for extracted text."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Optical Character Recognition (OCR) tool for extracting text from images, documents, and video frames. Supports multiple languages, handwriting recognition, and various image formats across all platforms.",
      "safe_mode": false,
      "tags": [
        "general",
        "ocr",
        "tool"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for ocr_tool')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "osint_reconnaissance",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "osint_reconnaissance",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target IP address, domain, or hostname"
        },
        {
          "name": "recon_type",
          "type": "enum",
          "required": true,
          "description": "Type of reconnaissance to perform"
        },
        {
          "name": "include_historical",
          "type": "boolean",
          "required": false,
          "description": "Include historical data"
        },
        {
          "name": "include_subdomains",
          "type": "boolean",
          "required": false,
          "description": "Include subdomain enumeration"
        },
        {
          "name": "include_ports",
          "type": "boolean",
          "required": false,
          "description": "Include port scanning"
        },
        {
          "name": "include_services",
          "type": "boolean",
          "required": false,
          "description": "Include service detection"
        },
        {
          "name": "search_engines",
          "type": "array",
          "required": false,
          "description": "Additional search engines to query"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Open Source Intelligence (OSINT) reconnaissance and information gathering",
      "safe_mode": false,
      "tags": [
        "network",
        "osint",
        "reconnaissance"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for osint_reconnaissance')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/osint_reconnaissance.ts"
    },
    {
      "name": "packet_sniffer",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "packet_sniffer",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Packet capture action to perform. 'start_capture' begins packet collection, 'stop_capture' ends collection, 'get_captured_packets' retrieves stored packets, 'analyze_traffic' performs deep analysis, filtering options focus on specific protocols/IPs/ports, 'export_pcap' saves in standard format, monitoring actions provide real-time insights."
        },
        {
          "name": "interface",
          "type": "string",
          "required": false,
          "description": "Network interface to capture on. Examples: 'eth0', 'wlan0', 'Wi-Fi', 'Ethernet'. Leave empty for auto-detection. Use 'ifconfig' or 'ipconfig' to list available interfaces."
        },
        {
          "name": "filter",
          "type": "string",
          "required": false,
          "description": "Berkeley Packet Filter (BPF) expression to filter packets. Examples: 'host 192.168.1.1', 'port 80', 'tcp and dst port 443', 'icmp', 'not broadcast'. Advanced filtering for specific traffic."
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds. Examples: 30 for short capture, 300 for detailed analysis, 3600 for long-term monitoring. Longer durations provide more comprehensive data."
        },
        {
          "name": "max_packets",
          "type": "number",
          "required": false,
          "description": "Maximum number of packets to capture. Examples: 1000 for quick analysis, 10000 for detailed study, 100000 for comprehensive monitoring. Helps manage storage and processing."
        },
        {
          "name": "protocol",
          "type": "enum",
          "required": false,
          "description": "Protocol to focus on. 'tcp' for reliable connections, 'udp' for streaming/gaming, 'icmp' for ping/traceroute, 'http' for web traffic, 'dns' for name resolution, 'all' for everything."
        },
        {
          "name": "source_ip",
          "type": "string",
          "required": false,
          "description": "Filter by source IP address. Examples: '192.168.1.100', '10.0.0.5', '8.8.8.8'. Captures packets originating from this address."
        },
        {
          "name": "dest_ip",
          "type": "string",
          "required": false,
          "description": "Filter by destination IP address. Examples: '192.168.1.1', '172.16.0.1', '1.1.1.1'. Captures packets going to this address."
        },
        {
          "name": "source_port",
          "type": "number",
          "required": false,
          "description": "Filter by source port number. Examples: 80 for HTTP, 443 for HTTPS, 22 for SSH, 53 for DNS. Focuses on traffic from specific services."
        },
        {
          "name": "dest_port",
          "type": "number",
          "required": false,
          "description": "Filter by destination port number. Examples: 80 for HTTP servers, 443 for HTTPS, 25 for SMTP, 110 for POP3. Targets specific services."
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "File to save captured packets. Examples: './capture.pcap', '/tmp/network_capture.pcap', 'C:\\\\Captures\\\\traffic.pcap'. Saves in pcap format for analysis tools like Wireshark."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udce1 **Advanced Network Traffic Analysis & Packet Capture Tool** - Professional-grade network monitoring and security analysis platform for authorized corporate network testing. Captures, analyzes, and monitors network packets in real-time across Windows, Linux, macOS, Android, and iOS platforms. Features protocol filtering, bandwidth monitoring, anomaly detection, traffic analysis, PCAP export, and comprehensive network security assessment capabilities with support for all major network protocols.",
      "safe_mode": false,
      "tags": [
        "network",
        "packet",
        "sniffer"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for packet_sniffer')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/packet_sniffer.ts"
    },
    {
      "name": "pacu_aws_exploitation",
      "category": "specops",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "pacu_aws_exploitation",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Pacu action to perform"
        },
        {
          "name": "aws_secret_key",
          "type": "string",
          "required": false,
          "description": "AWS secret access key"
        },
        {
          "name": "aws_session_token",
          "type": "string",
          "required": false,
          "description": "AWS session token"
        },
        {
          "name": "aws_region",
          "type": "string",
          "required": false,
          "description": "AWS region"
        },
        {
          "name": "aws_profile",
          "type": "string",
          "required": false,
          "description": "AWS profile name"
        },
        {
          "name": "target_region",
          "type": "string",
          "required": false,
          "description": "Target AWS region"
        },
        {
          "name": "target_service",
          "type": "string",
          "required": false,
          "description": "Target AWS service"
        },
        {
          "name": "target_resource",
          "type": "string",
          "required": false,
          "description": "Target AWS resource"
        },
        {
          "name": "data_type",
          "type": "string",
          "required": false,
          "description": "Type of data to exfiltrate"
        },
        {
          "name": "resource_type",
          "type": "string",
          "required": false,
          "description": "Type of resource to exploit"
        },
        {
          "name": "architecture",
          "type": "enum",
          "required": false,
          "description": "Target architecture"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        },
        {
          "name": "debug",
          "type": "boolean",
          "required": false,
          "description": "Enable debug output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced Pacu AWS exploitation framework with full cross-platform support (Windows, Linux, macOS, iOS, Android). Provides comprehensive AWS security testing capabilities including privilege escalation, data exfiltration, service enumeration, and cloud infrastructure exploitation across all platforms. Supports natural language interface for intuitive cloud security operations.",
      "safe_mode": true,
      "tags": [
        "aws",
        "exploitation",
        "pacu",
        "specops"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for pacu_aws_exploitation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/specops/cloud_security/pacu_aws_exploitation.ts"
    },
    {
      "name": "parse_email",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "parse_email",
      "args": [
        {
          "name": "email_content",
          "type": "string",
          "required": true,
          "description": "Raw email content in MIME format or email file path. Examples: 'From: sender@example.com\\\\nSubject: Test\\\\n\\\\nHello world', './email.eml', '/path/to/email.txt'."
        },
        {
          "name": "parse_attachments",
          "type": "boolean",
          "required": false,
          "description": "Whether to parse and extract email attachments. Set to true to include attachment information, false to skip attachments."
        },
        {
          "name": "extract_links",
          "type": "boolean",
          "required": false,
          "description": "Whether to extract URLs and links from email content. Set to true to find all links, false to skip link extraction."
        },
        {
          "name": "extract_emails",
          "type": "boolean",
          "required": false,
          "description": "Whether to extract email addresses from the content. Set to true to find all email addresses, false to skip email extraction."
        },
        {
          "name": "include_headers",
          "type": "boolean",
          "required": false,
          "description": "Whether to include email headers in the parsed result. Set to true for complete header information, false for content only."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Parse and analyze email content across all platforms (Windows, Linux, macOS, Android, iOS). Extract text, HTML, attachments, headers, and metadata from email messages with comprehensive parsing capabilities.",
      "safe_mode": false,
      "tags": [
        "email",
        "general",
        "parse"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for parse_email')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "password_cracker",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "password_cracker",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target host to test password authentication. Examples: '192.168.1.1', 'company.com'"
        },
        {
          "name": "service",
          "type": "enum",
          "required": true,
          "description": "Service to test authentication against"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "Username to test authentication with"
        },
        {
          "name": "password_list",
          "type": "array",
          "required": false,
          "description": "Custom password list to test. If not provided, uses common passwords"
        },
        {
          "name": "method",
          "type": "enum",
          "required": false,
          "description": "Password cracking method to use"
        },
        {
          "name": "max_attempts",
          "type": "number",
          "required": false,
          "description": "Maximum number of password attempts before stopping"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds for each authentication attempt"
        },
        {
          "name": "custom_port",
          "type": "number",
          "required": false,
          "description": "Custom port number if different from service default"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output for detailed cracking information"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udd10 **Advanced Password Security Testing Tool** - Comprehensive authentication testing framework for authorized corporate security assessments. Tests password strength and authentication mechanisms across SSH, FTP, RDP, SMB, HTTP, and database services on Windows, Linux, macOS, Android, and iOS platforms. Supports dictionary attacks, brute force testing, hybrid methods, and rainbow table attacks with configurable attempt limits and timeout settings.",
      "safe_mode": false,
      "tags": [
        "cracker",
        "password",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for password_cracker')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/password_cracker.ts"
    },
    {
      "name": "password_generator",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "password_generator",
      "args": [
        {
          "name": "length",
          "type": "number",
          "required": false,
          "description": "Password length (default: 16)"
        },
        {
          "name": "include_uppercase",
          "type": "boolean",
          "required": false,
          "description": "Include uppercase letters"
        },
        {
          "name": "include_lowercase",
          "type": "boolean",
          "required": false,
          "description": "Include lowercase letters"
        },
        {
          "name": "include_numbers",
          "type": "boolean",
          "required": false,
          "description": "Include numbers"
        },
        {
          "name": "include_symbols",
          "type": "boolean",
          "required": false,
          "description": "Include special symbols"
        },
        {
          "name": "exclude_similar",
          "type": "boolean",
          "required": false,
          "description": "Exclude similar characters (l, 1, I, O, 0)"
        },
        {
          "name": "exclude_ambiguous",
          "type": "boolean",
          "required": false,
          "description": "Exclude ambiguous characters"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Secure password generation with customizable options",
      "safe_mode": false,
      "tags": [
        "generator",
        "password",
        "utilities"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for password_generator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/utilities/password_generator.ts"
    },
    {
      "name": "pentest_plus_plus",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "pentest_plus_plus",
      "args": [
        {
          "name": "action",
          "type": "string",
          "required": true,
          "description": "PenTest++ action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target system, application, or network to test"
        },
        {
          "name": "target_type",
          "type": "string",
          "required": false,
          "description": "Type of target (web_app, network, mobile, cloud, api, etc.)"
        },
        {
          "name": "reconnaissance_type",
          "type": "string",
          "required": false,
          "description": "Type of reconnaissance to perform"
        },
        {
          "name": "vulnerability_type",
          "type": "string",
          "required": false,
          "description": "Specific vulnerability type to focus on"
        },
        {
          "name": "exploit_framework",
          "type": "string",
          "required": false,
          "description": "Exploit framework to use (metasploit, custom, etc.)"
        },
        {
          "name": "attack_vector",
          "type": "string",
          "required": false,
          "description": "Attack vector to use"
        },
        {
          "name": "payload_type",
          "type": "string",
          "required": false,
          "description": "Type of payload to generate"
        },
        {
          "name": "report_format",
          "type": "string",
          "required": false,
          "description": "Format for generated reports"
        },
        {
          "name": "ai_model",
          "type": "string",
          "required": false,
          "description": "AI model to use for analysis"
        },
        {
          "name": "automation_level",
          "type": "string",
          "required": false,
          "description": "Level of automation (manual, semi_automated, fully_automated)"
        },
        {
          "name": "stealth_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable stealth mode for detection avoidance"
        },
        {
          "name": "ai_workflow_generation",
          "type": "boolean",
          "required": false,
          "description": "Enable AI-powered workflow generation"
        },
        {
          "name": "attack_path_prediction",
          "type": "boolean",
          "required": false,
          "description": "Enable AI attack path prediction"
        },
        {
          "name": "custom_workflow",
          "type": "string",
          "required": false,
          "description": "Custom workflow configuration"
        },
        {
          "name": "integration_type",
          "type": "string",
          "required": false,
          "description": "Integration type (metasploit, kali, custom)"
        },
        {
          "name": "ethical_guidelines",
          "type": "boolean",
          "required": false,
          "description": "Enforce ethical hacking guidelines"
        },
        {
          "name": "natural_language_command",
          "type": "string",
          "required": false,
          "description": "Natural language command for PenTest++ operations"
        },
        {
          "name": "platform",
          "type": "string",
          "required": false,
          "description": "Target platform"
        },
        {
          "name": "architecture",
          "type": "string",
          "required": false,
          "description": "Target architecture"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode for testing"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83e\udd16 **PenTest++ - AI-Augmented Penetration Testing System** - Advanced AI-powered penetration testing platform that combines generative AI with automation tools for building ethical hacking workflows. Features autonomous reconnaissance, vulnerability discovery, exploit development, and comprehensive reporting with Metasploit integration. Uses AI to",
      "safe_mode": true,
      "tags": [
        "pentest",
        "plus",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for pentest_plus_plus')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/pentest_plus_plus.ts"
    },
    {
      "name": "pentest_plus_plus_natural_language",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "pentest_plus_plus_natural_language",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for PenTest++ operations (e.g., 'perform reconnaissance on the target', 'generate AI workflow for penetration testing', 'integrate with Metasploit', 'predict attack paths for the system"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83e\udd16 **PenTest++ Natural Language Interface** - Process natural language commands for PenTest++ AI-augmented penetration testing operations. Converts conversational requests like",
      "safe_mode": true,
      "tags": [
        "language",
        "natural",
        "pentest",
        "plus",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for pentest_plus_plus_natural_language')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/pentest_plus_plus_natural_language.ts"
    },
    {
      "name": "penetration_testing_toolkit",
      "category": "penetration",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "penetration_testing_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Penetration testing action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target system or network to test"
        },
        {
          "name": "scope",
          "type": "string",
          "required": false,
          "description": "Testing scope and limitations"
        },
        {
          "name": "methodology",
          "type": "enum",
          "required": false,
          "description": "Testing methodology to use"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Comprehensive penetration testing and ethical hacking toolkit",
      "safe_mode": false,
      "tags": [
        "penetration",
        "testing",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for penetration_testing_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/penetration/penetration_testing_toolkit.ts"
    },
    {
      "name": "port_scanner",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "port_scanner",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target hostname, IP address, or network range to scan"
        },
        {
          "name": "ports",
          "type": "array",
          "required": false,
          "description": "Specific port numbers to scan (e.g., [80, 443, 8080])"
        },
        {
          "name": "port_range",
          "type": "string",
          "required": false,
          "description": "Port range specification (e.g., '1-1000', '80,443,8080', 'common"
        },
        {
          "name": "scan_type",
          "type": "enum",
          "required": false,
          "description": "Port scan protocol type - TCP for connection-oriented, UDP for datagram, both for comprehensive"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Connection timeout in milliseconds (default: 5000ms)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced network port scanning and analysis tool with multiple scan types, service detection, and comprehensive reporting",
      "safe_mode": false,
      "tags": [
        "network",
        "port",
        "scanner"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for port_scanner')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/port_scanner.ts"
    },
    {
      "name": "proc_run",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "proc_run",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "The command to execute. Examples: 'ls', 'dir', 'cat', 'echo', 'python', 'node', 'git', 'docker'. Can be any executable available in your system PATH or full path to an executable."
        },
        {
          "name": "args",
          "type": "array",
          "required": false,
          "description": "Array of command line arguments to pass to the command. Examples: ['-l', '-a'] for 'ls -l -a', ['--version'] for version info, ['install', 'package'] for package installation."
        },
        {
          "name": "cwd",
          "type": "string",
          "required": false,
          "description": "Working directory for the command. Examples: './project', '/home/user/workspace', 'C:\\\\Users\\\\User\\\\Projects'. If not specified, uses the current working directory."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Run a process with arguments",
      "safe_mode": false,
      "tags": [
        "general",
        "proc",
        "run"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for proc_run')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "proc_run_elevated",
      "category": "process",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "proc_run_elevated",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Command to execute with elevated privileges"
        },
        {
          "name": "args",
          "type": "array",
          "required": false,
          "description": "Command line arguments"
        },
        {
          "name": "working_dir",
          "type": "string",
          "required": false,
          "description": "Working directory for execution"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Execution timeout in seconds"
        },
        {
          "name": "reason",
          "type": "string",
          "required": false,
          "description": "Reason for requiring elevated privileges"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Elevated privilege process execution",
      "safe_mode": false,
      "tags": [
        "elevated",
        "proc",
        "process",
        "run"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for proc_run_elevated')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/process/proc_run_elevated.ts"
    },
    {
      "name": "proc_run_remote",
      "category": "process",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "proc_run_remote",
      "args": [
        {
          "name": "target_host",
          "type": "string",
          "required": true,
          "description": "Target device WAN IP address or hostname"
        },
        {
          "name": "target_port",
          "type": "number",
          "required": false,
          "description": "Target port (defaults based on protocol)"
        },
        {
          "name": "protocol",
          "type": "enum",
          "required": true,
          "description": "Connection protocol"
        },
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Command to execute on remote device"
        },
        {
          "name": "args",
          "type": "array",
          "required": false,
          "description": "Command line arguments"
        },
        {
          "name": "working_dir",
          "type": "string",
          "required": false,
          "description": "Working directory for execution"
        },
        {
          "name": "username",
          "type": "string",
          "required": false,
          "description": "Username for authentication (optional - will use passwordless methods if not provided)"
        },
        {
          "name": "password",
          "type": "string",
          "required": false,
          "description": "Password for authentication (optional - will use passwordless methods if not provided)"
        },
        {
          "name": "key_file",
          "type": "string",
          "required": false,
          "description": "SSH private key file path (optional - will auto-detect if not provided)"
        },
        {
          "name": "elevated",
          "type": "boolean",
          "required": false,
          "description": "Execute with elevated privileges"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Connection and execution timeout in seconds"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target platform (auto-detect if not specified)"
        },
        {
          "name": "capture_output",
          "type": "boolean",
          "required": false,
          "description": "Capture command output"
        },
        {
          "name": "interactive",
          "type": "boolean",
          "required": false,
          "description": "Enable interactive mode"
        },
        {
          "name": "passwordless",
          "type": "boolean",
          "required": false,
          "description": "Force passwordless authentication methods"
        },
        {
          "name": "auto_auth",
          "type": "boolean",
          "required": false,
          "description": "Automatically detect and use available authentication methods"
        },
        {
          "name": "custom_protocol_config",
          "type": "record",
          "required": false,
          "description": "Custom protocol configuration"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83c\udf10 **Remote Process Execution Tool** - Execute commands on remote devices across all platforms (Windows, Linux, macOS, iOS, Android) via WAN IP addresses with elevated permissions support. Supports passwordless authentication, SSH, WinRM, ADB, iOS Deploy, and custom protocols.",
      "safe_mode": false,
      "tags": [
        "proc",
        "process",
        "remote",
        "run"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for proc_run_remote')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/process/proc_run_remote.ts"
    },
    {
      "name": "psychology",
      "category": "psychology",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "psychology",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Action to perform: analyze_text (psychological analysis), diagnostic_reference (lookup criteria), natural_language (conversational interface), platform_info (capabilities), rag_query (search diagnostic database), crisis_check (emergency assessment), security_assessment (exploitation vectors), knowledge_base_query (search comprehensive psychology resources), dark_psychology_analysis (dark psychology techniques), manipulation_detection (detect manipulation attempts), body_language_analysis (nonverbal communication), nlp_techniques (neuro-linguistic programming), emotional_intelligence_assessment (EI analysis)"
        },
        {
          "name": "location",
          "type": "string",
          "required": false,
          "description": "Location for finding local resources (city, state, zip code, or 'city, state' format)"
        },
        {
          "name": "mode",
          "type": "enum",
          "required": false,
          "description": "Mode of operation: 'support' for therapeutic resources, 'security_awareness' for educational exploitation analysis"
        },
        {
          "name": "searchRadius",
          "type": "number",
          "required": false,
          "description": "Search radius in miles for local resources (default: 25 miles)"
        },
        {
          "name": "includeEmergencyResources",
          "type": "boolean",
          "required": false,
          "description": "Include emergency mental health resources in results"
        },
        {
          "name": "includeSupportGroups",
          "type": "boolean",
          "required": false,
          "description": "Include local support groups in results"
        },
        {
          "name": "detailedAnalysis",
          "type": "boolean",
          "required": false,
          "description": "Provide detailed psychological analysis with confidence scores"
        },
        {
          "name": "includeRAGReference",
          "type": "boolean",
          "required": false,
          "description": "Include RAG system diagnostic references from DSM-V/ICD-10"
        },
        {
          "name": "searchValue",
          "type": "string",
          "required": false,
          "description": "Value to search for (diagnostic code, name, category, or symptoms)"
        },
        {
          "name": "system",
          "type": "enum",
          "required": false,
          "description": "Diagnostic system to search (DSM-5, ICD-10, ICD-11, or all)"
        },
        {
          "name": "includeComorbidities",
          "type": "boolean",
          "required": false,
          "description": "Include comorbid conditions in results"
        },
        {
          "name": "includeTreatment",
          "type": "boolean",
          "required": false,
          "description": "Include treatment guidelines in results"
        },
        {
          "name": "category",
          "type": "string",
          "required": false,
          "description": "Specific diagnostic category to filter by"
        },
        {
          "name": "severity",
          "type": "string",
          "required": false,
          "description": "Severity level to filter by"
        },
        {
          "name": "maxResults",
          "type": "number",
          "required": false,
          "description": "Maximum number of results to return"
        },
        {
          "name": "includeCriteria",
          "type": "boolean",
          "required": false,
          "description": "Include diagnostic criteria in results"
        },
        {
          "name": "platform",
          "type": "string",
          "required": false,
          "description": "Target platform (auto-detected if not specified)"
        },
        {
          "name": "difficulty",
          "type": "enum",
          "required": false,
          "description": "Difficulty level of techniques"
        },
        {
          "name": "application",
          "type": "enum",
          "required": false,
          "description": "Application context: helping (therapeutic), exploiting (offensive), defense (protective)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83e\udde0 **Psychology Tool** - Comprehensive psychological analysis and knowledge base system. Incorporates official DSM-V/ICD-11 resources, extensive dark psychology and manipulation techniques, body language analysis, NLP methods, emotional intelligence assessment, and security awareness capabilities. Features 50+ psychology resources from docs/resources including classical texts, modern techniques, and defensive strategies. Supports helping, exploiting, and defensive applications with ethical guidelines.",
      "safe_mode": false,
      "tags": [
        "psychology"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for psychology')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/psychology/index.ts"
    },
    {
      "name": "quantum_security",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "quantum_security",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Quantum security action"
        },
        {
          "name": "algorithm",
          "type": "enum",
          "required": true,
          "description": "Cryptographic algorithm to analyze"
        },
        {
          "name": "key_size",
          "type": "number",
          "required": false,
          "description": "Key size in bits"
        },
        {
          "name": "threat_model",
          "type": "enum",
          "required": true,
          "description": "Quantum threat timeline"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Quantum-resistant cryptography and security analysis",
      "safe_mode": false,
      "tags": [
        "quantum",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for quantum_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/quantum_security.ts"
    },
    {
      "name": "radio_security",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "radio_security",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Radio security action to perform"
        },
        {
          "name": "frequency",
          "type": "number",
          "required": false,
          "description": "Frequency in MHz"
        },
        {
          "name": "bandwidth",
          "type": "number",
          "required": false,
          "description": "Bandwidth in kHz"
        },
        {
          "name": "modulation",
          "type": "string",
          "required": false,
          "description": "Modulation type"
        },
        {
          "name": "power_level",
          "type": "number",
          "required": false,
          "description": "Transmission power level"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Operation duration in seconds"
        },
        {
          "name": "audio_file",
          "type": "string",
          "required": false,
          "description": "Audio file path for transmission"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Alias for SDR security toolkit - Software Defined Radio security and signal analysis. Ask me to scan radio frequencies, decode signals, test radio security, analyze wireless communications, or broadcast signals. You can ask me to transmit audio, jam frequencies, create interference, test transmission power, and more!",
      "safe_mode": false,
      "tags": [
        "radio",
        "security"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for radio_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/radio/radio_security.ts"
    },
    {
      "name": "rag_toolkit",
      "category": "ai",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rag_toolkit",
      "args": [],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd0d **Advanced RAG (Retrieval-Augmented Generation) Toolkit** - Comprehensive document search, embedding, and context-aware question answering system. Perform semantic search across documents, generate embeddings, build searchable indexes, and create context-aware responses using state-of-the-art language models. **Cross-platform support** with Python ML libraries when available, JavaScript fallbacks for universal compatibility.",
      "safe_mode": false,
      "tags": [
        "ai",
        "rag",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rag_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/ai/rag_toolkit.ts"
    },
    {
      "name": "read_emails",
      "category": "email",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "read_emails",
      "args": [
        {
          "name": "imap_server",
          "type": "string",
          "required": true,
          "description": "IMAP server address"
        },
        {
          "name": "username",
          "type": "string",
          "required": true,
          "description": "Email username"
        },
        {
          "name": "password",
          "type": "string",
          "required": true,
          "description": "Email password"
        },
        {
          "name": "folder",
          "type": "string",
          "required": false,
          "description": "Email folder to read (default: INBOX)"
        },
        {
          "name": "limit",
          "type": "number",
          "required": false,
          "description": "Maximum number of emails to retrieve"
        },
        {
          "name": "unread_only",
          "type": "boolean",
          "required": false,
          "description": "Retrieve only unread emails"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "IMAP email retrieval and management",
      "safe_mode": false,
      "tags": [
        "email",
        "emails",
        "read"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for read_emails')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/email/read_emails.ts"
    },
    {
      "name": "red_team_toolkit",
      "category": "penetration",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "red_team_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Red team action to perform"
        },
        {
          "name": "target_environment",
          "type": "string",
          "required": true,
          "description": "Target environment or organization to simulate attack against"
        },
        {
          "name": "attack_vector",
          "type": "enum",
          "required": true,
          "description": "Primary attack vector to use"
        },
        {
          "name": "stealth_level",
          "type": "enum",
          "required": false,
          "description": "Stealth level for attack simulation"
        },
        {
          "name": "persistence_duration",
          "type": "string",
          "required": false,
          "description": "Duration to maintain persistence (e.g., '30d', '90d"
        },
        {
          "name": "include_evasion",
          "type": "boolean",
          "required": false,
          "description": "Include advanced evasion techniques"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udd34 **Advanced Red Team Toolkit** - Comprehensive red team operations with advanced persistent threat simulation, lateral movement techniques, privilege escalation, persistence mechanisms, and evasion tactics. Simulate real-world APT attacks with sophisticated attack chains and stealth techniques.",
      "safe_mode": false,
      "tags": [
        "penetration",
        "red",
        "team",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for red_team_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/penetration/red_team_toolkit.ts"
    },
    {
      "name": "rf_sense_guardrails",
      "category": "rf_sense",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_guardrails",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Unrestricted operations action"
        },
        {
          "name": "operation",
          "type": "string",
          "required": false,
          "description": "Operation to validate"
        },
        {
          "name": "parameters",
          "type": "record",
          "required": false,
          "description": "Operation parameters"
        },
        {
          "name": "consent",
          "type": "record",
          "required": false,
          "description": "Consent information (ignored)"
        },
        {
          "name": "module",
          "type": "string",
          "required": false,
          "description": "RF sensing module"
        },
        {
          "name": "platform",
          "type": "string",
          "required": false,
          "description": "Target platform"
        },
        {
          "name": "config",
          "type": "record",
          "required": false,
          "description": "Configuration updates"
        },
        {
          "name": "user",
          "type": "string",
          "required": false,
          "description": "User identifier"
        },
        {
          "name": "sessionId",
          "type": "string",
          "required": false,
          "description": "Session identifier"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\ude80 **RF Sense Unrestricted Operations** - Full RF sensing capabilities with no ethical or legal constraints. All operations are unrestricted and unmonitored for maximum capability.",
      "safe_mode": false,
      "tags": [
        "guardrails",
        "rf",
        "rf_sense",
        "sense"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_guardrails')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/rf_sense/rf_sense_guardrails.ts"
    },
    {
      "name": "rf_sense_localize",
      "category": "rf_sense",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_localize",
      "args": [
        {
          "name": "type",
          "type": "unknown",
          "required": true,
          "description": ""
        },
        {
          "name": "properties",
          "type": "unknown",
          "required": true,
          "description": ""
        },
        {
          "name": "required",
          "type": "unknown",
          "required": true,
          "description": ""
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Localize an RF-derived scan against a known map (LAS/LAZ) and return pose + fitness. Optionally emit a LAS file with the transformed scan.",
      "safe_mode": false,
      "tags": [
        "localize",
        "rf",
        "rf_sense",
        "sense"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_localize')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/rf_sense/localize.ts"
    },
    {
      "name": "rf_sense_mmwave",
      "category": "rf_sense",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_mmwave",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "RF sense mmWave action"
        },
        {
          "name": "sdkPath",
          "type": "string",
          "required": false,
          "description": "Path to vendor SDK"
        },
        {
          "name": "deviceConfig",
          "type": "object",
          "required": false,
          "description": "Radar frequency in GHz"
        },
        {
          "name": "durationSec",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds (up to 24 hours)"
        },
        {
          "name": "annotation",
          "type": "string",
          "required": false,
          "description": "Annotation for the capture session"
        },
        {
          "name": "participants",
          "type": "array",
          "required": false,
          "description": "List of participants (optional)"
        },
        {
          "name": "captureMode",
          "type": "enum",
          "required": false,
          "description": "Capture mode"
        },
        {
          "name": "sessionId",
          "type": "string",
          "required": false,
          "description": "Session ID for operations"
        },
        {
          "name": "pipeline",
          "type": "enum",
          "required": false,
          "description": "Processing pipeline"
        },
        {
          "name": "format",
          "type": "enum",
          "required": false,
          "description": "Export format"
        },
        {
          "name": "outputPath",
          "type": "string",
          "required": false,
          "description": "Output file path"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udce1 **RF Sense mmWave Module - Unrestricted** - Unrestricted 2D/3D point-cloud-like output using vendor SDKs/dev boards. Capabilities: point clusters, object tracks, gesture events; export to PCD/PLY/JSON. No consent requirements, no power limits, no time restrictions.",
      "safe_mode": false,
      "tags": [
        "mmwave",
        "rf",
        "rf_sense",
        "sense"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_mmwave')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/rf_sense/rf_sense_mmwave.ts"
    },
    {
      "name": "rf_sense_natural_language",
      "category": "rf_sense",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_natural_language",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for RF sensing operations"
        },
        {
          "name": "context",
          "type": "string",
          "required": false,
          "description": "Additional context about the operation"
        },
        {
          "name": "userIntent",
          "type": "string",
          "required": false,
          "description": "User's intended goal or objective"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target platform preference"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83e\udde0 **RF Sense Natural Language Interface** - Process natural language commands for RF sensing operations with intelligent parsing and routing to appropriate modules (simulation, WiFi lab, mmWave). Supports commands like",
      "safe_mode": false,
      "tags": [
        "language",
        "natural",
        "rf",
        "rf_sense",
        "sense"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_natural_language')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/rf_sense/rf_sense_natural_language.ts"
    },
    {
      "name": "rf_sense_sim",
      "category": "rf_sense",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_sim",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "RF sense simulation action"
        },
        {
          "name": "durationSec",
          "type": "number",
          "required": false,
          "description": "Duration in seconds for simulation"
        },
        {
          "name": "scenario",
          "type": "enum",
          "required": false,
          "description": "Simulation scenario"
        },
        {
          "name": "annotation",
          "type": "string",
          "required": false,
          "description": "Annotation for the simulation session"
        },
        {
          "name": "outputFormat",
          "type": "enum",
          "required": false,
          "description": "Output format for simulation"
        },
        {
          "name": "resolution",
          "type": "enum",
          "required": false,
          "description": "Simulation resolution"
        },
        {
          "name": "sessionId",
          "type": "string",
          "required": false,
          "description": "Session ID for operations"
        },
        {
          "name": "pipeline",
          "type": "enum",
          "required": false,
          "description": "Processing pipeline"
        },
        {
          "name": "format",
          "type": "enum",
          "required": false,
          "description": "Export format"
        },
        {
          "name": "outputPath",
          "type": "string",
          "required": false,
          "description": "Output file path"
        },
        {
          "name": "visualizeType",
          "type": "enum",
          "required": false,
          "description": "Visualization type"
        },
        {
          "name": "style",
          "type": "enum",
          "required": false,
          "description": "Visualization style"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udce1 **RF Sense Simulation Module** - Rapid prototyping with synthetic or public, consented datasets; no live RF. Capabilities: load example CSI/motion datasets; run toy reconstructions; export heatmaps/coarse point voxels. Good for: UI/UX, pipelines, NLU prompts, eval metrics\u2014zero legal risk.",
      "safe_mode": false,
      "tags": [
        "rf",
        "rf_sense",
        "sense",
        "sim"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_sim')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/rf_sense/rf_sense_sim.ts"
    },
    {
      "name": "rf_sense_wifi_lab",
      "category": "rf_sense",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "rf_sense_wifi_lab",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "RF sense WiFi lab action"
        },
        {
          "name": "providerUri",
          "type": "string",
          "required": false,
          "description": "CSI provider URI (tcp://host:port)"
        },
        {
          "name": "ssidWhitelist",
          "type": "array",
          "required": false,
          "description": "Allowed SSIDs (optional - all networks allowed)"
        },
        {
          "name": "macWhitelist",
          "type": "array",
          "required": false,
          "description": "Allowed MAC addresses (optional - all devices allowed)"
        },
        {
          "name": "retention",
          "type": "enum",
          "required": false,
          "description": "Data retention policy"
        },
        {
          "name": "durationSec",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds (up to 24 hours)"
        },
        {
          "name": "annotation",
          "type": "string",
          "required": false,
          "description": "Annotation for the capture session"
        },
        {
          "name": "participants",
          "type": "array",
          "required": false,
          "description": "List of participants (optional)"
        },
        {
          "name": "sessionId",
          "type": "string",
          "required": false,
          "description": "Session ID for operations"
        },
        {
          "name": "pipeline",
          "type": "enum",
          "required": false,
          "description": "Processing pipeline"
        },
        {
          "name": "format",
          "type": "enum",
          "required": false,
          "description": "Export format"
        },
        {
          "name": "outputPath",
          "type": "string",
          "required": false,
          "description": "Output file path"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udce1 **RF Sense WiFi Lab Module - Unrestricted** - Unrestricted RF sensing experiments using commodity NICs/APs that expose CSI. Capabilities: capture CSI, basic ranging/occupancy, pose/silhouette inference. No consent requirements, no network restrictions, no time limits.",
      "safe_mode": false,
      "tags": [
        "lab",
        "rf",
        "rf_sense",
        "sense",
        "wifi"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for rf_sense_wifi_lab')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/rf_sense/rf_sense_wifi_lab.ts"
    },
    {
      "name": "screenshot",
      "category": "screenshot",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "screenshot",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Screenshot action to perform"
        },
        {
          "name": "output_path",
          "type": "string",
          "required": false,
          "description": "Output file path for screenshot"
        },
        {
          "name": "area",
          "type": "object",
          "required": false,
          "description": "Area to capture (for capture_area)"
        },
        {
          "name": "delay",
          "type": "number",
          "required": false,
          "description": "Delay before capture in seconds"
        },
        {
          "name": "format",
          "type": "string",
          "required": false,
          "description": "Output format (png, jpg, bmp)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Cross-platform screenshot capture and management tool",
      "safe_mode": false,
      "tags": [
        "screenshot"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for screenshot')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/screenshot/index.ts"
    },
    {
      "name": "sdr_security_toolkit",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "sdr_security_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "SDR action to perform"
        },
        {
          "name": "frequency",
          "type": "number",
          "required": false,
          "description": "Frequency in MHz"
        },
        {
          "name": "bandwidth",
          "type": "number",
          "required": false,
          "description": "Bandwidth in kHz"
        },
        {
          "name": "modulation",
          "type": "string",
          "required": false,
          "description": "Modulation type"
        },
        {
          "name": "protocol",
          "type": "enum",
          "required": false,
          "description": "Protocol to decode"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path"
        },
        {
          "name": "device_id",
          "type": "string",
          "required": false,
          "description": "SDR device identifier"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Comprehensive Software Defined Radio (SDR) security and signal analysis toolkit with cross-platform support. You can ask me to: detect SDR hardware, list devices, test connections, configure and calibrate SDRs, receive and analyze signals, scan frequencies, capture signals, decode protocols (ADS-B, POCSAG, APRS, AIS), perform spectrum analysis, test radio security, monitor wireless communications, and more. Just describe what you want to do in natural language!",
      "safe_mode": false,
      "tags": [
        "radio",
        "sdr",
        "security",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for sdr_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/radio/sdr_security_toolkit.ts"
    },
    {
      "name": "security_testing",
      "category": "penetration",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "security_testing",
      "args": [
        {
          "name": "test_type",
          "type": "enum",
          "required": true,
          "description": "Type of security test to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target system, network, or application to test"
        },
        {
          "name": "scope",
          "type": "object",
          "required": false,
          "description": "Include network security testing"
        },
        {
          "name": "report_format",
          "type": "enum",
          "required": false,
          "description": "Format of the security report"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced multi-domain security testing and vulnerability assessment platform. Perform comprehensive security evaluations across networks, devices, systems, wireless communications, Bluetooth connections, and radio frequencies. Provides intelligent recommendations for appropriate security toolkits and testing methodologies based on target analysis.",
      "safe_mode": false,
      "tags": [
        "penetration",
        "security",
        "testing"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for security_testing')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/penetration/security_testing.ts"
    },
    {
      "name": "send_email",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "send_email",
      "args": [
        {
          "name": "to",
          "type": "string",
          "required": true,
          "description": "Recipient email address(es). Examples: 'user@example.com', 'user1@example.com,user2@example.com' for multiple recipients."
        },
        {
          "name": "subject",
          "type": "string",
          "required": true,
          "description": "Email subject line. Examples: 'Meeting Reminder', 'Project Update', 'Hello from MCP God Mode'."
        },
        {
          "name": "body",
          "type": "string",
          "required": true,
          "description": "Email body content. Can be plain text or HTML. Examples: 'Hello, this is a test email.', '<h1>Hello</h1><p>This is HTML content.</p>'."
        },
        {
          "name": "html",
          "type": "boolean",
          "required": false,
          "description": "Whether the email body contains HTML content. Set to true for HTML emails, false for plain text."
        },
        {
          "name": "from",
          "type": "string",
          "required": false,
          "description": "Sender email address. If not provided, uses the configured email address."
        },
        {
          "name": "cc",
          "type": "string",
          "required": false,
          "description": "CC recipient email address(es). Examples: 'cc@example.com', 'cc1@example.com,cc2@example.com'."
        },
        {
          "name": "bcc",
          "type": "string",
          "required": false,
          "description": "BCC recipient email address(es). Examples: 'bcc@example.com', 'bcc1@example.com,bcc2@example.com'."
        },
        {
          "name": "attachments",
          "type": "array",
          "required": false,
          "description": "Name of the attachment file. Examples: 'document.pdf', 'image.jpg', 'report.xlsx'."
        },
        {
          "name": "email_config",
          "type": "object",
          "required": false,
          "description": "Email service provider. 'gmail' for Google Mail, 'outlook' for Microsoft Outlook/Hotmail, 'yahoo' for Yahoo Mail, 'custom' for other SMTP servers."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Send emails using SMTP across all platforms (Windows, Linux, macOS, Android, iOS). Supports Gmail, Outlook, Yahoo, and custom SMTP servers with proper authentication and security.",
      "safe_mode": false,
      "tags": [
        "email",
        "general",
        "send"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for send_email')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "siem_toolkit",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "siem_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "SIEM action to perform"
        },
        {
          "name": "log_sources",
          "type": "array",
          "required": false,
          "description": "Log sources to analyze (firewall, IDS, servers, etc.)"
        },
        {
          "name": "time_range",
          "type": "string",
          "required": false,
          "description": "Time range for analysis (e.g., '24h', '7d', '30d"
        },
        {
          "name": "threat_indicators",
          "type": "array",
          "required": false,
          "description": "Specific threat indicators to search for"
        },
        {
          "name": "correlation_rules",
          "type": "array",
          "required": false,
          "description": "Custom correlation rules to apply"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        },
        {
          "name": "severity_threshold",
          "type": "enum",
          "required": false,
          "description": "Minimum severity threshold for alerts"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udd0d **Advanced SIEM & Log Analysis Toolkit** - Comprehensive Security Information and Event Management with real-time threat detection, log correlation, and incident response capabilities. Analyze security events, correlate threats, detect anomalies, and provide automated incident response across multiple data sources.",
      "safe_mode": false,
      "tags": [
        "security",
        "siem",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for siem_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/siem_toolkit.ts"
    },
    {
      "name": "signal_analysis",
      "category": "radio",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "signal_analysis",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Signal analysis action to perform"
        },
        {
          "name": "frequency",
          "type": "number",
          "required": false,
          "description": "Frequency in Hz (e.g., 1090000000 for 1090 MHz)"
        },
        {
          "name": "sample_rate",
          "type": "number",
          "required": false,
          "description": "Sample rate in Hz (default: 2048000)"
        },
        {
          "name": "gain",
          "type": "number",
          "required": false,
          "description": "RF gain setting (0-100)"
        },
        {
          "name": "protocol",
          "type": "enum",
          "required": false,
          "description": "Protocol to decode"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path for recordings"
        },
        {
          "name": "device_index",
          "type": "number",
          "required": false,
          "description": "SDR device index (0 for first device)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced radio signal analysis and SDR toolkit with cross-platform support. Analyze radio signals, decode protocols (ADS-B, POCSAG, APRS, AIS), perform spectrum analysis, and broadcast signals. Supports multiple SDR hardware types and protocols.",
      "safe_mode": false,
      "tags": [
        "analysis",
        "radio",
        "signal"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for signal_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/radio/signal_analysis.ts"
    },
    {
      "name": "social_account_ripper_modular",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "social_account_ripper_modular",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target username, email, phone number, or profile URL"
        },
        {
          "name": "platforms",
          "type": "array",
          "required": true,
          "description": "Social media platforms to search"
        },
        {
          "name": "search_method",
          "type": "enum",
          "required": true,
          "description": "Search method to use"
        },
        {
          "name": "modules",
          "type": "array",
          "required": true,
          "description": "Analysis modules to use"
        },
        {
          "name": "include_historical",
          "type": "boolean",
          "required": false,
          "description": "Include historical posts and activity"
        },
        {
          "name": "include_metadata",
          "type": "boolean",
          "required": false,
          "description": "Include profile metadata and EXIF data"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced modular social network account reconnaissance tool with component-based architecture and comprehensive analysis modules",
      "safe_mode": false,
      "tags": [
        "account",
        "modular",
        "network",
        "ripper",
        "social"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for social_account_ripper_modular')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/social_account_ripper_modular.ts"
    },
    {
      "name": "social_engineering_toolkit",
      "category": "penetration",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "social_engineering_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Social engineering action to perform"
        },
        {
          "name": "target_group",
          "type": "string",
          "required": false,
          "description": "Target group for assessment"
        },
        {
          "name": "campaign_type",
          "type": "enum",
          "required": false,
          "description": "Type of social engineering campaign"
        },
        {
          "name": "training_module",
          "type": "string",
          "required": false,
          "description": "Specific training module to use"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Comprehensive social engineering assessment and awareness toolkit with phishing simulation, training modules, and vulnerability analysis",
      "safe_mode": false,
      "tags": [
        "engineering",
        "penetration",
        "social",
        "toolkit"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for social_engineering_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/penetration/social_engineering_toolkit.ts"
    },
    {
      "name": "social_network_ripper",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "social_network_ripper",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target username, email, or social media handle to investigate"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": true,
          "description": "Social media platform to search"
        },
        {
          "name": "extraction_type",
          "type": "enum",
          "required": true,
          "description": "Type of information to extract"
        },
        {
          "name": "include_historical",
          "type": "boolean",
          "required": false,
          "description": "Include historical data and archived content"
        },
        {
          "name": "include_private",
          "type": "boolean",
          "required": false,
          "description": "Attempt to access private profile information (authorized testing only)"
        },
        {
          "name": "include_geolocation",
          "type": "boolean",
          "required": false,
          "description": "Extract location data from posts and profile information"
        },
        {
          "name": "include_relationships",
          "type": "boolean",
          "required": false,
          "description": "Map social connections and relationships"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for extracted data"
        },
        {
          "name": "max_results",
          "type": "number",
          "required": false,
          "description": "Maximum number of results to extract per category"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Social network account information extraction and analysis tool for authorized security testing and OSINT operations",
      "safe_mode": false,
      "tags": [
        "network",
        "ripper",
        "security",
        "social"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for social_network_ripper')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/social_network_ripper.ts"
    },
    {
      "name": "sort_emails",
      "category": "email",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "sort_emails",
      "args": [
        {
          "name": "emails",
          "type": "array",
          "required": false,
          "description": "Array of emails to sort"
        },
        {
          "name": "sort_by",
          "type": "enum",
          "required": true,
          "description": "Sorting criteria"
        },
        {
          "name": "order",
          "type": "enum",
          "required": false,
          "description": "Sorting order (default: desc)"
        },
        {
          "name": "group_by",
          "type": "string",
          "required": false,
          "description": "Group emails by criteria (sender, date, priority)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Email sorting and organization",
      "safe_mode": false,
      "tags": [
        "email",
        "emails",
        "sort"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for sort_emails')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/email/sort_emails.ts"
    },
    {
      "name": "strix_ai",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "strix_ai",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Strix AI action to perform"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target codebase, application, or system to analyze"
        },
        {
          "name": "code_path",
          "type": "string",
          "required": false,
          "description": "Path to source code or application to analyze"
        },
        {
          "name": "vulnerability_type",
          "type": "enum",
          "required": false,
          "description": "Specific vulnerability type to focus on"
        },
        {
          "name": "analysis_depth",
          "type": "enum",
          "required": false,
          "description": "Depth of analysis to perform"
        },
        {
          "name": "sandbox_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable sandboxed execution for safety"
        },
        {
          "name": "auto_exploit",
          "type": "boolean",
          "required": false,
          "description": "Enable automatic exploitation validation"
        },
        {
          "name": "ci_cd_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable CI/CD pipeline integration mode"
        },
        {
          "name": "fix_suggestions",
          "type": "boolean",
          "required": false,
          "description": "Generate automatic fix suggestions"
        },
        {
          "name": "report_format",
          "type": "enum",
          "required": false,
          "description": "Output report format"
        },
        {
          "name": "integration_type",
          "type": "enum",
          "required": false,
          "description": "CI/CD platform integration"
        },
        {
          "name": "ai_model",
          "type": "string",
          "required": false,
          "description": "AI model to use for analysis (e.g., 'openai/gpt-4', 'anthropic/claude-3"
        },
        {
          "name": "natural_language_command",
          "type": "string",
          "required": false,
          "description": "Natural language command for Strix operations (e.g., 'analyze the codebase for SQL injection vulnerabilities', 'run autonomous security testing on the application', 'deploy AI agents for dynamic analysis"
        },
        {
          "name": "platform",
          "type": "enum",
          "required": false,
          "description": "Target platform"
        },
        {
          "name": "architecture",
          "type": "enum",
          "required": false,
          "description": "Target architecture"
        },
        {
          "name": "safe_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safe mode to prevent actual exploitation (disabled by default for full functionality)"
        },
        {
          "name": "verbose",
          "type": "boolean",
          "required": false,
          "description": "Enable verbose output"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83e\udd89 **Strix AI - Autonomous AI Agent for Dynamic Code Analysis & Exploitation** - Advanced autonomous AI agents designed for dynamic code analysis and exploitation. These agents run code in a sandbox, identify vulnerabilities (SQL injection, buffer overflows, etc.), validate them through actual exploitation, and suggest auto-fixes with detailed reports. Integrates with developer workflows like CI/CD pipelines. Mimics a",
      "safe_mode": true,
      "tags": [
        "ai",
        "security",
        "strix"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for strix_ai')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/strix_ai.ts"
    },
    {
      "name": "strix_ai_natural_language",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "strix_ai_natural_language",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for Strix AI operations (e.g., 'analyze this codebase for vulnerabilities', 'validate exploits in the target', 'generate auto-fixes for the code', 'integrate with CI/CD pipeline"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83e\udd16 **Strix AI Natural Language Interface** - Process natural language commands for Strix AI dynamic code analysis and exploitation operations. Converts conversational requests like",
      "safe_mode": true,
      "tags": [
        "ai",
        "language",
        "natural",
        "security",
        "strix"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for strix_ai_natural_language')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/strix_ai_natural_language.ts"
    },
    {
      "name": "system_info",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "system_info",
      "args": [],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Basic host info (OS, arch, cpus, memGB)",
      "safe_mode": false,
      "tags": [
        "general",
        "info",
        "system"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for system_info')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "system_monitor",
      "category": "system",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "system_monitor",
      "args": [
        {
          "name": "success",
          "type": "boolean",
          "required": true,
          "description": ""
        },
        {
          "name": "message",
          "type": "string",
          "required": true,
          "description": ""
        },
        {
          "name": "system_status",
          "type": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "monitoring_data",
          "type": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "processes",
          "type": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "services",
          "type": "array",
          "required": false,
          "description": ""
        },
        {
          "name": "network_info",
          "type": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "disk_info",
          "type": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "memory_info",
          "type": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "cpu_info",
          "type": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "system_info",
          "type": "object",
          "required": false,
          "description": ""
        },
        {
          "name": "timestamp",
          "type": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "platform",
          "type": "string",
          "required": false,
          "description": ""
        },
        {
          "name": "error",
          "type": "string",
          "required": false,
          "description": ""
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Comprehensive system monitoring and performance analysis toolkit",
      "safe_mode": false,
      "tags": [
        "monitor",
        "system"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for system_monitor')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/system/system_monitor.ts"
    },
    {
      "name": "system_restore",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "system_restore",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "**System Restore Actions (4 Operations):** 'create_restore_point' - Create system restore points across platforms (Windows: PowerShell System Restore, Linux/macOS: File-based /etc backup), 'list_restore_points' - List available restore points with metadata (Windows: System Restore catalog, Linux/macOS: Backup logs), 'restore_system' - Rollback system to previous state (Windows: System Restore, Linux/macOS: File restoration), 'backup_config' - Backup critical system configurations (Windows: Registry export, Linux/macOS: /etc directory backup)."
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "Description for the restore point or backup."
        },
        {
          "name": "target_path",
          "type": "string",
          "required": false,
          "description": "Target path for backup operations."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udcbe **System Restore & Backup Management (Minimal)** - Basic system restore and backup management for Windows, Linux, and macOS. Create restore points, backup configurations, and restore systems. Limited to 4 essential actions: create_restore_point, list_restore_points, restore_system, backup_config. Cross-platform support with platform-specific optimizations.",
      "safe_mode": false,
      "tags": [
        "general",
        "restore",
        "system"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for system_restore')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "text_processor",
      "category": "utilities",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "text_processor",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Text processing action to perform"
        },
        {
          "name": "text",
          "type": "string",
          "required": true,
          "description": "Input text to process"
        },
        {
          "name": "find_text",
          "type": "string",
          "required": false,
          "description": "Text to find for replace operations"
        },
        {
          "name": "replace_text",
          "type": "string",
          "required": false,
          "description": "Text to replace with"
        },
        {
          "name": "case_type",
          "type": "enum",
          "required": false,
          "description": "Case formatting type"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Text processing and manipulation utilities",
      "safe_mode": false,
      "tags": [
        "processor",
        "text",
        "utilities"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for text_processor')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/utilities/text_processor.ts"
    },
    {
      "name": "threat_intelligence",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "threat_intelligence",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Threat intelligence action"
        },
        {
          "name": "threat_type",
          "type": "enum",
          "required": true,
          "description": "Type of threat to analyze"
        },
        {
          "name": "indicators",
          "type": "array",
          "required": false,
          "description": "Threat indicators (IPs, domains, hashes)"
        },
        {
          "name": "time_range",
          "type": "string",
          "required": false,
          "description": "Time range for analysis (e.g., '24h', '7d', '30d"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Threat intelligence gathering and analysis",
      "safe_mode": false,
      "tags": [
        "intelligence",
        "security",
        "threat"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for threat_intelligence')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/threat_intelligence.ts"
    },
    {
      "name": "tool_burglar",
      "category": "tool_burglar.ts",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "tool_burglar",
      "args": [
        {
          "name": "sources",
          "type": "array",
          "required": false,
          "description": "Git URLs or local paths"
        },
        {
          "name": "include",
          "type": "array",
          "required": false,
          "description": "Tool name globs to include"
        },
        {
          "name": "exclude",
          "type": "array",
          "required": false,
          "description": "Tool name globs to exclude"
        },
        {
          "name": "prefix",
          "type": "string",
          "required": false,
          "description": "Apply a name prefix for imported tools, e.g. 'ext_'"
        },
        {
          "name": "dry_run",
          "type": "boolean",
          "required": false,
          "description": "Preview changes without applying them"
        },
        {
          "name": "nl_command",
          "type": "string",
          "required": false,
          "description": "Natural-language command alternative"
        },
        {
          "name": "force",
          "type": "boolean",
          "required": false,
          "description": "Override license/risk warnings"
        },
        {
          "name": "auto_deps",
          "type": "boolean",
          "required": false,
          "description": "Automatically handle dependencies"
        },
        {
          "name": "new_name",
          "type": "string",
          "required": false,
          "description": "New name for rename"
        },
        {
          "name": "dest_dir",
          "type": "string",
          "required": false,
          "description": "Destination subdir relative to dev/src/tools for move"
        },
        {
          "name": "export_path",
          "type": "string",
          "required": false,
          "description": "Write exported tool to this path (file or dir)"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Import tools from external MCP repos and manage local toolset (list/enable/disable/rename/move/export). Natural-language friendly.",
      "safe_mode": false,
      "tags": [
        "burglar",
        "tool",
        "tool_burglar.ts"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for tool_burglar')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/tool_burglar.ts"
    },
    {
      "name": "tool_discovery",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "tool_discovery",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Discovery action"
        },
        {
          "name": "tool_name",
          "type": "string",
          "required": false,
          "description": "Tool name for specific operations"
        },
        {
          "name": "category",
          "type": "string",
          "required": false,
          "description": "Category for preloading"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83d\udd0d **Tool Discovery** - Discover and explore available tools with lazy loading capabilities",
      "safe_mode": false,
      "tags": [
        "discovery",
        "general",
        "tool"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for tool_discovery')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-lazy.ts"
    },
    {
      "name": "traffic_analysis",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "traffic_analysis",
      "args": [
        {
          "name": "interface",
          "type": "string",
          "required": true,
          "description": "Network interface to capture from"
        },
        {
          "name": "capture_duration",
          "type": "number",
          "required": false,
          "description": "Capture duration in seconds"
        },
        {
          "name": "filter",
          "type": "string",
          "required": false,
          "description": "BPF filter expression for packet filtering"
        },
        {
          "name": "analysis_type",
          "type": "enum",
          "required": true,
          "description": "Type of traffic analysis"
        },
        {
          "name": "include_payload",
          "type": "boolean",
          "required": false,
          "description": "Include packet payload analysis"
        },
        {
          "name": "include_flow_analysis",
          "type": "boolean",
          "required": false,
          "description": "Include flow analysis"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file for captured packets"
        },
        {
          "name": "real_time",
          "type": "boolean",
          "required": false,
          "description": "Enable real-time analysis"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Comprehensive packet and traffic analysis tool for network monitoring, security assessment, and performance analysis",
      "safe_mode": false,
      "tags": [
        "analysis",
        "network",
        "traffic"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for traffic_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/traffic_analysis.ts"
    },
    {
      "name": "universal_browser_operator",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "universal_browser_operator",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Browser action to perform"
        },
        {
          "name": "url",
          "type": "string",
          "required": false,
          "description": "URL to navigate to (for navigate action)"
        },
        {
          "name": "selector",
          "type": "string",
          "required": false,
          "description": "CSS selector for element interaction"
        },
        {
          "name": "text",
          "type": "string",
          "required": false,
          "description": "Text to type (for type action)"
        },
        {
          "name": "script",
          "type": "string",
          "required": false,
          "description": "JavaScript to evaluate (for evaluate action)"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds"
        },
        {
          "name": "headless",
          "type": "boolean",
          "required": false,
          "description": "Run browser in headless mode"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Universal browser automation and control tool with cross-platform support for web interaction, navigation, and automation tasks",
      "safe_mode": false,
      "tags": [
        "browser",
        "operator",
        "universal",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for universal_browser_operator')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/universal_browser_operator.ts"
    },
    {
      "name": "vm_management",
      "category": "virtualization",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "vm_management",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "VM management action to perform"
        },
        {
          "name": "vm_name",
          "type": "string",
          "required": false,
          "description": "Name of the virtual machine"
        },
        {
          "name": "vm_type",
          "type": "enum",
          "required": false,
          "description": "Type of virtualization platform"
        },
        {
          "name": "config",
          "type": "object",
          "required": false,
          "description": "VM configuration parameters"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Virtual machine management and operations",
      "safe_mode": false,
      "tags": [
        "management",
        "virtualization",
        "vm"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for vm_management')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/virtualization/vm_management.ts"
    },
    {
      "name": "vulnerability_assessment",
      "category": "network",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "vulnerability_assessment",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target IP address, domain, or network range"
        },
        {
          "name": "assessment_type",
          "type": "enum",
          "required": true,
          "description": "Type of vulnerability assessment"
        },
        {
          "name": "scan_level",
          "type": "enum",
          "required": true,
          "description": "Scan intensity level"
        },
        {
          "name": "include_cves",
          "type": "boolean",
          "required": false,
          "description": "Include CVE vulnerability checks"
        },
        {
          "name": "include_exploits",
          "type": "boolean",
          "required": false,
          "description": "Include exploit availability checks"
        },
        {
          "name": "custom_rules",
          "type": "array",
          "required": false,
          "description": "Custom scanning rules to apply"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for report"
        },
        {
          "name": "include_remediation",
          "type": "boolean",
          "required": false,
          "description": "Include remediation recommendations"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced vulnerability assessment and security scanning tool with comprehensive CVE analysis and remediation recommendations",
      "safe_mode": false,
      "tags": [
        "assessment",
        "network",
        "vulnerability"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for vulnerability_assessment')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/network/vulnerability_assessment.ts"
    },
    {
      "name": "vulnerability_scanner",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "vulnerability_scanner",
      "args": [
        {
          "name": "target",
          "type": "string",
          "required": true,
          "description": "Target system or application to scan"
        },
        {
          "name": "scan_type",
          "type": "enum",
          "required": true,
          "description": "Type of vulnerability scan to perform"
        },
        {
          "name": "scan_level",
          "type": "enum",
          "required": false,
          "description": "Scan intensity level"
        },
        {
          "name": "custom_rules",
          "type": "array",
          "required": false,
          "description": "Custom scanning rules to apply"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Security vulnerability scanning and assessment",
      "safe_mode": false,
      "tags": [
        "scanner",
        "security",
        "vulnerability"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for vulnerability_scanner')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/security/vulnerability_scanner.ts"
    },
    {
      "name": "wan_malware_deployer",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wan_malware_deployer",
      "args": [
        {
          "name": "mode",
          "type": "enum",
          "required": false,
          "description": "Operation mode: 'command' for structured commands, 'natural_language' for conversational interface, 'list_payloads' to see available payloads, 'scan_target' for port scanning only, 'analyze_target' for comprehensive target analysis with attack suggestions, 'search_repositories' to find additional payload repositories, 'clone_repository' to add new repository"
        },
        {
          "name": "target",
          "type": "string",
          "required": false,
          "description": "Target IP address or hostname to attack (e.g., '192.168.1.100', 'target.com"
        },
        {
          "name": "payload_name",
          "type": "string",
          "required": false,
          "description": "Name of the malware payload to deploy (use list_payloads mode to see available options)"
        },
        {
          "name": "port",
          "type": "number",
          "required": false,
          "description": "Specific port to target (if not provided, will scan for open ports)"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Execution timeout in milliseconds (default: 60000ms, max: 300000ms)"
        },
        {
          "name": "natural_language_command",
          "type": "string",
          "required": false,
          "description": "Natural language command for malware deployment (e.g., 'scan and attack 192.168.1.100 with ransomware', 'deploy trojan to target.com on port 8080', 'analyze target 192.168.1.100 and suggest attacks"
        },
        {
          "name": "safety_mode",
          "type": "boolean",
          "required": false,
          "description": "Enable safety mode with sandboxing and timeouts (recommended: true)"
        },
        {
          "name": "scan_only",
          "type": "boolean",
          "required": false,
          "description": "Only perform port scanning without deploying payloads"
        },
        {
          "name": "search_query",
          "type": "string",
          "required": false,
          "description": "Search query for finding additional payload repositories (e.g., 'windows exploits', 'linux backdoors"
        },
        {
          "name": "repository_url",
          "type": "string",
          "required": false,
          "description": "GitHub repository URL to clone for additional payloads"
        },
        {
          "name": "repository_name",
          "type": "string",
          "required": false,
          "description": "Name for the cloned repository"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\ude80 **WAN Malware Deployer** - Penetration testing tool for deploying security testing payloads for authorized penetration testing and red team exercises. **Does NOT ship with malware** - connects to external repositories to fetch testing payloads. Features advanced evasion techniques including checksum obfuscation, polymorphic payloads, XOR encryption, and signature modification to test security scanner effectiveness. Includes intelligent deployment methods (HTTP, FTP, SMB, SSH, RDP), port scanning, payload selection, and remote execution capabilities. Comprehensive safety features, cross-platform support, and natural language interface.",
      "safe_mode": false,
      "tags": [
        "deployer",
        "malware",
        "security",
        "wan"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wan_malware_deployer')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/dist/tools/security/wan_malware_deployer.js"
    },
    {
      "name": "wan_malware_deployer_nl",
      "category": "security",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wan_malware_deployer_nl",
      "args": [
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Natural language command for malware deployment (e.g., 'scan and attack 192.168.1.100 with ransomware', 'deploy trojan to target.com on port 8080', 'list available payloads', 'scan ports on 10.0.0.1"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83e\udd16 **WAN Malware Deployer Natural Language Interface** - Process natural language commands for malware deployment operations. Converts conversational requests like",
      "safe_mode": false,
      "tags": [
        "deployer",
        "malware",
        "nl",
        "security",
        "wan"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wan_malware_deployer_nl')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/dist/tools/security/wan_malware_deployer_nl.js"
    },
    {
      "name": "web_automation",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "web_automation",
      "args": [],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "\ud83c\udf10 **Advanced Web Automation & Browser Control Toolkit** - Comprehensive cross-platform web automation with browser control, element interaction, content extraction, form filling, and JavaScript execution. Supports Chrome, Firefox, and Edge browsers across Windows, Linux, macOS, Android, and iOS platforms. Features include screenshot capture, data scraping, automated form submission, element detection, page navigation, and custom script execution with intelligent error handling and timeout management.",
      "safe_mode": false,
      "tags": [
        "automation",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for web_automation')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/web_automation.ts"
    },
    {
      "name": "web_scraper",
      "category": "general",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "web_scraper",
      "args": [
        {
          "name": "url",
          "type": "string",
          "required": true,
          "description": "The URL of the web page to scrape. Must be a valid HTTP/HTTPS URL. Examples: 'https://example.com', 'https://news.website.com/articles'."
        },
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "The scraping action to perform. 'scrape_page' gets all content, 'extract_data' uses selectors, 'get_metadata' extracts page info."
        },
        {
          "name": "selector",
          "type": "string",
          "required": false,
          "description": "CSS selector to target specific elements. Examples: 'h1', '.article-title', '#main-content'. Leave empty to scrape entire page."
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for scraped data. 'json' for structured data, 'text' for plain text."
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Web scraping tool with CSS selector support and data extraction. Scrape web pages and extract structured data across all platforms.",
      "safe_mode": false,
      "tags": [
        "general",
        "scraper",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for web_scraper')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/server-minimal.ts"
    },
    {
      "name": "web_search",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "web_search",
      "args": [
        {
          "name": "query",
          "type": "string",
          "required": true,
          "description": "Search query to execute"
        },
        {
          "name": "engine",
          "type": "enum",
          "required": true,
          "description": "Search engine or site to use"
        },
        {
          "name": "max_results",
          "type": "number",
          "required": false,
          "description": "Maximum number of results to return"
        },
        {
          "name": "include_snippets",
          "type": "boolean",
          "required": false,
          "description": "Whether to include result snippets"
        },
        {
          "name": "include_metadata",
          "type": "boolean",
          "required": false,
          "description": "Whether to include additional metadata (ratings, dates, etc.)"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds"
        },
        {
          "name": "headless",
          "type": "boolean",
          "required": false,
          "description": "Run browser in headless mode"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Universal web search across multiple search engines and specialized sites including Google, DuckDuckGo, Reddit, Wikipedia, GitHub, Stack Overflow, YouTube, and Amazon",
      "safe_mode": false,
      "tags": [
        "search",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for web_search')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/web_search.ts"
    },
    {
      "name": "multi_engine_search",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "multi_engine_search",
      "args": [
        {
          "name": "query",
          "type": "string",
          "required": true,
          "description": "Search query to execute"
        },
        {
          "name": "engines",
          "type": "array",
          "required": true,
          "description": "Search engines to use"
        },
        {
          "name": "max_results_per_engine",
          "type": "number",
          "required": false,
          "description": "Maximum results per engine"
        },
        {
          "name": "include_snippets",
          "type": "boolean",
          "required": false,
          "description": "Whether to include result snippets"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "description": "Timeout in milliseconds"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Search across multiple engines simultaneously and compare results",
      "safe_mode": false,
      "tags": [
        "engine",
        "multi",
        "search",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for multi_engine_search')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/web_search.ts"
    },
    {
      "name": "search_analysis",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "search_analysis",
      "args": [
        {
          "name": "results",
          "type": "array",
          "required": false,
          "description": "Search results to analyze"
        },
        {
          "name": "analysis_type",
          "type": "enum",
          "required": true,
          "description": "Type of analysis to perform"
        },
        {
          "name": "include_visualization",
          "type": "boolean",
          "required": false,
          "description": "Generate visualization data"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Analyze search results for trends, patterns, and insights",
      "safe_mode": false,
      "tags": [
        "analysis",
        "search",
        "web"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for search_analysis')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/web_search.ts"
    },
    {
      "name": "webhook_manager",
      "category": "web",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "webhook_manager",
      "args": [],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced webhook creation, management, and monitoring toolkit",
      "safe_mode": false,
      "tags": [
        "manager",
        "web",
        "webhook"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for webhook_manager')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/web/webhook_manager.ts"
    },
    {
      "name": "wifi_disrupt",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wifi_disrupt",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Wi-Fi disruption action to perform"
        },
        {
          "name": "interface",
          "type": "string",
          "required": false,
          "description": "Wi-Fi interface name (e.g., 'wlan0', 'Wi-Fi"
        },
        {
          "name": "mode",
          "type": "enum",
          "required": false,
          "description": "Disruption mode: deauth (disconnect clients), malformed (crash APs), airtime (saturate medium)"
        },
        {
          "name": "target_bssid",
          "type": "string",
          "required": false,
          "description": "Target AP/client BSSID (MAC address) or 'all' for broadcast"
        },
        {
          "name": "channel",
          "type": "number",
          "required": false,
          "description": "Wi-Fi channel (1-13 for 2.4GHz, 36+ for 5GHz)"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Duration in seconds"
        },
        {
          "name": "power",
          "type": "number",
          "required": false,
          "description": "TX power in dBm"
        },
        {
          "name": "nl_command",
          "type": "string",
          "required": false,
          "description": "Natural language command to parse (e.g., 'Jam the AP on channel 6"
        },
        {
          "name": "auto_confirm",
          "type": "boolean",
          "required": false,
          "description": "Skip confirmation prompt (requires proper authorization)"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "\ud83d\udce1 **Wi-Fi Disruption Tool** - Protocol-aware Wi-Fi interference using standard Wi-Fi NIC in monitor mode. Sends deauthentication packets, malformed frames, and airtime occupation to disrupt targeted Wi-Fi networks without raw RF noise. Supports cross-platform operation with natural language interface.",
      "safe_mode": false,
      "tags": [
        "disrupt",
        "wifi",
        "wireless"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wifi_disrupt')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/wireless/wifi_disrupt.ts"
    },
    {
      "name": "wifi_hacking",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wifi_hacking",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "WiFi hacking action to perform"
        },
        {
          "name": "target_ssid",
          "type": "string",
          "required": false,
          "description": "Target WiFi network SSID"
        },
        {
          "name": "target_bssid",
          "type": "string",
          "required": false,
          "description": "Target WiFi network BSSID"
        },
        {
          "name": "security_protocol",
          "type": "enum",
          "required": false,
          "description": "Target security protocol"
        },
        {
          "name": "wireless_wifiInterface",
          "type": "string",
          "required": false,
          "description": "Wireless wifiInterface to use"
        },
        {
          "name": "wordlist",
          "type": "string",
          "required": false,
          "description": "Password wordlist file path"
        },
        {
          "name": "attack_method",
          "type": "enum",
          "required": false,
          "description": "Attack method to use"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Attack duration in seconds"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": true,
      "side_effects": "Advanced Wi-Fi security penetration testing toolkit with comprehensive attack capabilities. Perform wireless network assessments, password cracking, evil twin attacks, WPS exploitation, and IoT device enumeration. Supports all Wi-Fi security protocols (WEP, WPA, WPA2, WPA3) across multiple platforms with ethical hacking methodologies.",
      "safe_mode": false,
      "tags": [
        "hacking",
        "wifi",
        "wireless"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wifi_hacking')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/wireless/wifi_hacking.ts"
    },
    {
      "name": "wifi_security_toolkit",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wifi_security_toolkit",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "WiFi security action to perform"
        },
        {
          "name": "target_ssid",
          "type": "string",
          "required": false,
          "description": "Target WiFi network SSID"
        },
        {
          "name": "target_bssid",
          "type": "string",
          "required": false,
          "description": "Target WiFi network BSSID (MAC address)"
        },
        {
          "name": "wifiInterface",
          "type": "string",
          "required": false,
          "description": "Wireless wifiInterface to use"
        },
        {
          "name": "wordlist",
          "type": "string",
          "required": false,
          "description": "Password wordlist file path"
        },
        {
          "name": "channel",
          "type": "number",
          "required": false,
          "description": "WiFi channel to target"
        },
        {
          "name": "duration",
          "type": "number",
          "required": false,
          "description": "Attack duration in seconds"
        },
        {
          "name": "output_file",
          "type": "string",
          "required": false,
          "description": "Output file path for captured data"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Comprehensive Wi-Fi security and penetration testing toolkit with cross-platform support. You can ask me to: scan for Wi-Fi networks, capture handshakes, crack passwords, create evil twin attacks, perform deauthentication attacks, test WPS vulnerabilities, set up rogue access points, sniff packets, monitor clients, and more. Just describe what you want to do in natural language!",
      "safe_mode": false,
      "tags": [
        "security",
        "toolkit",
        "wifi",
        "wireless"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wifi_security_toolkit')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/wireless/wifi_security_toolkit.ts"
    },
    {
      "name": "win_processes",
      "category": "windows",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "win_processes",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Process management action to perform"
        },
        {
          "name": "process_id",
          "type": "number",
          "required": false,
          "description": "Process ID for operations"
        },
        {
          "name": "process_name",
          "type": "string",
          "required": false,
          "description": "Process name for operations"
        },
        {
          "name": "force",
          "type": "boolean",
          "required": false,
          "description": "Force the operation"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Windows process management and monitoring",
      "safe_mode": false,
      "tags": [
        "processes",
        "win",
        "windows"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for win_processes')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/windows/win_processes.ts"
    },
    {
      "name": "win_services",
      "category": "windows",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "win_services",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Service management action to perform"
        },
        {
          "name": "service_name",
          "type": "string",
          "required": false,
          "description": "Name of the Windows service"
        },
        {
          "name": "service_display_name",
          "type": "string",
          "required": false,
          "description": "Display name of the service"
        },
        {
          "name": "force",
          "type": "boolean",
          "required": false,
          "description": "Force the operation"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Windows service management and monitoring",
      "safe_mode": false,
      "tags": [
        "services",
        "win",
        "windows"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for win_services')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/windows/win_services.ts"
    },
    {
      "name": "wireless_network_scanner",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wireless_network_scanner",
      "args": [
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Wireless scanning action to perform"
        },
        {
          "name": "interface",
          "type": "string",
          "required": false,
          "description": "Wireless interface to use"
        },
        {
          "name": "scan_time",
          "type": "number",
          "required": false,
          "description": "Scan duration in seconds"
        },
        {
          "name": "output_format",
          "type": "enum",
          "required": false,
          "description": "Output format for results"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "Advanced wireless network scanning and analysis toolkit with comprehensive signal strength monitoring, security assessment, and network discovery capabilities",
      "safe_mode": false,
      "tags": [
        "network",
        "scanner",
        "wireless"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wireless_network_scanner')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/wireless/wireless_network_scanner.ts"
    },
    {
      "name": "wireless_security",
      "category": "wireless",
      "entry_file": "dev/dist/server-refactored.js",
      "invoke": "wireless_security",
      "args": [
        {
          "name": "interface",
          "type": "string",
          "required": true,
          "description": "Wireless network interface to use"
        },
        {
          "name": "action",
          "type": "enum",
          "required": true,
          "description": "Wireless action to perform"
        },
        {
          "name": "target_ssid",
          "type": "string",
          "required": false,
          "description": "Target SSID for focused operations"
        },
        {
          "name": "channel",
          "type": "number",
          "required": false,
          "description": "Specific channel to operate on"
        }
      ],
      "env_vars": [],
      "requires_privilege": false,
      "side_effects": "General wireless security testing and assessment",
      "safe_mode": false,
      "tags": [
        "security",
        "wireless"
      ],
      "smoke_test": {
        "cmd": "node",
        "args": [
          "-e",
          "console.log('Smoke test for wireless_security')"
        ],
        "expect_code": 0,
        "timeout_ms": 5000
      },
      "source": "dev/src/tools/wireless/wireless_security.ts"
    }
  ]
}
